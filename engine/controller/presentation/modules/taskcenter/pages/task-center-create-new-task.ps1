$Session:TaskGetMethodSelectedItem = $null
$Session:EntiyGroupSelectedItem = 0
$Session:EntiyModelSelectedItem = 0

$MainSC = {
    New-UDGrid -Item -ExtraSmallSize 12 -SmallSize 12 -MediumSize 12 -LargeSize 12 -ExtraLargeSize 12 -Content {
        New-UDPaper -ClassName "task-center-box-layout" -Square -Content {
            New-UDRow -Columns {
                New-UDColumn -SmallSize 12 -MediumSize 12 -LargeSize 12 {
                    New-UDElement -Tag 'table' -Content {
                        New-UDElement -Tag 'tr' -Content {
                            New-UDElement -Tag 'td' -Content {
                                New-UDIcon -Icon 'Tasks' -Size '1x' -Border -ClassName 'task-center-box-logo'
                            }
                            New-UDElement -Tag 'td' -Content {
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDTypography -Text 'Create New Task Form' -ClassName 'task-center-box-title'
                                }
                            }
                        }
                    }
                    New-UDElement -Tag 'div' -Content {
                        New-UDElement -Tag 'table' -Content {
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Task Name' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTextbox -Id 'TaskNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Task Group' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskGroupIdSelectBoxData = 'null'
                                            New-UDSelect -Id 'TaskGroupIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name ' ' -Value 0
                                                if(Test-Path $Cache:TaskGroupDatabasePath){
                                                    $Cache:TaskGroupSC|iex
                                                    $TaskGroupList = $Cache:TaskGroupList
                                                    if($TaskGroupList){
                                                        foreach ($Group in $TaskGroupList) {
                                                            New-UDSelectOption -Name $Group.Name -Value $Group.Name
                                                        }
                                                    }
                                                }
                                            } -OnChange {
                                                if($EventData -eq 0){
                                                    $Session:TaskGroupIdSelectBoxData = 'null'
                                                }
                                                else{
                                                    $Session:TaskGroupIdSelectBoxData = $EventData
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Task Type' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskTypeIdSelectBoxData = 'null'
                                            New-UDSelect -Id 'TaskTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name ' ' -Value 0
                                                if(Test-Path $Cache:TaskTypeDatabasePath){
                                                    $Cache:TaskTypeSC|iex
                                                    $TaskTypeList = $Cache:TaskTypeList
                                                    if($TaskTypeList){
                                                        foreach ($Type in $TaskTypeList) {
                                                            New-UDSelectOption -Name $Type.Name -Value $Type.Name
                                                        }
                                                    }
                                                }
                                            } -OnChange {
                                                if($EventData -eq 0){
                                                    $Session:TaskTypeIdSelectBoxData = 'null'
                                                }
                                                else{
                                                    $Session:TaskTypeIdSelectBoxData = $EventData
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Task Method' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskMethodTypeIdSelectBoxData = 'Throw'
                                            New-UDSelect -Id 'TaskMethodTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Throw' -Value 1
                                                New-UDSelectOption -Name 'Catch' -Value 2
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskMethodTypeIdSelectBoxData = 'Throw'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskMethodTypeIdSelectBoxData = 'Catch'
                                                }
                                                Sync-UDElement -Id 'InterfaceBlockPointDynamicId'
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'GET Method' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskGetMethodIdSelectBoxData = 'Local Storage'
                                            New-UDSelect -Id 'TaskGetMethodIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Local Storage' -Value 1
                                                New-UDSelectOption -Name 'PSU Server' -Value 2
                                                New-UDSelectOption -Name 'SQL' -Value 3
                                                New-UDSelectOption -Name 'Terminal' -Value 4
                                                New-UDSelectOption -Name 'Terminal Cache File' -Value 5
                                                New-UDSelectOption -Name 'No Action' -Value 6
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'Local Storage'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'PSU Server'
                                                }
                                                elseif($EventData -eq 3){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'SQL'
                                                }
                                                elseif($EventData -eq 4){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'Terminal'
                                                }
                                                elseif($EventData -eq 5){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'Terminal Cache File'
                                                }
                                                elseif($EventData -eq 6){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'No Action'
                                                }
                                                $Session:TaskGetMethodSelectedItem = $EventData
                                                Sync-UDElement -Id 'TaskGetExpirationDynamicId'
                                                Sync-UDElement -Id 'TaskGetReturnTypeDynamicId'
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'GET Return' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            New-UDDynamic -Id 'TaskGetReturnTypeDynamicId' -Content {
                                                if($Session:TaskGetMethodSelectedItem -eq 6){
                                                    $Session:TaskGetReturnTypeIdSelectBoxData = 'No Action'
                                                    New-UDSelect -Id 'TaskGetReturnTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name 'No Action' -Value 1
                                                    } -Disabled
                                                }
                                                else{
                                                    $Session:TaskGetReturnTypeIdSelectBoxData = 'All'
                                                    New-UDSelect -Id 'TaskGetReturnTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name 'All' -Value 1
                                                        New-UDSelectOption -Name 'Selected' -Value 2
                                                    } -OnChange {
                                                        if($EventData -eq 1){
                                                            $Session:TaskGetReturnTypeIdSelectBoxData = 'All'
                                                        }
                                                        elseif($EventData -eq 2){
                                                            $Session:TaskGetReturnTypeIdSelectBoxData = 'Selected'
                                                        }
                                                    }
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'GET Expiration' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            New-UDDynamic -Id 'TaskGetExpirationDynamicId' -Content {
                                                if($Session:TaskGetMethodSelectedItem -eq 6){
                                                    $Session:TaskGetExpirationIdSelectBoxData = 'No Action'
                                                    New-UDSelect -Id 'TaskGetExpirationIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name 'No Action' -Value 1
                                                    } -Disabled
                                                }
                                                else{
                                                    $Session:TaskGetExpirationIdSelectBoxData = 'After Use'
                                                    New-UDSelect -Id 'TaskGetExpirationIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name 'After Use' -Value 1
                                                        New-UDSelectOption -Name 'Never' -Value 2
                                                    } -OnChange {
                                                        if($EventData -eq 1){
                                                            $Session:TaskGetExpirationIdSelectBoxData = 'After Use'
                                                        }
                                                        elseif($EventData -eq 2){
                                                            $Session:TaskGetExpirationIdSelectBoxData = 'Never'
                                                        }
                                                    }
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'SET Method' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskSetMethodIdSelectBoxData = 'Local Storage'
                                            New-UDSelect -Id 'TaskSetMethodIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Local Storage' -Value 1
                                                New-UDSelectOption -Name 'PSU Server' -Value 2
                                                New-UDSelectOption -Name 'SQL' -Value 3
                                                New-UDSelectOption -Name 'Terminal' -Value 4
                                                New-UDSelectOption -Name 'Terminal-FileCache' -Value 5
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'Local Storage'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'PSU Server'
                                                }
                                                elseif($EventData -eq 3){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'SQL'
                                                }
                                                elseif($EventData -eq 4){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'Terminal'
                                                }
                                                elseif($EventData -eq 5){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'Terminal Cache File'
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'SET Return' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskSetReturnTypeIdSelectBoxData = 'All'
                                            New-UDSelect -Id 'TaskSetReturnTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'All' -Value 1
                                                New-UDSelectOption -Name 'Selected' -Value 2
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskSetReturnTypeIdSelectBoxData = 'All'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskSetReturnTypeIdSelectBoxData = 'Selected'
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'SET Type' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskSetTypeIdSelectBoxData = 'Add'
                                            New-UDSelect -Id 'TaskSetTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Add' -Value 1
                                                New-UDSelectOption -Name 'Delete' -Value 2
                                                New-UDSelectOption -Name 'Update' -Value 3
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskSetTypeIdSelectBoxData = 'Add'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskSetTypeIdSelectBoxData = 'Delete'
                                                }
                                                elseif($EventData -eq 3){
                                                    $Session:TaskSetTypeIdSelectBoxData = 'Update'
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDDynamic -Id 'InterfaceBlockPointDynamicId' -Content {
                                $Cache:InterfaceBlockDatabaseSC|iex
                                if($Session:TaskMethodTypeIdSelectBoxData -eq 'Throw'){
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Startpoint' -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDStyle -Content {
                                                    $Session:InterfaceBlocksStartPointIdSelectBoxData = 'null'
                                                    New-UDSelect -Id 'InterfaceBlocksStartPointIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name ' ' -Value 0
                                                        foreach ($ServerBlock in $Cache:ServerBlockData) {
                                                            $ServerBlockTerminalId       = (($ServerBlock.Selections).TerminalProvider).Id
                                                            $ServerBlockTerminalProvider = (($ServerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ServerBlockTerminalProvider -and '' -ne $ServerBlockTerminalProvider -and 'null' -ne $ServerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ServerBlockTerminalProvider"+' | '+'Id: '+"$ServerBlockTerminalId") -Value $ServerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($ComponentBlock in $Cache:ComponentsBlockData) {
                                                            $ComponentBlockTerminalId       = (($ComponentBlock.Selections).TerminalProvider).Id
                                                            $ComponentBlockTerminalProvider = (($ComponentBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ComponentBlockTerminalProvider -and '' -ne $ComponentBlockTerminalProvider -and 'null' -ne $ComponentBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ComponentBlockTerminalProvider"+' | '+'Id: '+"$ComponentBlockTerminalId") -Value $ComponentBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaControllerBlock in $Cache:PsucaControllerBlockData) {
                                                            $PsucaControllerBlockTerminalId       = (($PsucaControllerBlock.Selections).TerminalProvider).Id
                                                            $PsucaControllerBlockTerminalProvider = (($PsucaControllerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaControllerBlockTerminalProvider -and '' -ne $PsucaControllerBlockTerminalProvider -and 'null' -ne $PsucaControllerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaControllerBlockTerminalProvider"+' | '+'Id: '+"$PsucaControllerBlockTerminalId") -Value $PsucaControllerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaDashboardBlock in $Cache:PsucaDashboardBlockData) {
                                                            $PsucaDashboardBlockTerminalId       = (($PsucaDashboardBlock.Selections).TerminalProvider).Id
                                                            $PsucaDashboardBlockTerminalProvider = (($PsucaDashboardBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaDashboardBlockTerminalProvider -and '' -ne $PsucaDashboardBlockTerminalProvider -and 'null' -ne $PsucaDashboardBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaDashboardBlockTerminalProvider"+' | '+'Id: '+"$PsucaDashboardBlockTerminalId") -Value $PsucaDashboardBlockTerminalId
                                                            }
                                                        }
                                                    } -OnChange {
                                                        if($EventData -eq 0){
                                                            $Session:InterfaceBlocksStartPointIdSelectBoxData = 'null'
                                                        }
                                                        else{
                                                            $Session:InterfaceBlocksStartPointIdSelectBoxData = $EventData
                                                        }
                                                    }
                                                } -Style '
                                                    label + .css-1ntzb12 {
                                                        margin-top: 0px;
                                                    }
                                                '
                                            }
                                        }
                                    }
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Endpoint' -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDStyle -Content {
                                                    $Session:InterfaceBlocksEndPointIdSelectBoxData = 'null'
                                                    New-UDSelect -Id 'InterfaceBlocksEndPointIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name ' ' -Value 0
                                                        foreach ($ServerBlock in $Cache:ServerBlockData) {
                                                            $ServerBlockServiceId       = (($ServerBlock.Selections).ServiceProvider).Id
                                                            $ServerBlockServiceProvider = (($ServerBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $ServerBlockServiceProvider -and '' -ne $ServerBlockServiceProvider -and 'null' -ne $ServerBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$ServerBlockServiceProvider"+' | '+'Id: '+"$ServerBlockServiceId") -Value $ServerBlockServiceId
                                                            }
                                                            $ServerBlockTerminalId       = (($ServerBlock.Selections).TerminalProvider).Id
                                                            $ServerBlockTerminalProvider = (($ServerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ServerBlockTerminalProvider -and '' -ne $ServerBlockTerminalProvider -and 'null' -ne $ServerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ServerBlockTerminalProvider"+' | '+'Id: '+"$ServerBlockTerminalId") -Value $ServerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($ComponentBlock in $Cache:ComponentsBlockData) {
                                                            $ComponentBlockServiceId       = (($ComponentBlock.Selections).ServiceProvider).Id
                                                            $ComponentBlockServiceProvider = (($ComponentBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $ComponentBlockServiceProvider -and '' -ne $ComponentBlockServiceProvider -and 'null' -ne $ComponentBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$ComponentBlockServiceProvider"+' | '+'Id: '+"$ComponentBlockServiceId") -Value $ComponentBlockServiceId
                                                            }
                                                            $ComponentBlockTerminalId       = (($ComponentBlock.Selections).TerminalProvider).Id
                                                            $ComponentBlockTerminalProvider = (($ComponentBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ComponentBlockTerminalProvider -and '' -ne $ComponentBlockTerminalProvider -and 'null' -ne $ComponentBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ComponentBlockTerminalProvider"+' | '+'Id: '+"$ComponentBlockTerminalId") -Value $ComponentBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaControllerBlock in $Cache:PsucaControllerBlockData) {
                                                            $PsucaControllerBlockServiceId       = (($PsucaControllerBlock.Selections).ServiceProvider).Id
                                                            $PsucaControllerBlockServiceProvider = (($PsucaControllerBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $PsucaControllerBlockServiceProvider -and '' -ne $PsucaControllerBlockServiceProvider -and 'null' -ne $PsucaControllerBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$PsucaControllerBlockServiceProvider"+' | '+'Id: '+"$PsucaControllerBlockServiceId") -Value $PsucaControllerBlockServiceId
                                                            }
                                                            $PsucaControllerBlockTerminalId       = (($PsucaControllerBlock.Selections).TerminalProvider).Id
                                                            $PsucaControllerBlockTerminalProvider = (($PsucaControllerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaControllerBlockTerminalProvider -and '' -ne $PsucaControllerBlockTerminalProvider -and 'null' -ne $PsucaControllerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaControllerBlockTerminalProvider"+' | '+'Id: '+"$PsucaControllerBlockTerminalId") -Value $PsucaControllerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaDashboardBlock in $Cache:PsucaDashboardBlockData) {
                                                            $PsucaDashboardBlockServiceId       = (($PsucaDashboardBlock.Selections).ServiceProvider).Id
                                                            $PsucaDashboardBlockServiceProvider = (($PsucaDashboardBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $PsucaDashboardBlockServiceProvider -and '' -ne $PsucaDashboardBlockServiceProvider -and 'null' -ne $PsucaDashboardBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$PsucaDashboardBlockServiceProvider"+' | '+'Id: '+"$PsucaDashboardBlockServiceId") -Value $PsucaDashboardBlockServiceId
                                                            }
                                                            $PsucaDashboardBlockTerminalId       = (($PsucaDashboardBlock.Selections).TerminalProvider).Id
                                                            $PsucaDashboardBlockTerminalProvider = (($PsucaDashboardBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaDashboardBlockTerminalProvider -and '' -ne $PsucaDashboardBlockTerminalProvider -and 'null' -ne $PsucaDashboardBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaDashboardBlockTerminalProvider"+' | '+'Id: '+"$PsucaDashboardBlockTerminalId") -Value $PsucaDashboardBlockTerminalId
                                                            }
                                                        }
                                                    } -OnChange {
                                                        if($EventData -eq 0){
                                                            $Session:InterfaceBlocksEndPointIdSelectBoxData = 'null'
                                                        }
                                                        else{
                                                            $Session:InterfaceBlocksEndPointIdSelectBoxData = $EventData
                                                        }
                                                    }
                                                } -Style '
                                                    label + .css-1ntzb12 {
                                                        margin-top: 0px;
                                                    }
                                                '
                                            }
                                        }
                                    }
                                }
                                elseif($Session:TaskMethodTypeIdSelectBoxData -eq 'Catch'){
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Startpoint' -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDStyle -Content {
                                                    $Session:InterfaceBlocksStartPointIdSelectBoxData = 'null'
                                                    New-UDSelect -Id 'InterfaceBlocksStartPointIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name ' ' -Value 0
                                                        foreach ($ServerBlock in $Cache:ServerBlockData) {
                                                            $ServerBlockServiceId       = (($ServerBlock.Selections).ServiceProvider).Id
                                                            $ServerBlockServiceProvider = (($ServerBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $ServerBlockServiceProvider -and '' -ne $ServerBlockServiceProvider -and 'null' -ne $ServerBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$ServerBlockServiceProvider"+' | '+'Id: '+"$ServerBlockServiceId") -Value $ServerBlockServiceId
                                                            }
                                                            $ServerBlockTerminalId       = (($ServerBlock.Selections).TerminalProvider).Id
                                                            $ServerBlockTerminalProvider = (($ServerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ServerBlockTerminalProvider -and '' -ne $ServerBlockTerminalProvider -and 'null' -ne $ServerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ServerBlockTerminalProvider"+' | '+'Id: '+"$ServerBlockTerminalId") -Value $ServerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($ComponentBlock in $Cache:ComponentsBlockData) {
                                                            $ComponentBlockServiceId       = (($ComponentBlock.Selections).ServiceProvider).Id
                                                            $ComponentBlockServiceProvider = (($ComponentBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $ComponentBlockServiceProvider -and '' -ne $ComponentBlockServiceProvider -and 'null' -ne $ComponentBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$ComponentBlockServiceProvider"+' | '+'Id: '+"$ComponentBlockServiceId") -Value $ComponentBlockServiceId
                                                            }
                                                            $ComponentBlockTerminalId       = (($ComponentBlock.Selections).TerminalProvider).Id
                                                            $ComponentBlockTerminalProvider = (($ComponentBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ComponentBlockTerminalProvider -and '' -ne $ComponentBlockTerminalProvider -and 'null' -ne $ComponentBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ComponentBlockTerminalProvider"+' | '+'Id: '+"$ComponentBlockTerminalId") -Value $ComponentBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaControllerBlock in $Cache:PsucaControllerBlockData) {
                                                            $PsucaControllerBlockServiceId       = (($PsucaControllerBlock.Selections).ServiceProvider).Id
                                                            $PsucaControllerBlockServiceProvider = (($PsucaControllerBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $PsucaControllerBlockServiceProvider -and '' -ne $PsucaControllerBlockServiceProvider -and 'null' -ne $PsucaControllerBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$PsucaControllerBlockServiceProvider"+' | '+'Id: '+"$PsucaControllerBlockServiceId") -Value $PsucaControllerBlockServiceId
                                                            }
                                                            $PsucaControllerBlockTerminalId       = (($PsucaControllerBlock.Selections).TerminalProvider).Id
                                                            $PsucaControllerBlockTerminalProvider = (($PsucaControllerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaControllerBlockTerminalProvider -and '' -ne $PsucaControllerBlockTerminalProvider -and 'null' -ne $PsucaControllerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaControllerBlockTerminalProvider"+' | '+'Id: '+"$PsucaControllerBlockTerminalId") -Value $PsucaControllerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaDashboardBlock in $Cache:PsucaDashboardBlockData) {
                                                            $PsucaDashboardBlockServiceId       = (($PsucaDashboardBlock.Selections).ServiceProvider).Id
                                                            $PsucaDashboardBlockServiceProvider = (($PsucaDashboardBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $PsucaDashboardBlockServiceProvider -and '' -ne $PsucaDashboardBlockServiceProvider -and 'null' -ne $PsucaDashboardBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$PsucaDashboardBlockServiceProvider"+' | '+'Id: '+"$PsucaDashboardBlockServiceId") -Value $PsucaDashboardBlockServiceId
                                                            }
                                                            $PsucaDashboardBlockTerminalId       = (($PsucaDashboardBlock.Selections).TerminalProvider).Id
                                                            $PsucaDashboardBlockTerminalProvider = (($PsucaDashboardBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaDashboardBlockTerminalProvider -and '' -ne $PsucaDashboardBlockTerminalProvider -and 'null' -ne $PsucaDashboardBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaDashboardBlockTerminalProvider"+' | '+'Id: '+"$PsucaDashboardBlockTerminalId") -Value $PsucaDashboardBlockTerminalId
                                                            }
                                                        }
                                                    } -OnChange {
                                                        if($EventData -eq 0){
                                                            $Session:InterfaceBlocksStartPointIdSelectBoxData = 'null'
                                                        }
                                                        else{
                                                            $Session:InterfaceBlocksStartPointIdSelectBoxData = $EventData
                                                        }
                                                    }
                                                } -Style '
                                                    label + .css-1ntzb12 {
                                                        margin-top: 0px;
                                                    }
                                                '
                                            }
                                        }
                                    }
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Endpoint' -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDStyle -Content {
                                                    $Session:InterfaceBlocksEndPointIdSelectBoxData = 'null'
                                                    New-UDSelect -Id 'InterfaceBlocksEndPointIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name ' ' -Value 0
                                                        foreach ($ServerBlock in $Cache:ServerBlockData) {
                                                            $ServerBlockTerminalId       = (($ServerBlock.Selections).TerminalProvider).Id
                                                            $ServerBlockTerminalProvider = (($ServerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ServerBlockTerminalProvider -and '' -ne $ServerBlockTerminalProvider -and 'null' -ne $ServerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ServerBlockTerminalProvider"+' | '+'Id: '+"$ServerBlockTerminalId") -Value $ServerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($ComponentBlock in $Cache:ComponentsBlockData) {
                                                            $ComponentBlockTerminalId       = (($ComponentBlock.Selections).TerminalProvider).Id
                                                            $ComponentBlockTerminalProvider = (($ComponentBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ComponentBlockTerminalProvider -and '' -ne $ComponentBlockTerminalProvider -and 'null' -ne $ComponentBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ComponentBlockTerminalProvider"+' | '+'Id: '+"$ComponentBlockTerminalId") -Value $ComponentBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaControllerBlock in $Cache:PsucaControllerBlockData) {
                                                            $PsucaControllerBlockTerminalId       = (($PsucaControllerBlock.Selections).TerminalProvider).Id
                                                            $PsucaControllerBlockTerminalProvider = (($PsucaControllerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaControllerBlockTerminalProvider -and '' -ne $PsucaControllerBlockTerminalProvider -and 'null' -ne $PsucaControllerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaControllerBlockTerminalProvider"+' | '+'Id: '+"$PsucaControllerBlockTerminalId") -Value $PsucaControllerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaDashboardBlock in $Cache:PsucaDashboardBlockData) {
                                                            $PsucaDashboardBlockTerminalId       = (($PsucaDashboardBlock.Selections).TerminalProvider).Id
                                                            $PsucaDashboardBlockTerminalProvider = (($PsucaDashboardBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaDashboardBlockTerminalProvider -and '' -ne $PsucaDashboardBlockTerminalProvider -and 'null' -ne $PsucaDashboardBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaDashboardBlockTerminalProvider"+' | '+'Id: '+"$PsucaDashboardBlockTerminalId") -Value $PsucaDashboardBlockTerminalId
                                                            }
                                                        }
                                                    } -OnChange {
                                                        if($EventData -eq 0){
                                                            $Session:InterfaceBlocksEndPointIdSelectBoxData = 'null'
                                                        }
                                                        else{
                                                            $Session:InterfaceBlocksEndPointIdSelectBoxData = $EventData
                                                        }
                                                    }
                                                } -Style '
                                                    label + .css-1ntzb12 {
                                                        margin-top: 0px;
                                                    }
                                                '
                                            }
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Entity Group' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:EntiyGroupIdSelectBoxData = 'null'
                                            New-UDSelect -Id 'EntiyGroupIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name ' ' -Value 0
                                                if(Test-Path $Cache:EntityCenterModelDatabaseListPath){
                                                    $Cache:EntityCenterModelDatabaseSC|iex
                                                    $EntityGroupList = $Cache:EntityCenterModelDatabaseGroupList
                                                    if($EntityGroupList){
                                                        foreach ($Group in $EntityGroupList) {
                                                            New-UDSelectOption -Name $Group.DirName -Value $Group.DirName
                                                        }
                                                    }
                                                }
                                            } -OnChange {
                                                if($EventData -eq 0){
                                                    $Session:EntiyGroupIdSelectBoxData = 'null'
                                                }
                                                else{
                                                    $Session:EntiyGroupIdSelectBoxData = $EventData
                                                }
                                                $Session:EntiyGroupSelectedItem = $EventData
                                                Sync-UDElement -Id 'EntiyModelDynamicId'
                                                Sync-UDElement -Id 'EntiyModelAttributeDynamicId'
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Entity Model' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDDynamic -Id 'EntiyModelDynamicId' -Content {
                                            New-UDStyle -Content {
                                                $Session:EntiyModelIdSelectBoxData = 'null'
                                                New-UDSelect -Id 'EntiyModelIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                    New-UDSelectOption -Name ' ' -Value 0
                                                    if(Test-Path $Cache:EntityCenterModelDatabaseListPath){
                                                        if($Session:EntiyGroupSelectedItem -ne 0){
                                                            $EntityModelList = $Cache:EntityCenterModelDatabaseList
                                                            if($EntityModelList){
                                                                foreach ($Model in $EntityModelList) {
                                                                    if($Model.DirName -eq $Session:EntiyGroupSelectedItem){
                                                                        New-UDSelectOption -Name $Model.Dataset -Value $Model.Dataset
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } -OnChange {
                                                    if($EventData -eq 0){
                                                        $Session:EntiyModelIdSelectBoxData = 'null'
                                                    }
                                                    else{
                                                        $Session:EntiyModelIdSelectBoxData = $EventData
                                                    }
                                                    $Session:EntiyModelSelectedItem = $EventData
                                                    Sync-UDElement -Id 'EntiyModelAttributeDynamicId'
                                                }
                                            } -Style '
                                                label + .css-1ntzb12 {
                                                    margin-top: 0px;
                                                }
                                            '
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Entity Attribute' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDDynamic -Id 'EntiyModelAttributeDynamicId' -Content {
                                            New-UDStyle -Content {
                                                $Session:EntiyModelAttributeIdSelectBoxData = 'null'
                                                New-UDSelect -Id 'EntiyModelAttributeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                    New-UDSelectOption -Name ' ' -Value 0
                                                    if(Test-Path $Cache:EntityCenterModelDatabaseListPath){
                                                        if($Session:EntiyGroupSelectedItem -ne 0 -and $Session:EntiyModelSelectedItem -ne 0){
                                                            $EntityModelAttributePath = "$Cache:EntityCenterModelDatabaseListPath"+"$Session:EntiyGroupSelectedItem"+'\'+"$Session:EntiyModelSelectedItem"+'\'+'GridItemListPSCO'+'.json'
                                                            $EntityModelAttributeGc   = gc $EntityModelAttributePath
                                                            if($null -ne $EntityModelAttributeGc -or 'null' -ne $EntityModelAttributeGc -or '' -ne $EntityModelAttributeGc){
                                                                $EntityModelAttributeJson = $EntityModelAttributeGc | ConvertFrom-Json -Depth 100
                                                                New-UDSelectOption -Name 'All Attributes' -Value 'All'
                                                                foreach ($Attribute in $EntityModelAttributeJson) {
                                                                    New-UDSelectOption -Name $Attribute.Name -Value $Attribute.Name
                                                                }
                                                            }
                                                        }
                                                    }
                                                } -OnChange {
                                                    if($EventData -eq 0){
                                                        $Session:EntiyModelAttributeIdSelectBoxData = 'null'
                                                    }
                                                    else{
                                                        $Session:EntiyModelAttributeIdSelectBoxData = $EventData
                                                    }
                                                }
                                            } -Style '
                                                label + .css-1ntzb12 {
                                                    margin-top: 0px;
                                                }
                                            '
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Start Date' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        
                                            New-UDElement -Tag 'td' -Content {
                                                New-UDTextbox  -Id 'TaskStartDateDayTextBox' -Type text -ClassName 'task-center-box-task-day-text' -Label 'Day' -Variant outlined
                                            }
                                            New-UDElement -Tag 'td' -Content {
                                                New-UDTextbox -Id 'TaskStartDateMonthTextBox' -Type text -ClassName 'task-center-box-task-month-text' -Label 'Month' -Variant outlined
                                            }
                                            New-UDElement -Tag 'td' -Content {
                                                New-UDTextbox -Id 'TaskStartDateYearTextBox' -Type text -ClassName 'task-center-box-task-year-text' -Label 'Year' -Variant outlined
                                            }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'End Date' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndDateDayTextBox' -Type text -ClassName 'task-center-box-task-day-text' -Label 'Day' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndDateMonthTextBox' -Type text -ClassName 'task-center-box-task-month-text' -Label 'Month' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndDateYearTextBox' -Type text -ClassName 'task-center-box-task-year-text' -Label 'Year' -Variant outlined
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Start Time' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskStartTimeHourTextBox' -Type text -ClassName 'task-center-box-task-time-hour-text' -Label 'Hour' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskStartTimeMinuteTextBox' -Type text -ClassName 'task-center-box-task-time-minute-text' -Label 'Minute' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskStartTimeSecondTextBox' -Type text -ClassName 'task-center-box-task-time-second-text' -Label 'Second' -Variant outlined
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'End Time' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndTimeHourTextBox' -Type text -ClassName 'task-center-box-task-time-hour-text' -Label 'Hour' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndTimeMinuteTextBox' -Type text -ClassName 'task-center-box-task-time-minute-text' -Label 'Minute' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndTimeSecondTextBox' -Type text -ClassName 'task-center-box-task-time-second-text' -Label 'Second' -Variant outlined
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Limit Time' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskLimitTimeHourTextBox' -Type text -ClassName 'task-center-box-task-time-hour-text' -Label 'Hour' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskLimitTimeMinuteTextBox' -Type text -ClassName 'task-center-box-task-time-minute-text' -Label 'Minute' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskLimitTimeSecondTextBox' -Type text -ClassName 'task-center-box-task-time-second-text' -Label 'Second' -Variant outlined
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Repetition' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskRepetitionTimeHourTextBox' -Type text -ClassName 'task-center-box-task-time-hour-text' -Label 'Hour' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskRepetitionTimeMinuteTextBox' -Type text -ClassName 'task-center-box-task-time-minute-text' -Label 'Minute' -Variant outlined
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskRepetitionTimeSecondTextBox' -Type text -ClassName 'task-center-box-task-time-second-text' -Label 'Second' -Variant outlined
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Window Style' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskWindowStyleIdSelectBoxData = 'Hidden'
                                            New-UDSelect -Id 'TaskWindowStyleIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Hidden' -Value 1
                                                New-UDSelectOption -Name 'Normal' -Value 2
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskWindowStyleIdSelectBoxData = 'Hidden'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskWindowStyleIdSelectBoxData = 'Normal'
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Script type' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskSelectScriptTypeBoxData = 'New Script'
                                            New-UDSelect -Id 'TaskSelectScriptTypeBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'New Script' -Value 1
                                                New-UDSelectOption -Name 'Exist Script' -Value 2
                                            } -OnChange {
                                                $Session:SelectedTaskRow = $null
                                                Show-UDToast -Message $Cache:GetScriptBlockLanguage
                                                if($EventData -eq 1){
                                                    $Session:TaskSelectScriptTypeBoxData = 'New Script'
                                                    Invoke-UDJavaScript -JavaScript '
                                                    function ScriptTypeBoxnDropdown() {
                                                        document.getElementById("SelectScriptTypeDropdown-WriteNew").style.display = "block";
                                                        document.getElementById("SelectScriptTypeDropdown-ScriptName").style.display = "block";
                                                        document.getElementById("SelectScriptTypeDropdown-SelectExist-1").style.display = "none";
                                                        document.getElementById("SelectScriptTypeDropdown-SelectExist-2").style.display = "none";
                                                    }
                                                    ScriptTypeBoxnDropdown();
                                                '
                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:SelectedTaskRow = $null
                                                    $Session:TaskSelectScriptTypeBoxData = 'Exist Script'
                                                    Invoke-UDJavaScript -JavaScript '
                                                    function ScriptTypeBoxnDropdown() {
                                                        document.getElementById("SelectScriptTypeDropdown-WriteNew").style.display = "none";
                                                        document.getElementById("SelectScriptTypeDropdown-ScriptName").style.display = "none";
                                                        document.getElementById("SelectScriptTypeDropdown-SelectExist-1").style.display = "block";
                                                        document.getElementById("SelectScriptTypeDropdown-SelectExist-2").style.display = "block";
                                                    }
                                                    ScriptTypeBoxnDropdown();
                                                '
                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                }
                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                $Session:ChangeScriptPathCondition = $true
                                                $Session:SelectedTaskScriptPath = 'null'
                                                                                                
                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'

                                                Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                
                                                Sync-UDElement -Id 'SelectScriptFilePathDynamic'
                                            }
                                            Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                            Sync-UDElement -Id 'SelectScriptFilePathDynamic'
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }        
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Language' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Cache:GetScriptBlockLanguage = 'Javascript'
                                            New-UDSelect -Id 'TaskScriptblockLanguageSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Javascript' -Value 'Javascript'
                                                New-UDSelectOption -Name 'Powershell' -Value 'Powershell'
                                                New-UDSelectOption -Name 'Python' -Value 'Python'
                                            } -OnChange {
                                                $Session:SelectedTaskRow = $null
                                                $Session:TaskScriptPathSelectResult = $null
                                                $Cache:GetScriptBlockLanguage = $EventData
                                                Show-UDToast -Message $Cache:GetScriptBlockLanguage
                                                Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                Sync-UDElement -Id 'SelectScriptFilePathDynamic'

                                                Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptNameDynamicId'
                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'

                                                $Session:SelectedTaskScriptPath = 'null'
                                                Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                

                                                $Session:SelectedTaskScriptFullName = 'null'
                                                if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                }
                                                elseif($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                        }
                        New-UDElement -id 'ScriptPathTableId' -Tag 'table' -Content {
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Script Path' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                    }
                                }
                                New-UDDynamic -Id 'SelectScriptDirPathDynamicRestart' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDElement -Tag 'tr' -Content {
                                            New-UDStyle -Content {
                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                New-UDDynamic -Id 'SelectScriptDirPathDynamic' -Content {
                                                    $Session:SelectScriptDirPathSC = {
                                                        $GetLanguage = $Cache:GetScriptBlockLanguage
                                                        if($GetLanguage -eq 'Javascript'){
                                                            if($Cache:TaskScriptDataPathJS){
                                                                $Session:GetSelectScriptFilePathPS = $null
                                                                $Session:GetSelectScriptFilePathPY = $null
                                                                New-UDSelect -Id 'TaskScriptPathSelectBox-1-ExistScript' -ClassName 'task-center-box-task-type-select' -DefaultValue $Session:TaskScriptPathSelectResult -Option {
                                                                    New-UDSelectOption -Name 'Default' -Value 'Default'
                                                                    foreach ($JSItemDir in $Cache:TaskScriptDataSaveJS) {
                                                                        $JSItemDirName = $JSItemDir.Dir
                                                                        if($JSItemDirName -eq 'Default'){}
                                                                        else{
                                                                            New-UDSelectOption -Name $JSItemDirName -Value $JSItemDirName
                                                                        }
                                                                    }
                                                                } -OnChange {
                                                                    $Session:SelectedTaskRow = $null
                                                                    $Session:TaskScriptPathSelectResult = $EventData
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Start-Sleep -Milliseconds 500
                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                    
    
                                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                                    }
                                                                    elseif($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'ERROR DIR'
                                                            }
                                                        }
                                                        elseif($GetLanguage -eq 'Powershell'){
                                                            if($Cache:TaskScriptDataPathPS){
                                                                $Session:GetSelectScriptFilePathJS = $null
                                                                $Session:GetSelectScriptFilePathPY = $null
                                                                New-UDSelect -Id 'TaskScriptPathSelectBox-2-ExistScript' -ClassName 'task-center-box-task-type-select' -DefaultValue $Session:TaskScriptPathSelectResult -Option {
                                                                    New-UDSelectOption -Name 'Default' -Value 'Default'
                                                                    foreach ($PSItemDir in $Cache:TaskScriptDataSavePS) {
                                                                        $PSItemDirName = $PSItemDir.Dir
                                                                        if($PSItemDirName -eq 'Default'){}
                                                                        else{
                                                                            New-UDSelectOption -Name $PSItemDirName -Value $PSItemDirName
                                                                        }
                                                                    }
                                                                } -OnChange {
                                                                    $Session:SelectedTaskRow = $null
                                                                    $Session:TaskScriptPathSelectResult = $EventData
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Start-Sleep -Milliseconds 500
                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                    
    
                                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                                    }
                                                                    elseif($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'ERROR DIR'
                                                            }
                                                        }
                                                        elseif($GetLanguage -eq 'Python'){
                                                            if($Cache:TaskScriptDataPathPY){
                                                                $Session:GetSelectScriptFilePathJS = $null
                                                                $Session:GetSelectScriptFilePathPS = $null
                                                                New-UDSelect -Id 'TaskScriptPathSelectBox-3-ExistScript' -ClassName 'task-center-box-task-type-select' -DefaultValue $Session:TaskScriptPathSelectResult -Option {
                                                                    New-UDSelectOption -Name 'Default' -Value 'Default'
                                                                    foreach ($PYItemDir in $Cache:TaskScriptDataSavePY) {
                                                                        $PYItemDirName = $PYItemDir.Dir
                                                                        if($PYItemDirName -eq 'Default'){}
                                                                        else{
                                                                            New-UDSelectOption -Name $PYItemDirName -Value $PYItemDirName
                                                                        }
                                                                    }
                                                                } -OnChange {
                                                                    $Session:SelectedTaskRow = $null
                                                                    $Session:TaskScriptPathSelectResult = $EventData
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Start-Sleep -Milliseconds 500
                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                    
    
                                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                                    }
                                                                    elseif($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'ERROR DIR'
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'LANGUAGE ERROR'
                                                        }
                                                    
                                                    }
                                                    $Session:SelectScriptDirPathSC|iex
                                                }
                                            } -Style '
                                                label + .css-1ntzb12 {
                                                    margin-top: 0px;
                                                }
                                            '
                                        }
                                    }
                                }
                            }
                        }
                        New-UDDynamic -Id 'SelectScriptTypeDropdown-ScriptNameDynamicId' -Content {
                            New-UDElement -Id 'SelectScriptTypeDropdown-ScriptName' -Tag 'table' -Content {
                                New-UDDynamic -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Script Name' -ClassName 'task-center-box-inner-title-script-name' -Style @{width='100px'}
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTextbox -Id 'ScriptNameIdTextBox' -Type text -ClassName 'task-center-box-script-name-text'
                                            }
                                        }
                                    }
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Script Local' -ClassName 'task-center-box-inner-title-script-name' -Style @{width='100px'}
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text $Session:SelectedTaskScriptPath -ClassName 'task-center-box-inner-title-script-name'
                                            }
                                        }
                                    }
                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDElement -Tag 'tr' -Content {
                                            New-UDTypography -Text 'Select script' -ClassName 'task-center-box-inner-title'
                                        }
                                    }
                                    New-UDDynamic -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript' -Content {
                                        if('null' -eq $Session:SelectedTaskScriptPath){
                                            $Session:SelectedTaskScriptFullName = 'NULL'
                                        }
                                        else{
                                            $GetLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetLanguage -eq 'Javascript'){
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathJS"+($Session:SelectedTaskScriptPath -replace '.*js\\')
                                                }
                                                else{
                                                    $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathJS"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                            elseif($GetLanguage -eq 'Powershell'){
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathPS"+($Session:SelectedTaskScriptPath -replace '.*ps\\')
                                                }
                                                else{
                                                    $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathPS"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                            elseif($GetLanguage -eq 'Python'){
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathPY"+($Session:SelectedTaskScriptPath -replace '.*py\\')
                                                }
                                                else{
                                                    $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathPY"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text $Session:SelectedTaskScriptFullName -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        New-UDElement -id 'SelectScriptTypeDropdown-WriteNew' -Tag 'table' -Content {
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Code Editor' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDButton -Text 'Open Code Editor' -OnClick {

                                        $Session:GetRecoveryEditorCodeCondition = $null
                                        $Session:RecoveryEditorLanguage         = $null
                                        $Session:RecoveryEditorCode             = $null
                                        $GetEditorLanguage = $Cache:GetScriptBlockLanguage

                                        $GetScriptName     = (Get-UDElement -Id 'ScriptNameIdTextBox').Value

                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                        $string = $GetScriptName
                                        $SpecialChars = $String -replace $pattern

                                        if($GetEditorLanguage -eq 'Javascript'){
                                            $RootScriptPath = $Cache:TaskScriptDataPathJS
                                            $FileExtension  = '.js'
                                        }
                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                            $RootScriptPath = $Cache:TaskScriptDataPathPS
                                            $FileExtension  = '.ps'
                                        }
                                        elseif($GetEditorLanguage -eq 'Python'){
                                            $RootScriptPath = $Cache:TaskScriptDataPathPY
                                            $FileExtension  = '.py'
                                        }

                                        if($Session:TaskScriptPathSelectResult -eq 'js' -or $Session:TaskScriptPathSelectResult -eq 'ps' -or $Session:TaskScriptPathSelectResult -eq 'py'){
                                            $CreateNewPath = "$RootScriptPath"+""+"$FileExtension"
                                        }
                                        else{
                                            $CreateNewPath = "$RootScriptPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetScriptName"+"$FileExtension"
                                        }

                                        $CodeEditorStandardSC = {
    
                                            if($Session:RecoveryEditorLanguage -and $Session:RecoveryEditorCode){
                                                $GetEditorLanguage                      = $Session:RecoveryEditorLanguage
                                                $Session:GetRecoveryEditorCodeCondition = $true
                                            }
    
                                            if($GetEditorLanguage -eq 'javascript'){
                                                $JavascriptEditorModalSC = {
                                                    Show-UDModal -Header {
                                                    
                                                        $GetScriptName = (Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                        if($null -eq $GetScriptName){
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = 'Example'+'.js'
                                                        }
                                                        else{
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = "$GetScriptName"+'.js'
                                                        }
                                                        New-UDDynamic -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title' -Content {
                                                            New-UDTypography -Text $Session:TaskScriptblockCodeEditorHeaderTitle -Variant subtitle1
                                                        }
                                                    } -Content {
                                                        New-UDElement -Tag 'div' -Content {
                                                            New-UDStyle -Content {
                                                                if($Session:GetRecoveryEditorCodeCondition -eq $true){
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'javascript' -Code $Session:RecoveryEditorCode
                                                                    $Session:RecoveryEditorCode             = $null
                                                                    $Session:RecoveryEditorLanguage         = $null
                                                                    $Session:GetRecoveryEditorCodeCondition = $null
                                                                }
                                                                elseif($Session:GenerateFunctionsDataCondition -eq $true){
                                                                    $Session:GenerateFunctionsDataCondition = $null
                                                                    $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                    $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                    $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                    if(Test-Path $ConfigPath){
                                                                        $ConfigPathGc        = gc $ConfigPath
                                                                        $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                        $ConfigTableNameList = @()
                                                                        if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                            foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                $ConfigTableNameList += $Name
                                                                            }
                                                                        }
                                                                        else{
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                            $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                        }
                                                                        
                                                                        $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                        $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
    
                                                                        # GET GENERATOR
                                                                        if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
    
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'All'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'Selected'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
    
                                                                        # SET GENERATOR
                                                                        if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                            $SetCacheMethod = 'local'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                            $SetCacheMethod = 'psu'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                            $SetCacheMethod = 'sql'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                            $SetCacheMethod = 'terminal'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                            $SetCacheMethod = 'terminal-cachefile'
                                                                        }                                                                        
    
                                                                        if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $SetCacheReturnType = 'All'
                                                                        }
                                                                        elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $SetCacheReturnType = 'Selected'
                                                                        }
    
                                                                        if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                            $SetCacheFunctionType = 'Add'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                            $SetCacheFunctionType = 'Delete'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                            $SetCacheFunctionType = 'Update'
                                                                        }
    
                                                                        
    
                                                                        if($GetFunctions -and $SetFunctions){
                                                                            $CommandScriptBlock = (
@'

'@)
    
                                                                            $CommandList = @()
                                                                            $num         = 0
                                                                            foreach ($Argument in $ArgumentParameterList) {
                                                                                $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                $ImportGetCacheFunctionType = 'Get'
                                                                                $ImportGetCacheMethod       = $GetCacheMethod
                                                                                $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                $ImportGetCachePoint        = $StartPoint
                                                                                $ImportGetMandatoryArgument = $Argument
    
                                                                                $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                $ImportSetCacheMethod       = $SetCacheMethod
                                                                                $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                $ImportSetCachePoint        = $EndPoint
    
                                                                                $ImportFunctionTableName    = $ConfigTableNameList[$num]
    
                                                                                $CommandList += (((((((((((($CommandScriptBlock
                                                                                ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                $num++
                                                                            }
                                                                        }
                                                                        
                                                                        $EditorCodeArrayList  = @()
                                                                        $EditorCodeArrayList += $GetFunctions
                                                                        $EditorCodeArrayList += $SetFunctions
                                                                        $EditorCodeArrayList += $null
                                                                        $EditorCodeArrayList += ''
                                                                        $EditorCodeArrayList += '// COMMAND SCRIPTBLOCK'
                                                                        $EditorCodeArrayList += ''
                                                                        foreach ($Command in $CommandList) {
                                                                            $EditorCodeArrayList += $Command
                                                                        }
                                                                        
                                                                        
                                                                        #[string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
                                                                        [string]$EditorCodeArrayListString = '// The development of the application is not complete for the javascript language'
                                                                        
                                                                    }
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'javascript' -Code $EditorCodeArrayListString
                                                                }
                                                                else{
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'javascript' -Code (
@'
// Javascript
var msg = 'Hello World';
console.log(msg);
'@)    
                                                                }
                                                            } -Style '
                                                            .monaco-editor .overflow-guard {
                                                                position: relative;
                                                                overflow: hidden;
                                                                border: 1px solid gray;
                                                            }
                                                            '
            
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Id 'TaskScriptblockCodeEditorBoxButtons' -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonTestCode' -Text 'Test code' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                $TestOutput = $null
                                                                                Set-Content $Cache:TaskEditorScriptDataPathJS -Value $GetEditorCode
                                                                                $TestOutput = .($Cache:TaskEditorDataExePathNodeJS) $Cache:TaskEditorScriptDataPathJS
                                                                                if($TestOutput){
                                                                                    Show-UDToast -Message $TestOutput -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'null error' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in javascript is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in javascript is not valid' -Duration 5000
                                                                            }                                                                        
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonSaveCode' -Text 'Save code to session' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Set-Content $Cache:TaskEditorScriptRetrieveDataPathJS -Value $GetEditorCode
                                                                                if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathJS ){
                                                                                    Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in javascript is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in javascript is not valid' -Duration 5000
                                                                            }                                                                        
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonRetriveData' -Text 'Retrieve code from session' -OnClick {
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                $GetValidateItemFullNameGci    = gci $Cache:TaskEditorScriptRetrieveDataPathJS
                                                                                $GetValidateItemName           = $GetValidateItemFullNameGci.Name
                                                                                $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                                $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                                $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                                $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                                $SetValidateItemHeadrString    = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title'
                                                                                $GetRetrieveData               = gc $Cache:TaskEditorScriptRetrieveDataPathJS -Raw
                                                                                $GetRetrieveDataToObject       = $GetRetrieveData
                                                                                if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathJS) -and $GetRetrieveData){
                                                                                    $SetRetrieveCode = (Set-UDElement -Id 'TaskScriptblockCodeEditorBox' -Properties @{code = "$GetRetrieveDataToObject"})
                                                                                    Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in javascript is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in javascript is not valid' -Duration 5000
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonCreateScriptFileData' -Text 'Create Script File' -OnClick {
                                                                            $Session:GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            $Session:GetEditorCode     = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            if($GetEditorLanguage -eq 'Javascript' -or $Session:GetEditorLanguage -eq 'Javascript'){
                                                                                $GetScriptPath      = $Session:TaskScriptPathSelectResult
                                                                                if($GetScriptPath -eq 'js'){
                                                                                    $GetScriptPath = $null
                                                                                }
                                                                                else{
                                                                                    $GetScriptPath = "$GetScriptPath"+'\'
                                                                                }
                                                                                $GetNewSaveFileName = "$GetScriptPath"+(Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                                                $GetEditorCode      = $Session:GetEditorCode
                                                                                $GetDirFilePath     = $Cache:TaskScriptDataPathJS
                                                                                $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName"+'.js')
                                                                                if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                    if(Test-Path $CreateFilePath){
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Overwrite script ?'
                                                                                        } -Content {
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                                                    $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                                                    $TaskScriptDataGciJSPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.js'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Save script ?'
                                                                                        } -Content {
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                New-Item -ItemType File $CreateFilePath
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                                                    $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                                                    $TaskScriptDataGciJSPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                                                                    
                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.js'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                }
                                                                            }                                                                            
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonGenerateFunctionsData' -Text 'Generate Functions' -OnClick {
                                                                            $Session:GenerateFunctionsDataCondition = $true
                                                                            $JavascriptEditorModalSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" } -FullScreen
                                                }
                                                $JavascriptEditorModalSC|iex
                                            }
                                            elseif($GetEditorLanguage -eq 'powershell'){
                                                $PowershellEditorModalSC = {
                                                    Show-UDModal -Header {
                                                    
                                                        $GetScriptName = (Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                        if($null -eq $GetScriptName){
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = 'Example'+'.ps1'
                                                        }
                                                        else{
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = "$GetScriptName"+'.ps1'
                                                        }
                                                        New-UDDynamic -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title' -Content {
                                                            New-UDTypography -Text $Session:TaskScriptblockCodeEditorHeaderTitle -Variant subtitle1
                                                        }
                                                    } -Content {
                                                        New-UDElement -Tag 'div' -Content {
                                                            New-UDStyle -Content {
                                                                if($Session:GetRecoveryEditorCodeCondition -eq $true){
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'powershell' -Code $Session:RecoveryEditorCode
                                                                    $Session:RecoveryEditorCode             = $null
                                                                    $Session:RecoveryEditorLanguage         = $null
                                                                    $Session:GetRecoveryEditorCodeCondition = $null
                                                                }
                                                                elseif($Session:GenerateFunctionsDataCondition -eq $true){
                                                                    $Session:GenerateFunctionsDataCondition = $null
                                                                    $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                    $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                    $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                    if(Test-Path $ConfigPath){
                                                                        $ConfigPathGc        = gc $ConfigPath
                                                                        $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                        $ConfigTableNameList = @()
                                                                        if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                            foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                $ConfigTableNameList += $Name
                                                                            }
                                                                        }
                                                                        else{
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                            $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                        }
                                                                        
                                                                        $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                        $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
    
                                                                        # GET GENERATOR
                                                                        if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
    
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'All'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'Selected'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
    
                                                                        # SET GENERATOR
                                                                        if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                            $SetCacheMethod = 'local'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                            $SetCacheMethod = 'psu'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                            $SetCacheMethod = 'sql'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                            $SetCacheMethod = 'terminal'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                            $SetCacheMethod = 'terminal-cachefile'
                                                                        }                                                                        
    
                                                                        if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $SetCacheReturnType = 'All'
                                                                        }
                                                                        elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $SetCacheReturnType = 'Selected'
                                                                        }
    
                                                                        if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                            $SetCacheFunctionType = 'Add'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                            $SetCacheFunctionType = 'Delete'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                            $SetCacheFunctionType = 'Update'
                                                                        }
    
                                                                        
    
                                                                        if($GetFunctions -and $SetFunctions){
                                                                            $CommandScriptBlock = (
@'
$CacheData = importgetcachehashtabledatafromvariable
$Result    = importgetcachefunctiontypefromvariable-PSUCA-importtablenamefromlist -CacheMethod 'importgetcachemethodfromvariable' -CacheType 'importgetcachereturntypefromvariable' -CachePoint 'importgetcachepointfromvariable' -CacheData $CacheData -Argument_importgetmandatorytrueargumentnamefromvariable 0 
if($result -ne $false -and $result -ne 'null'){
    $Collection = $result|ConvertFrom-Json -Depth 100
    $ItemList   = @()
    $ArrayList  = @()
    $ArrayNum   = 0
    foreach ($Item in $Collection) {
        $ItemList  += $Item
        $ArrayList += $ArrayNum
        $ArrayNum++
    }
    if('' -ne $ItemList){
        $CacheData = importsetcachehashtabledatafromvariable
        $Result    = importsetcachefunctiontypefromvariable-PSUCA-importtablenamefromlist -CacheMethod 'importsetcachemethodfromvariable' -CacheType 'importsetcachereturntypefromvariable' -CachePoint 'importsetcachepointfromvariable' -CacheData $CacheData
    }
}
else{
    $Result = $false
}   
'@)
    
                                                                            $CommandList = @()
                                                                            $num         = 0
                                                                            foreach ($Argument in $ArgumentParameterList) {
                                                                                $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                $ImportGetCacheFunctionType = 'Get'
                                                                                $ImportGetCacheMethod       = $GetCacheMethod
                                                                                $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                $ImportGetCachePoint        = $StartPoint
                                                                                $ImportGetMandatoryArgument = $Argument
    
                                                                                $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                $ImportSetCacheMethod       = $SetCacheMethod
                                                                                $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                $ImportSetCachePoint        = $EndPoint
    
                                                                                $ImportFunctionTableName    = $ConfigTableNameList[$num]
    
                                                                                $CommandList += (((((((((((($CommandScriptBlock
                                                                                ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                $num++
                                                                            }
                                                                        }
                                                                        
                                                                        $EditorCodeArrayList  = @()
                                                                        $EditorCodeArrayList += $GetFunctions
                                                                        $EditorCodeArrayList += $SetFunctions
                                                                        $EditorCodeArrayList += $null
                                                                        $EditorCodeArrayList += ''
                                                                        $EditorCodeArrayList += '# COMMAND SCRIPTBLOCK'
                                                                        $EditorCodeArrayList += ''
                                                                        foreach ($Command in $CommandList) {
                                                                            $EditorCodeArrayList += $Command
                                                                        }
                                                                        
                                                                        
                                                                        [string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
    
                                                                        
                                                                    }
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'powershell' -Code $EditorCodeArrayListString
                                                                }
                                                                else{
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'powershell' -Code (
@'
# Powershell
$msg = 'Hello World';
$msg;
'@)    
                                                                }
                                                            } -Style '
                                                            .monaco-editor .overflow-guard {
                                                                position: relative;
                                                                overflow: hidden;
                                                                border: 1px solid gray;
                                                            }
                                                            '
            
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Id 'TaskScriptblockCodeEditorBoxButtons' -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonTestCode' -Text 'Test code' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in powershell is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                $TestOutput = $null
                                                                                Set-Content $Cache:TaskEditorScriptDataPathPS -Value $GetEditorCode
                                                                                $TestOutput = gc $Cache:TaskEditorScriptDataPathPS | iex
                                                                                if($TestOutput){
                                                                                    Show-UDToast -Message $TestOutput -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'null error' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in powershell is not valid' -Duration 5000
                                                                            }                                                                        
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonSaveCode' -Text 'Save code to session' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in powershell is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Set-Content $Cache:TaskEditorScriptRetrieveDataPathPS -Value $GetEditorCode
                                                                                if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathPS ){
                                                                                    Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in powershell is not valid' -Duration 5000
                                                                            }                                                                          
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonRetriveData' -Text 'Retrieve code from session' -OnClick {
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in powershell is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                $GetValidateItemFullNameGci    = gci $Cache:TaskEditorScriptRetrieveDataPathPS
                                                                                $GetValidateItemName           = $GetValidateItemFullNameGci.Name
                                                                                $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                                $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                                $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                                $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                                $SetValidateItemHeadrString    = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title'
                                                                                $GetRetrieveData = gc $Cache:TaskEditorScriptRetrieveDataPathPS -Raw
                                                                                $GetRetrieveDataToObject = $GetRetrieveData
                                                                                if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathPS) -and $GetRetrieveData){
                                                                                    $SetRetrieveCode = (Set-UDElement -Id 'TaskScriptblockCodeEditorBox' -Properties @{code = "$GetRetrieveDataToObject"})
                                                                                    Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in powershell is not valid' -Duration 5000
                                                                            }                                                                          
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonCreateScriptFileData' -Text 'Create Script File' -OnClick {
                                                                            $Session:GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            $Session:GetEditorCode     = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            if($GetEditorLanguage -eq 'Powershell' -or $Session:GetEditorLanguage -eq 'Powershell'){
                                                                                $GetScriptPath      = $Session:TaskScriptPathSelectResult
                                                                                if($GetScriptPath -eq 'ps'){
                                                                                    $GetScriptPath = $null
                                                                                }
                                                                                else{
                                                                                    $GetScriptPath = "$GetScriptPath"+'\'
                                                                                }
                                                                                $GetNewSaveFileName = "$GetScriptPath"+(Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                                                $GetEditorCode      = $Session:GetEditorCode
                                                                                $GetDirFilePath     = $Cache:TaskScriptDataPathPS
                                                                                $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName"+'.ps1')
                                                                                if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                    if(Test-Path $CreateFilePath){
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Overwrite script ?'
                                                                                        } -Content {
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PS1 PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                                                    $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                                                    $TaskScriptDataGciPSPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.ps1'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Save script ?'
                                                                                        } -Content {
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                New-Item -ItemType File $CreateFilePath
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PS1 PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                                                    $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                                                    $TaskScriptDataGciPSPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.ps1'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonGenerateFunctionsData' -Text 'Generate Functions' -OnClick {
                                                                            $Session:GenerateFunctionsDataCondition = $true
                                                                            $PowershellEditorModalSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" } -FullScreen
                                                }
                                                $PowershellEditorModalSC|iex
                                            }
                                            elseif($GetEditorLanguage -eq 'python'){
                                                $PythonEditorModalSC = {
                                                    Show-UDModal -Header {
    
                                                        $GetScriptName = (Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                        if($null -eq $GetScriptName){
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = 'Example'+'.py'
                                                        }
                                                        else{
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = "$GetScriptName"+'.py'
                                                        }
                                                        New-UDDynamic -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title' -Content {
                                                            New-UDTypography -Text $Session:TaskScriptblockCodeEditorHeaderTitle -Variant subtitle1
                                                        }
                                                    } -Content {
                                                        New-UDElement -Tag 'div' -Content {
                                                            New-UDStyle -Content {
                                                                if($Session:GetRecoveryEditorCodeCondition -eq $true){
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'python' -Code $Session:RecoveryEditorCode
                                                                    $Session:RecoveryEditorCode             = $null
                                                                    $Session:RecoveryEditorLanguage         = $null
                                                                    $Session:GetRecoveryEditorCodeCondition = $null
                                                                }
                                                                elseif($Session:GenerateFunctionsDataCondition -eq $true){
                                                                    $Session:GenerateFunctionsDataCondition = $null
                                                                    $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                    $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                    $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                    if(Test-Path $ConfigPath){
                                                                        $ConfigPathGc        = gc $ConfigPath
                                                                        $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                        $ConfigTableNameList = @()
                                                                        if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                            foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                $ConfigTableNameList += $Name
                                                                            }
                                                                        }
                                                                        else{
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                            $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                        }
                                                                        
                                                                        $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                        $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
    
                                                                        # GET GENERATOR
                                                                        if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
    
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'All'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'Selected'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
    
                                                                        # SET GENERATOR
                                                                        if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                            $SetCacheMethod = 'local'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                            $SetCacheMethod = 'psu'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                            $SetCacheMethod = 'sql'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                            $SetCacheMethod = 'terminal'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                            $SetCacheMethod = 'terminal-cachefile'
                                                                        }                                                                        
    
                                                                        if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $SetCacheReturnType = 'All'
                                                                        }
                                                                        elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $SetCacheReturnType = 'Selected'
                                                                        }
    
                                                                        if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                            $SetCacheFunctionType = 'Add'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                            $SetCacheFunctionType = 'Delete'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                            $SetCacheFunctionType = 'Update'
                                                                        }
    
                                                                        
    
                                                                        if($GetFunctions -and $SetFunctions){
                                                                            $CommandScriptBlock = (
@'

'@)
    
                                                                            $CommandList = @()
                                                                            $num         = 0
                                                                            foreach ($Argument in $ArgumentParameterList) {
                                                                                $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                $ImportGetCacheFunctionType = 'Get'
                                                                                $ImportGetCacheMethod       = $GetCacheMethod
                                                                                $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                $ImportGetCachePoint        = $StartPoint
                                                                                $ImportGetMandatoryArgument = $Argument
    
                                                                                $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                $ImportSetCacheMethod       = $SetCacheMethod
                                                                                $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                $ImportSetCachePoint        = $EndPoint
    
                                                                                $ImportFunctionTableName    = $ConfigTableNameList[$num]
    
                                                                                $CommandList += (((((((((((($CommandScriptBlock
                                                                                ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                $num++
                                                                            }
                                                                        }
                                                                        
                                                                        $EditorCodeArrayList  = @()
                                                                        $EditorCodeArrayList += $GetFunctions
                                                                        $EditorCodeArrayList += $SetFunctions
                                                                        $EditorCodeArrayList += $null
                                                                        $EditorCodeArrayList += ''
                                                                        $EditorCodeArrayList += '# COMMAND SCRIPTBLOCK'
                                                                        $EditorCodeArrayList += ''
                                                                        foreach ($Command in $CommandList) {
                                                                            $EditorCodeArrayList += $Command
                                                                        }
                                                                        
                                                                        
                                                                        #[string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
                                                                        [string]$EditorCodeArrayListString = '# The development of the application is not complete for the python language'
    
                                                                        
                                                                    }
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'python' -Code $EditorCodeArrayListString
                                                                }                                                           
                                                                else{
                                                                New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'python' -Code (
@'
# Python
msg = 'Hello World';
print (msg);
'@)    
                                                                }
                                                            } -Style '
                                                            .monaco-editor .overflow-guard {
                                                                position: relative;
                                                                overflow: hidden;
                                                                border: 1px solid gray;
                                                            }
                                                            '
            
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Id 'TaskScriptblockCodeEditorBoxButtons' -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonTestCode' -Text 'Test code' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in python is not valid' -Duration 5000
                                                                            }                                                                        
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                $TestOutput = $null
                                                                                Set-Content $Cache:TaskEditorScriptDataPathPY -Value $GetEditorCode
                                                                                $TestOutput = .($Cache:TaskEditorDataExePathPythonPY) $Cache:TaskEditorScriptDataPathPY
                                                                                if($TestOutput){
                                                                                    Show-UDToast -Message $TestOutput -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'null error' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonSaveCode' -Text 'Save code to session' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Set-Content $Cache:TaskEditorScriptRetrieveDataPathPY -Value $GetEditorCode
                                                                                if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathPY ){
                                                                                    Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonRetriveData' -Text 'Retrieve code from session' -OnClick {
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                $GetValidateItemFullNameGci    = gci $Cache:TaskEditorScriptRetrieveDataPathPY
                                                                                $GetValidateItemName           = $GetValidateItemFullNameGci.Name
                                                                                $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                                $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                                $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                                $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                                $SetValidateItemHeadrString    = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title'
                                                                                $GetRetrieveData = gc $Cache:TaskEditorScriptRetrieveDataPathPY -Raw
                                                                                $GetRetrieveDataToObject = $GetRetrieveData
                                                                                if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathPY) -and $GetRetrieveData){
                                                                                    $SetRetrieveCode = (Set-UDElement -Id 'TaskScriptblockCodeEditorBox' -Properties @{code = "$GetRetrieveDataToObject"})
                                                                                    Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonCreateScriptFileData' -Text 'Create Script File' -OnClick {
                                                                            $Session:GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            $Session:GetEditorCode     = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            if($GetEditorLanguage -eq 'Python' -or $Session:GetEditorLanguage -eq 'Python'){
                                                                                $GetScriptPath      = $Session:TaskScriptPathSelectResult
                                                                                if($GetScriptPath -eq 'py'){
                                                                                    $GetScriptPath = $null
                                                                                }
                                                                                else{
                                                                                    $GetScriptPath = "$GetScriptPath"+'\'
                                                                                }
                                                                                $GetNewSaveFileName = "$GetScriptPath"+(Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                                                $GetEditorCode      = $Session:GetEditorCode
                                                                                $GetDirFilePath     = $Cache:TaskScriptDataPathPY
                                                                                $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName"+'.py')
                                                                                if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                    if(Test-Path $CreateFilePath){
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Overwrite script ?'
                                                                                        } -Content {
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                                                    $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                                                    $TaskScriptDataGciPYPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.py'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Save script ?'
                                                                                        } -Content {
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                New-Item -ItemType File $CreateFilePath
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                                                    $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                                                    $TaskScriptDataGciPYPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.py'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonGenerateFunctionsData' -Text 'Generate Functions' -OnClick {
                                                                            $Session:GenerateFunctionsDataCondition = $true
                                                                            $PythonEditorModalSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" } -FullScreen
                                                }
                                                $PythonEditorModalSC|iex
                                            }                                                 
    
                                        }

                                        if($true -eq $(Test-Path $CreateNewPath)){
                                            Show-UDToast -Message 'Script file in directory path is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                        }
                                        elseif($GetScriptName -and $GetScriptName -notmatch ' ' -and $SpecialChars.Length -eq 0){
                                            $CodeEditorStandardSC|iex    
                                        }
                                        else{
                                            Show-UDToast -Message 'Script name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                        }
                                    } -ClassName "task-center-box-btn"
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDButton -Text 'Create New Task' -OnClick {
                                        if($Session:SelectedTaskScriptPath -and 'null' -ne $Session:SelectedTaskScriptPath){
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                if(($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'js'){
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathJS"+($Session:SelectedTaskScriptPath -replace '.*\\')
                                                }
                                                else{
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathJS"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                if(($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'ps'){
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathPS"+($Session:SelectedTaskScriptPath -replace '.*\\')
                                                }
                                                else{
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathPS"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                if(($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'py'){
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathPY"+($Session:SelectedTaskScriptPath -replace '.*\\')
                                                }
                                                else{
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathPY"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                            
                                            if(Test-Path $ScriptFilePath){
                                                $FormContent = $null
                                                $Session:GlobalFormContent = $null
                                                $FormContent = [PSCustomObject]@{
                                                    TaskUniqueId                         = ([guid]::NewGuid()).Guid
                                                    TaskNameIdTextBox                    = (Get-UDElement -Id 'TaskNameIdTextBox').Value
                                                    TaskGroupIdSelectBox                 = $Session:TaskGroupIdSelectBoxData
                                                    TaskTypeIdSelectBox                  = $Session:TaskTypeIdSelectBoxData
                                                    TaskMethodTypeIdSelectBox            = $Session:TaskMethodTypeIdSelectBoxData
                                                    TaskGetMethodIdSelectBox             = $Session:TaskGetMethodIdSelectBoxData
                                                    TaskGetReturnTypeIdSelectBox         = $Session:TaskGetReturnTypeIdSelectBoxData
                                                    TaskGetExpirationIdSelectBox         = $Session:TaskGetExpirationIdSelectBoxData
                                                    TaskSetMethodIdSelectBox             = $Session:TaskSetMethodIdSelectBoxData
                                                    TaskSetReturnTypeIdSelectBox         = $Session:TaskSetReturnTypeIdSelectBoxData
                                                    TaskSetTypeIdSelectBox               = $Session:TaskSetTypeIdSelectBoxData
                                                    InterfaceBlocksStartPointIdSelectBox = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                    InterfaceBlocksEndPointIdSelectBox   = $Session:InterfaceBlocksEndPointIdSelectBoxData
                                                    EntiyGroupIdSelectBox                = $Session:EntiyGroupIdSelectBoxData
                                                    EntiyModelIdSelectBox                = $Session:EntiyModelIdSelectBoxData
                                                    EntiyModelAttributeIdSelectBox       = $Session:EntiyModelAttributeIdSelectBoxData
                                                    TaskStartDateDayTextBox              = (Get-UDElement -Id 'TaskStartDateDayTextBox').Value
                                                    TaskStartDateMonthTextBox            = (Get-UDElement -Id 'TaskStartDateMonthTextBox').Value
                                                    TaskStartDateYearTextBox             = (Get-UDElement -Id 'TaskStartDateYearTextBox').Value
                                                    TaskEndDateDayTextBox                = (Get-UDElement -Id 'TaskEndDateDayTextBox').Value
                                                    TaskEndDateMonthTextBox              = (Get-UDElement -Id 'TaskEndDateMonthTextBox').Value
                                                    TaskEndDateYearTextBox               = (Get-UDElement -Id 'TaskEndDateYearTextBox').Value
                                                    TaskStartTimeHourTextBox             = (Get-UDElement -Id 'TaskStartTimeHourTextBox').Value
                                                    TaskStartTimeMinuteTextBox           = (Get-UDElement -Id 'TaskStartTimeMinuteTextBox').Value
                                                    TaskStartTimeSecondTextBox           = (Get-UDElement -Id 'TaskStartTimeSecondTextBox').Value
                                                    TaskEndTimeHourTextBox               = (Get-UDElement -Id 'TaskEndTimeHourTextBox').Value
                                                    TaskEndTimeMinuteTextBox             = (Get-UDElement -Id 'TaskEndTimeMinuteTextBox').Value
                                                    TaskEndTimeSecondTextBox             = (Get-UDElement -Id 'TaskEndTimeSecondTextBox').Value
                                                    TaskLimitTimeHourTextBox             = (Get-UDElement -Id 'TaskLimitTimeHourTextBox').Value
                                                    TaskLimitTimeMinuteTextBox           = (Get-UDElement -Id 'TaskLimitTimeMinuteTextBox').Value
                                                    TaskLimitTimeSecondTextBox           = (Get-UDElement -Id 'TaskLimitTimeSecondTextBox').Value
                                                    TaskRepetitionTimeHourTextBox        = (Get-UDElement -Id 'TaskRepetitionTimeHourTextBox').Value
                                                    TaskRepetitionTimeMinuteTextBox      = (Get-UDElement -Id 'TaskRepetitionTimeMinuteTextBox').Value
                                                    TaskRepetitionTimeSecondTextBox      = (Get-UDElement -Id 'TaskRepetitionTimeSecondTextBox').Value
                                                    TaskWindowStyleIdSelectBox           = $Session:TaskWindowStyleIdSelectBoxData
                                                    TaskSelectScriptTypeBox              = 'Exist Script'
                                                    TaskScriptblockLanguageSelectBox     = $Cache:GetScriptBlockLanguage
                                                    TaskScriptBlockFullName              = $ScriptFilePath
                                                    TaskStatus                           = 'Inactive'
                                                }
                
                                                $Session:GlobalFormContent = $FormContent
                
                                                if ($FormContent.TaskNameIdTextBox -eq $null -or $FormContent.TaskNameIdTextBox -eq '') {
                                                    Show-UDToast -Message 'Task Name is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon1 = $true
                                                }
                                                if ($FormContent.TaskGroupIdSelectBox -eq $null -or $FormContent.TaskGroupIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Group is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon2 = $true
                                                }
                                                if ($FormContent.TaskTypeIdSelectBox -eq $null -or $FormContent.TaskTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon3 = $true
                                                }
                                                if ($FormContent.TaskMethodTypeIdSelectBox -eq $null -or $FormContent.TaskMethodTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon4 = $true
                                                }
                                                if ($FormContent.TaskGetMethodIdSelectBox -eq $null -or $FormContent.TaskGetMethodIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon5 = $true
                                                }
                                                if ($FormContent.TaskGetReturnTypeIdSelectBox -eq $null -or $FormContent.TaskGetReturnTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Return Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon6 = $true
                                                }
                                                if ($FormContent.TaskGetExpirationIdSelectBox -eq $null -or $FormContent.TaskGetExpirationIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Expiration is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon7 = $true
                                                }
                                                if ($FormContent.TaskSetMethodIdSelectBox -eq $null -or $FormContent.TaskSetMethodIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon8 = $true
                                                }
                                                if ($FormContent.TaskSetReturnTypeIdSelectBox -eq $null -or $FormContent.TaskSetReturnTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Return Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon9 = $true
                                                }
                                                if ($FormContent.TaskSetTypeIdSelectBox -eq $null -or $FormContent.TaskSetTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon10 = $true
                                                }
                                                if ($FormContent.InterfaceBlocksStartPointIdSelectBox -eq $null -or $FormContent.InterfaceBlocksStartPointIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Interface Start Point is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon11 = $true
                                                }
                                                if ($FormContent.InterfaceBlocksEndPointIdSelectBox -eq $null -or $FormContent.InterfaceBlocksEndPointIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Interface End Point is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon12 = $true
                                                }
                                                if ($FormContent.EntiyGroupIdSelectBox -eq $null -or $FormContent.EntiyGroupIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Group is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon13 = $true
                                                }
                                                if ($FormContent.EntiyModelIdSelectBox -eq $null -or $FormContent.EntiyModelIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Model is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon14 = $true
                                                }
                                                if ($FormContent.EntiyModelAttributeIdSelectBox -eq $null -or $FormContent.EntiyModelAttributeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Model Attribute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon15 = $true
                                                }
                                                if ($FormContent.TaskStartDateDayTextBox -eq $null -or $FormContent.TaskStartDateDayTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Day is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon16 = $true
                                                }
                                                if ($FormContent.TaskStartDateMonthTextBox -eq $null -or $FormContent.TaskStartDateMonthTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Month is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon17 = $true
                                                }
                                                if ($FormContent.TaskStartDateYearTextBox -eq $null -or $FormContent.TaskStartDateYearTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Year is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon18 = $true
                                                }
                                                if ($FormContent.TaskEndDateDayTextBox -eq $null -or $FormContent.TaskEndDateDayTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Day is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon19 = $true
                                                }
                                                if ($FormContent.TaskEndDateMonthTextBox -eq $null -or $FormContent.TaskEndDateMonthTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Month is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon20 = $true
                                                }
                                                if ($FormContent.TaskEndDateYearTextBox -eq $null -or $FormContent.TaskEndDateYearTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Year is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon21 = $true
                                                }
                                                if ($FormContent.TaskStartTimeHourTextBox -eq $null -or $FormContent.TaskStartTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon22 = $true
                                                }
                                                if ($FormContent.TaskStartTimeMinuteTextBox -eq $null -or $FormContent.TaskStartTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon23= $true
                                                }
                                                if ($FormContent.TaskStartTimeSecondTextBox -eq $null -or $FormContent.TaskStartTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon24 = $true
                                                }
                                                if ($FormContent.TaskEndTimeHourTextBox -eq $null -or $FormContent.TaskEndTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon25 = $true
                                                }
                                                if ($FormContent.TaskEndTimeMinuteTextBox -eq $null -or $FormContent.TaskEndTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon26 = $true
                                                }
                                                if ($FormContent.TaskEndTimeSecondTextBox -eq $null -or $FormContent.TaskEndTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon27 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeHourTextBox -eq $null -or $FormContent.TaskLimitTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon28 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeMinuteTextBox -eq $null -or $FormContent.TaskLimitTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon29 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeSecondTextBox -eq $null -or $FormContent.TaskLimitTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon30 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeHourTextBox -eq $null -or $FormContent.TaskRepetitionTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon31 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeMinuteTextBox -eq $null -or $FormContent.TaskRepetitionTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon32 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeSecondTextBox -eq $null -or $FormContent.TaskRepetitionTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon33 = $true
                                                }
                
                
                
                
                                                if ($FormContent.TaskWindowStyleIdSelectBox -eq $null -or $FormContent.TaskWindowStyleIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Window Style is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon34 = $true
                                                }
                                                if ($FormContent.TaskSelectScriptTypeBox -eq $null -or $FormContent.TaskSelectScriptTypeBox -eq '') {
                                                    Show-UDToast -Message 'Task Script Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon35 = $true
                                                }
                                                if ($FormContent.TaskScriptblockLanguageSelectBox -eq $null -or $FormContent.TaskScriptblockLanguageSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Script Language is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon36 = $true
                                                }
                
                
                
                                                if ($FormContent.TaskScriptBlockFullName -eq $null -or $FormContent.TaskScriptBlockFullName -eq '') {
                                                    Show-UDToast -Message 'Task Script File Full Name is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon37 = $true
                                                }
                
                
                                                if(
                                                    $ValidCon1 -eq $true -and
                                                    $ValidCon2 -eq $true -and
                                                    $ValidCon3 -eq $true -and
                                                    $ValidCon4 -eq $true -and
                                                    $ValidCon5 -eq $true -and
                                                    $ValidCon6 -eq $true -and
                                                    $ValidCon7 -eq $true -and
                                                    $ValidCon8 -eq $true -and
                                                    $ValidCon9 -eq $true -and
                                                    $ValidCon10 -eq $true -and
                                                    $ValidCon11 -eq $true -and
                                                    $ValidCon12 -eq $true -and
                                                    $ValidCon13 -eq $true -and
                                                    $ValidCon14 -eq $true -and
                                                    $ValidCon15 -eq $true -and
                                                    $ValidCon16 -eq $true -and
                                                    $ValidCon17 -eq $true -and
                                                    $ValidCon18 -eq $true -and
                                                    $ValidCon19 -eq $true -and
                                                    $ValidCon20 -eq $true -and
                                                    $ValidCon21 -eq $true -and
                                                    $ValidCon22 -eq $true -and
                                                    $ValidCon23 -eq $true -and
                                                    $ValidCon24 -eq $true -and
                                                    $ValidCon25 -eq $true -and
                                                    $ValidCon26 -eq $true -and
                                                    $ValidCon27 -eq $true -and
                                                    $ValidCon28 -eq $true -and
                                                    $ValidCon29 -eq $true -and
                                                    $ValidCon30 -eq $true -and
                                                    $ValidCon31 -eq $true -and
                                                    $ValidCon32 -eq $true -and
                                                    $ValidCon33 -eq $true -and
                                                    $ValidCon34 -eq $true -and
                                                    $ValidCon35 -eq $true -and
                                                    $ValidCon36 -eq $true -and
                                                    $ValidCon37 -eq $true
                                                ){
                                                    # TASK CONFIG SCRIPTBLOCK
                                                    $TaskConfigSC = {
                                                        $TaskName = $Session:GlobalFormContent.TaskNameIdTextBox
                                                        $TaskPath = "$Cache:TaskListConfigurationDatabasePath"+"$TaskName"+'.json'
                                                        $Session:ValidateItemFullName = $null
                                                        if(Test-Path $TaskPath){
                                                            Show-UDModal -Header {
                                                                New-UDTypography -Text 'Overwrite task ?'
                                                            } -Content {
                                                                New-UDButton -Text "Save" -OnClick {
                                                                    Set-Content $TaskPath -Value ($Session:GlobalFormContent|ConvertTo-Json -Depth 100)
                                                                    Show-UDToast -Message 'Overwrite task configuration file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Invoke-UDRedirect -Url '/tasklist'
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Go back" -OnClick {
                                                                    Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn" 
                                                            }
                                                        }
                                                        else{
                                                            Show-UDModal -Header {
                                                                New-UDTypography -Text 'Save task ?'
                                                            } -Content {
                                                                New-UDButton -Text "Save" -OnClick {
                                                                    New-Item -ItemType File $TaskPath
                                                                    Set-Content $TaskPath -Value ($Session:GlobalFormContent|ConvertTo-Json -Depth 100)
                                                                    Show-UDToast -Message 'Create new task configuration file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Invoke-UDRedirect -Url '/tasklist'
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Go back" -OnClick {
                                                                    Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn" 
                                                            }
                                                        }
                                                        
                                                    }
                
                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                        # TASK SCRIPT SCRIPTBLOCK
                                                        if(($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'js' -or ($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'ps' -or ($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'py'){
                                                            $Session:SelectedTaskScriptPath = ($Session:SelectedTaskScriptPath -replace '.*\\')
                                                        }
                                                        if($FormContent.TaskScriptblockLanguageSelectBox -eq 'Powershell'){
                                                            $GetNewSaveFileName = $Session:SelectedTaskScriptPath
                                                            $GetDirFilePath     = $Cache:TaskScriptDataPathPS
                                                            $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName")
                                                            if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                if(Test-Path $CreateFilePath){
                                                                    $GetEditorCode = gc $CreateFilePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Overwrite script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PS1 PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                                $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                                $TaskScriptDataGciPSPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                else{
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Save script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            New-Item -ItemType File $CreateFilePath
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PS1 PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                                $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                                $TaskScriptDataGciPSPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                            }
                                                        }
                                                        elseif($FormContent.TaskScriptblockLanguageSelectBox -eq 'Javascript'){
                                                            $GetNewSaveFileName = $Session:SelectedTaskScriptPath
                                                            $GetDirFilePath     = $Cache:TaskScriptDataPathJS
                                                            $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName")
                                                            if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                if(Test-Path $CreateFilePath){
                                                                    $GetEditorCode = gc $CreateFilePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Overwrite script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                                $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                                $TaskScriptDataGciJSPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                else{
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Save script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            New-Item -ItemType File $CreateFilePath
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                                $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                                $TaskScriptDataGciJSPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                            }
                                                        }
                                                        elseif($FormContent.TaskScriptblockLanguageSelectBox -eq 'Python'){
                                                            $GetNewSaveFileName = $Session:SelectedTaskScriptPath
                                                            $GetDirFilePath     = $Cache:TaskScriptDataPathPY
                                                            $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName")
                                                            if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                if(Test-Path $CreateFilePath){
                                                                    $GetEditorCode = gc $CreateFilePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Overwrite script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                                $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                                $TaskScriptDataGciPYPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                else{
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Save script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            New-Item -ItemType File $CreateFilePath
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                                $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                                $TaskScriptDataGciPYPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' -Duration 5000
                                                        }
                                                    }
                                                }
                                            }
                                            else{
                                                Show-UDToast -Message 'Script file path is not exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                            }
                                        }
                                        else{
                                            Show-UDToast -Message 'Script is not selected!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                        }
                                    } -ClassName "task-center-box-btn"
                                }
                            }
                        }
                        New-UDElement -id 'SelectScriptTypeDropdown-SelectExist-1' -Tag 'table' -Content {
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDElement -Tag 'tr' -Content {
                                            New-UDTypography -Text 'Select script' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                        }
                                    }
                                    if($null -eq $Session:SelectedTaskRow){
                                        $Session:SelectedTaskScriptFullName = 'NULL'
                                    }
                                    New-UDDynamic -Id 'SelectedTaskScriptBlockFullNameDynamicId' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text $Session:SelectedTaskScriptFullName -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        New-UDElement -id 'SelectScriptTypeDropdown-SelectExist-2' -Tag 'table' -Content {
                            New-UDDynamic -Id 'SelectScriptFilePathDynamic' -Content {
                                start-sleep -Milliseconds 1000
                                New-UDDynamic -Id 'SelectScriptFilePathDynamicFastSync' -Content {
                                    
                                    $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                    if($GetEditorLanguage -eq 'Javascript'){
                                        $GetSelectScriptFilePathJS                = $Session:TaskScriptPathSelectResult
                                        $GetTaskScriptDataPathJS                  = $Cache:TaskScriptDataSaveJS
                                        $SelectDirTaskScriptDataPathJS            = $GetTaskScriptDataPathJS | ? {$_.Dir -eq $GetSelectScriptFilePathJS}
                                        $Cache:SelectDirTaskScriptDataPathJSFiles = $SelectDirTaskScriptDataPathJS.Files | ConvertFrom-Json
                                        $Session:TaskGroupListData = @(
                                            foreach ($JSItemFiles in $Cache:SelectDirTaskScriptDataPathJSFiles) {
                                                $JSItemLanguage = $GetEditorLanguage
                                                $JSItemDirName  = $GetSelectScriptFilePathJS
                                                $JSItemFileName = $JSItemFiles.Name
                                                $JSItemFullName = $JSItemFiles.FullName
                                                $JSItemGci      = gci $JSItemFullName
                                                $JSAccessTime   = ($JSItemGci | select LastAccessTime).LastAccessTime
                                                $JSWriteTime    = ($JSItemGci | select LastWriteTime).LastWriteTime                                                
                                                $JSItemLength   = $JSItemGci.Length
                                                @{
                                                    TaskLanguage = $JSItemLanguage;
                                                    TaskGroup    = $JSItemDirName;
                                                    TaskName     = $JSItemFileName;
                                                    TaskFullName = $JSItemFullName;
                                                    TaskAccess   = $JSAccessTime;
                                                    TaskWrite    = $JSWriteTime;
                                                    TaskLength   = $JSItemLength;
                                                }
                                            }
                                        )
                                    }
                                    elseif($GetEditorLanguage -eq 'Powershell'){
                                        $GetSelectScriptFilePathPS                = $Session:TaskScriptPathSelectResult
                                        $GetTaskScriptDataPathPS                  = $Cache:TaskScriptDataSavePS
                                        $SelectDirTaskScriptDataPathPS            = $GetTaskScriptDataPathPS | ? {$_.Dir -eq $GetSelectScriptFilePathPS}
                                        $Cache:SelectDirTaskScriptDataPathPSFiles = $SelectDirTaskScriptDataPathPS.Files | ConvertFrom-Json
                                        $Session:TaskGroupListData = @(
                                            foreach ($PSItemFiles in $Cache:SelectDirTaskScriptDataPathPSFiles) {
                                                $PSItemLanguage = $GetEditorLanguage
                                                $PSItemDirName  = $GetSelectScriptFilePathPS
                                                $PSItemFileName = $PSItemFiles.Name
                                                $PSItemFullName = $PSItemFiles.FullName
                                                $PSItemGci      = gci $PSItemFullName
                                                $PSAccessTime   = ($PSItemGci | select LastAccessTime).LastAccessTime
                                                $PSWriteTime    = ($PSItemGci | select LastWriteTime).LastWriteTime                                                
                                                $PSItemLength   = $PSItemGci.Length
                                                @{
                                                    TaskLanguage = $PSItemLanguage;
                                                    TaskGroup    = $PSItemDirName;
                                                    TaskName     = $PSItemFileName;
                                                    TaskFullName = $PSItemFullName;
                                                    TaskAccess   = $PSAccessTime;
                                                    TaskWrite    = $PSWriteTime;
                                                    TaskLength   = $PSItemLength;
                                                }
                                            }
                                        )
                                    }
                                    elseif($GetEditorLanguage -eq 'Python'){
                                        $GetSelectScriptFilePathPY                = $Session:TaskScriptPathSelectResult
                                        $GetTaskScriptDataPathPY                  = $Cache:TaskScriptDataSavePY
                                        $SelectDirTaskScriptDataPathPY            = $GetTaskScriptDataPathPY | ? {$_.Dir -eq $GetSelectScriptFilePathPY}
                                        $Cache:SelectDirTaskScriptDataPathPYFiles = $SelectDirTaskScriptDataPathPY.Files | ConvertFrom-Json
                                        $Session:TaskGroupListData = @(
                                            foreach ($PYItemFiles in $Cache:SelectDirTaskScriptDataPathPYFiles) {
                                                $PYItemLanguage = $GetEditorLanguage
                                                $PYItemDirName  = $GetSelectScriptFilePathPY
                                                $PYItemFileName = $PYItemFiles.Name
                                                $PYItemFullName = $PYItemFiles.FullName
                                                $PYItemGci      = gci $PYItemFullName
                                                $PYAccessTime   = ($PYItemGci | select LastAccessTime).LastAccessTime
                                                $PYWriteTime    = ($PYItemGci | select LastWriteTime).LastWriteTime                                                
                                                $PYItemLength   = $PYItemGci.Length
                                                @{
                                                    TaskLanguage = $PYItemLanguage;
                                                    TaskGroup    = $PYItemDirName;
                                                    TaskName     = $PYItemFileName;
                                                    TaskFullName = $PYItemFullName;
                                                    TaskAccess   = $PYAccessTime;
                                                    TaskWrite    = $PYWriteTime;
                                                    TaskLength   = $PYItemLength;
                                                }
                                            }
                                        )
                                    }                                                    
                                    else{

                                    }
                                
            
                                    $Data += $Session:TaskGroupListData
            
                                    if($Data -eq $null){
                                        New-UDElement -Tag 'table' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDElement -Tag 'td' -Content {
                                                    New-UDTypography -Text 'Data is not found!' -Style @{color='red'}
                                                }
                                            }   
                                        }
                                    }
                                    else{
                                        $Columns = @(
                                            New-UDTableColumn -Property TaskLanguage -Title 'Language' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskLanguage)"
                                            }
                                            New-UDTableColumn -Property TaskGroup -Title 'Group' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskGroup)"
                                            }
                                            New-UDTableColumn -Property TaskName -Title 'Name' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskName)"
                                            }
                                            New-UDTableColumn -Property TaskFullName -Title 'Path' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskFullName)"
                                            }
                                            New-UDTableColumn -Property TaskAccess -Title 'Last Access Time' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskAccess)"
                                            }
                                            New-UDTableColumn -Property TaskWrite -Title 'Last Write Time' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskWrite)"
                                            }
                                            New-UDTableColumn -Property TaskLength -Title 'Length' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskLength)"
                                            }                                                                                        
                                        )
                                        New-UDElement -Tag 'div' -Content {
                                            New-UDStyle -Content {
                                                New-UDTable -Id 'TaskGroupList_table' -Data $Data -Columns $Columns -Title 'Script List' -DisableMultiSelect -ShowSelection -ShowSearch -ShowPagination -Dense -OnRowSelection {
                                                    $Session:SelectedTaskRow = $Body
                                                    $Session:SelectedTaskScriptFullName = ($Body|ConvertFrom-Json).TaskFullName
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                } -PageSize 20 -ShowRefresh
                                            } -Style '
                                            font-size: 7px;
                                            width: 99%;
                                            .MuiTableBody-root .MuiTableRow-root:hover {
                                                background-color: #f8f8f8;
                                            }
                                            .MuiTableCell-root {
                                                padding 2px 5px 0px;
                                                line-heigh: 1;
                                            }
                                            .MuiSelect-select {
                                                padding-top: 0px;
                                                padding-bottom: 0px;
                                                padding-left: 5px;
                                                padding-right: 5px;
                                            }
                                            .MuiTableRow-head {
                                                padding-top: 0px;
                                                padding-bottom: 0px;
                                                padding-left: 5px;
                                                padding-right: 5px;   
                                            }
                                            .MuiToolbar-root {
                                                padding-top: 0px;
                                                padding-bottom: 0px;
                                                padding-left: 5px;
                                                padding-right: 5px;           
                                            }
                                            .css-6tsndk {
                                                position: relative;
                                                display: flex;
                                                -webkit-box-align: center;
                                                align-items: center;
                                                padding-left: 16px;
                                                padding-right: 16px;
                                                min-height: 8px;
                                            }
                                            .css-1ep437t {
                                                width: 5px;
                                                border: 0px solid currentColor;
                                                height: 16px;
                                                margin-top: 0px;
                                                margin-left: 0px;
                                                background-color: #3b3b3b;
                                                border-radius: 0px;
                                            }
                                            .css-mnn31 {
                                                padding: 0px -5px 0px 5px;
                                                position: relative;
                                                font-size: 10px;
                                                transition: border-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                                                border-radius: 0px;
            
                                            }
                                            .css-jswlw {
                                                border-radius: 12px;
                                                box-sizing: content-box;
                                                display: inline-block;
                                                position: relative;
                                                cursor: pointer;
                                                touch-action: none;
                                                color: rgb(59, 59, 59);
                                                -webkit-tap-highlight-color: transparent;
                                                height: 0px;
                                                width: 100%;
                                                padding: 4px 0px;
                                            }
                                            .MuiSelect-select {
                                                height: auto;
                                                min-height: 1.4375em;
                                                text-overflow: ellipsis;
                                                white-space: nowrap;
                                                overflow: hidden;
                                                border-radius: 0px;
                                            }
                                            .MuiSlider-valueLabel {
                                                min-width: 20px;
                                                font-size: 8px;
                                                right: 12px;
                                                top: calc(-50% - 3px);
                                            }
                                            .css-vubbuv {
                                                user-select: none;
                                                width: 1em;
                                                height: 1em;
                                                display: inline-block;
                                                fill: currentcolor;
                                                flex-shrink: 0;
                                                transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                                                font-size: 0.9rem;
                                            }
                                            .MuiTypography-root {
                                                font-size: 14px;
                                                font-weight: 400;
                                            }
                                            .MuiTypography-noWrap {
                                                font-size: 16px;
                                                font-weight: 600;
                                            }
                                            '
                                        }
                                    }
                                }
                            }
                            $Session:FirstRunNum++
                            New-UDElement -Tag 'table' -Content {
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Open Code Editor' -Variant contained -OnClick {
                                            # OPEN CODE EDITOR SCRIPTBLOCK
                                            $OpenCodeEditorSC = {
                                                $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                                $Session:GetSelectScriptLanguageItem = $GetEditorLanguage
                                                if($Session:CodeEditorSaveCondition -eq $true){
                                                    if($GetEditorLanguage -eq 'Javascript'){
                                                        $Cache:SelectDirTaskScriptDataPathJSFiles     = gci $Session:CreateNewFilePathEditorBox
                                                        $GetTextBoxUniqueIdNumber                     = 1
                                                        $ValidateNumber                               = 1
                                                        $GetValidateItemFullNameGci                   = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                        $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                        $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                        $Session:NewHeaderTittleCondition             = $true
                                                        $GetValidateItemGc                            = gc $Session:CreateNewFilePathEditorBox -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                        $Session:CodeEditorSaveCondition              = $false
                                                    }
                                                    elseif($GetEditorLanguage -eq 'Powershell'){
                                                        $Cache:SelectDirTaskScriptDataPathPSFiles     = gci $Session:CreateNewFilePathEditorBox
                                                        $GetTextBoxUniqueIdNumber                     = 1
                                                        $ValidateNumber                               = 1
                                                        $GetValidateItemFullNameGci                   = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                        $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                        $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                        $Session:NewHeaderTittleCondition             = $true
                                                        $GetValidateItemGc                            = gc $Session:CreateNewFilePathEditorBox -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                        $Session:CodeEditorSaveCondition              = $false
                                                    }
                                                    elseif($GetEditorLanguage -eq 'Python'){
                                                        $Cache:SelectDirTaskScriptDataPathPYFiles     = gci $Session:CreateNewFilePathEditorBox
                                                        $GetTextBoxUniqueIdNumber                     = 1
                                                        $ValidateNumber                               = 1
                                                        $GetValidateItemFullNameGci                   = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                        $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                        $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                        $Session:NewHeaderTittleCondition             = $true
                                                        $GetValidateItemGc                            = gc $Session:CreateNewFilePathEditorBox -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                        $Session:CodeEditorSaveCondition              = $false
                                                    }
                                                    else{
                                                        $ErrorCondition = $true
                                                    }
                                                }
                                                else{
                                                    if($GetEditorLanguage -eq 'Javascript'){
                                                        $GetValidatePath               = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                        $GetValidateItem               = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id])
                                                        $GetValidateItemName           = $GetValidateItem.Name
                                                        $GetValidateItemFullName       = $GetValidateItem.FullName
                                                        $Session:ValidateItemName      = $GetValidateItemName
                                                        $Session:ValidateItemFullName  = $GetValidateItemFullName
                                                        $GetValidateItemFullNameGci    = gci $GetValidateItemFullName
                                                        $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $GetValidateItemGc             = gc $GetValidateItemFullName -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                    }
                                                    elseif($GetEditorLanguage -eq 'Powershell'){
                                                        $GetValidatePath               = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                        $GetValidateItem               = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id])
                                                        $GetValidateItemName           = $GetValidateItem.Name
                                                        $GetValidateItemFullName       = $GetValidateItem.FullName
                                                        $Session:ValidateItemName      = $GetValidateItemName
                                                        $Session:ValidateItemFullName  = $GetValidateItemFullName
                                                        $GetValidateItemFullNameGci    = gci $GetValidateItemFullName
                                                        $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $GetValidateItemGc             = gc $GetValidateItemFullName -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                    }
                                                    elseif($GetEditorLanguage -eq 'Python'){
                                                        $GetValidatePath               = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                        $GetValidateItem               = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id])
                                                        $GetValidateItemName           = $GetValidateItem.Name
                                                        $GetValidateItemFullName       = $GetValidateItem.FullName
                                                        $Session:ValidateItemName      = $GetValidateItemName
                                                        $Session:ValidateItemFullName  = $GetValidateItemFullName
                                                        $GetValidateItemFullNameGci    = gci $GetValidateItemFullName
                                                        $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $GetValidateItemGc             = gc $GetValidateItemFullName -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                    }     
                                                }
            
                                                Show-UDToast -Message $GetEditorLanguage
            
                                                Show-UDModal -Header {
                                                    New-UDDynamic -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2' -Content {
                                                        if($Session:NewHeaderTittleCondition -eq $true){
                                                            New-UDTypography -Text $Session:TaskScriptblockCodeEditorHeaderTitle -Variant subtitle1 -Paragraph
                                                        }
                                                        else{
                                                            New-UDTypography -Text $GetValidateItemHeaderString -Variant subtitle1 -Paragraph
                                                        }
                                                        $Session:NewHeaderTittleCondition = $false
                                                    }
                                                } -Content {
                                                    New-UDDynamic -Id 'TaskScriptblockValidateDynamicCodeEditorBoxProcess' -Content {
                                                        if($Session:GetSelectScriptLanguageItem -eq 'Javascript'){
                                                            $Session:GetValidateCodeItem = $GetValidateItemGc
                                                            New-UDDynamic -Id 'TaskScriptblockValidateDynamicCodeEditorBox' -Content {
                                                                New-UDStyle -Content {
                                                                    New-UDCodeEditor -Id 'TaskScriptblockValidateCodeEditorBox' -Original $Session:GetValidateCodeItem -ShowFoldingControls always -FormatOnPaste -Width '100cw' -Height '85ch' -Language 'javascript'-Code $Session:GetValidateCodeItem
                                                                } -Style '
                                                                .monaco-editor .overflow-guard {
                                                                    position: relative;
                                                                    overflow: hidden;
                                                                    border: 1px solid gray;
                                                                }
                                                                '                                                          
                                                            }
                                                        }
                                                        elseif($Session:GetSelectScriptLanguageItem -eq 'Powershell'){
                                                            $Session:GetValidateCodeItem = $GetValidateItemGc
                                                            New-UDDynamic -Id 'TaskScriptblockValidateDynamicCodeEditorBox' -Content {
                                                                New-UDStyle -Content {
                                                                    New-UDCodeEditor -Id 'TaskScriptblockValidateCodeEditorBox' -Original $Session:GetValidateCodeItem -ShowFoldingControls always -FormatOnPaste -Width '100cw' -Height '85ch' -Language 'powershell'-Code $Session:GetValidateCodeItem
                                                                } -Style '
                                                                .monaco-editor .overflow-guard {
                                                                    position: relative;
                                                                    overflow: hidden;
                                                                    border: 1px solid gray;
                                                                }
                                                                '
                                                            }
                                                        }
                                                        elseif($Session:GetSelectScriptLanguageItem -eq 'Python'){
                                                            $Session:GetValidateCodeItem = $GetValidateItemGc
                                                            New-UDDynamic -Id 'TaskScriptblockValidateDynamicCodeEditorBox' -Content {
                                                                New-UDStyle -Content {
                                                                    New-UDCodeEditor -Id 'TaskScriptblockValidateCodeEditorBox' -Original $Session:GetValidateCodeItem -ShowFoldingControls always -FormatOnPaste -Width '100cw' -Height '85ch' -Language 'python'-Code $Session:GetValidateCodeItem
                                                                } -Style '
                                                                .monaco-editor .overflow-guard {
                                                                    position: relative;
                                                                    overflow: hidden;
                                                                    border: 1px solid gray;
                                                                }
                                                                '
                                                            }
                                                        }
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Id 'TaskScriptblockCodeEditorBoxButtons' -Tag 'td' -Content {
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonTestCode' -Text 'Test code' -OnClick {
                                                                        $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Code
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            $TestOutput = $null
                                                                            Set-Content $Cache:TaskEditorScriptDataPathJS -Value $GetEditorCode
                                                                            $TestOutput = .($Cache:TaskEditorDataExePathNodeJS) $Cache:TaskEditorScriptDataPathJS
                                                                            if($TestOutput){
                                                                                Show-UDToast -Message $TestOutput -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'null error' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            $TestOutput = $null
                                                                            Set-Content $Cache:TaskEditorScriptDataPathPS -Value $GetEditorCode
                                                                            $TestOutput = gc $Cache:TaskEditorScriptDataPathPS | iex
                                                                            if($TestOutput){
                                                                                Show-UDToast -Message $TestOutput -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'null error' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            $TestOutput = $null
                                                                            Set-Content $Cache:TaskEditorScriptDataPathPY -Value $GetEditorCode
                                                                            $TestOutput = .($Cache:TaskEditorDataExePathPythonPY) $Cache:TaskEditorScriptDataPathPY
                                                                            if($TestOutput){
                                                                                Show-UDToast -Message $TestOutput -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'null error' -Duration 5000
                                                                            }
                                                                        }
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDHtml -Markup '&nbsp;'
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonSaveCode' -Text 'Save code to session' -OnClick {
                                                                        $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Code
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            Set-Content $Cache:TaskEditorScriptRetrieveDataPathJS -Value $GetEditorCode
                                                                            if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathJS ){
                                                                                Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            Set-Content $Cache:TaskEditorScriptRetrieveDataPathPS -Value $GetEditorCode
                                                                            if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathPS ){
                                                                                Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            Set-Content $Cache:TaskEditorScriptRetrieveDataPathPY -Value $GetEditorCode
                                                                            if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathPY ){
                                                                                Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                            }
                                                                        }                                                                        
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDHtml -Markup '&nbsp;'
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonRetriveData' -Text 'Retrieve code from session' -OnClick {
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            $GetValidateItemFullNameGci                   = gci $Cache:TaskEditorScriptRetrieveDataPathJS
                                                                            $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                                            $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                            $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                            $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                            $Session:NewHeaderTittleCondition             = $true
                                                                            $SetValidateItemHeadrString                   = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                                            $GetRetrieveData                              = gc $Cache:TaskEditorScriptRetrieveDataPathJS -Raw
                                                                            $GetRetrieveDataToObject                      = $GetRetrieveData
                                                                            if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathJS) -and $GetRetrieveData){
                                                                                $Session:GetValidateCodeItem = $GetRetrieveDataToObject
                                                                                Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            $GetValidateItemFullNameGci                   = gci $Cache:TaskEditorScriptRetrieveDataPathPS
                                                                            $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                                            $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                            $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                            $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                            $Session:NewHeaderTittleCondition             = $true
                                                                            $SetValidateItemHeadrString                   = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                                            $GetRetrieveData                              = gc $Cache:TaskEditorScriptRetrieveDataPathPS -Raw
                                                                            $GetRetrieveDataToObject                      = $GetRetrieveData
                                                                            if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathPS) -and $GetRetrieveData){
                                                                                $Session:GetValidateCodeItem = $GetRetrieveDataToObject
                                                                                Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            $GetValidateItemFullNameGci                   = gci $Cache:TaskEditorScriptRetrieveDataPathPY
                                                                            $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                                            $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                            $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                            $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                            $Session:NewHeaderTittleCondition             = $true
                                                                            $SetValidateItemHeadrString                   = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                                            $GetRetrieveData                              = gc $Cache:TaskEditorScriptRetrieveDataPathPY -Raw
                                                                            $GetRetrieveDataToObject                      = $GetRetrieveData
                                                                            if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathPY) -and $GetRetrieveData){
                                                                                $Session:GetValidateCodeItem = $GetRetrieveDataToObject
                                                                                Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDHtml -Markup '&nbsp;'
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonCreateScriptFileData' -Text 'Save Script File' -OnClick {
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Code
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                                            Show-UDModal -Header {} -Content {
                                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File Full Name' -ClassName 'task-center-box-task-file-full-name-text' -Disabled -Value ($Session:SelectedTaskRow|ConvertFrom-Json).TaskFullName
                                                                                }
                                                                            } -Footer {
                                                                                New-UDButton -Text "Save" -OnClick { 
                                                                                    $GetNewSaveFileName = (Get-UDElement -Id 'NewFileNameFromCodeEditorTextBox').Value
                                                                                    $GetEditorCode      = $Session:SaveCopyEditorCode
                                                                                    $GetDirFilePath     = $Session:ValidateItemFullName -replace '\\(?=[^\\]+$).*','\'
                                                                                    $CreateFilePath     = $GetNewSaveFileName
                                                                                    if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                        }else{
                                                                                            New-Item -ItemType File $CreateFilePath
                                                                                        }
                                                                                        
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                            $Session:CreateNewFilePathEditorBox = $CreateFilePath
                                                                                            $Session:GetValidateCodeItem = $GetEditorCode
                                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                            Show-UDToast -Message $CreateFilePath -Duration 5000
                                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                        }
                                                                                        else{
                                                                                            Show-UDToast -Message 'Create script file is failed' -Duration 5000
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                    }
                                                                                    $Session:CodeEditorSaveCondition = $true
                                                                                    $OpenCodeEditorSC|iex
                                                                                } -ClassName "task-center-box-btn"
                                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                                    
                                                                                    Hide-UDModal 
                                                                                } -ClassName "task-center-box-btn"
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                                            Show-UDModal -Header {} -Content {
                                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File Full Name' -ClassName 'task-center-box-task-file-full-name-text' -Disabled -Value ($Session:SelectedTaskRow|ConvertFrom-Json).TaskFullName
                                                                                }
                                                                            } -Footer { 
                                                                                New-UDButton -Text "Save" -OnClick { 
                                                                                    $GetNewSaveFileName = (Get-UDElement -Id 'NewFileNameFromCodeEditorTextBox').Value
                                                                                    $GetEditorCode      = $Session:SaveCopyEditorCode
                                                                                    $GetDirFilePath     = $Session:ValidateItemFullName -replace '\\(?=[^\\]+$).*','\'
                                                                                    $CreateFilePath     = $GetNewSaveFileName
                                                                                    if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                        }else{
                                                                                            New-Item -ItemType File $CreateFilePath
                                                                                        }
                                                                                        
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                            $Session:CreateNewFilePathEditorBox = $CreateFilePath
                                                                                            $Session:GetValidateCodeItem = $GetEditorCode
                                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                            Show-UDToast -Message $CreateFilePath -Duration 5000
                                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                        }
                                                                                        else{
                                                                                            Show-UDToast -Message 'Create script file is failed' -Duration 5000
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                    }
                                                                                    $Session:CodeEditorSaveCondition = $true
                                                                                    $OpenCodeEditorSC|iex
                                                                                } -ClassName "task-center-box-btn"
                                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                                    
                                                                                    Hide-UDModal 
                                                                                } -ClassName "task-center-box-btn"
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                                            Show-UDModal -Header {} -Content {
                                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File Full Name' -ClassName 'task-center-box-task-file-full-name-text' -Disabled -Value ($Session:SelectedTaskRow|ConvertFrom-Json).TaskFullName
                                                                                }
                                                                            } -Footer { 
                                                                                New-UDButton -Text "Save" -OnClick { 
                                                                                    $GetNewSaveFileName = (Get-UDElement -Id 'NewFileNameFromCodeEditorTextBox').Value
                                                                                    $GetEditorCode      = $Session:SaveCopyEditorCode
                                                                                    $GetDirFilePath     = $Session:ValidateItemFullName -replace '\\(?=[^\\]+$).*','\'
                                                                                    $CreateFilePath     = $GetNewSaveFileName
                                                                                    if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                        }else{
                                                                                            New-Item -ItemType File $CreateFilePath
                                                                                        }
                                                                                        
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                            $Session:CreateNewFilePathEditorBox = $CreateFilePath
                                                                                            $Session:GetValidateCodeItem = $GetEditorCode
                                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                            Show-UDToast -Message $CreateFilePath -Duration 5000
                                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                        }
                                                                                        else{
                                                                                            Show-UDToast -Message 'Create script file is failed' -Duration 5000
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                    }
                                                                                    $Session:CodeEditorSaveCondition = $true
                                                                                    $OpenCodeEditorSC|iex
                                                                                } -ClassName "task-center-box-btn"
                                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                                    
                                                                                    Hide-UDModal 
                                                                                } -ClassName "task-center-box-btn"
                                                                            }
                                                                        }                                                                        
                                                                        # TASK CACHE SCRIPT DATA PATH JS PROCESS
                                                                        if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                            $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                            $TaskScriptDataGciJSPSCO = @()
                                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                    Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                    Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                }
                                                                            }
                                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                        Dir   = $currentDirItem.Name
                                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
            
                                                                            }
                                                                            $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                                        }
                                                                        else{
                                                                            # $Cache:TaskScriptDataPathJS = $null
                                                                        }
                                                                        # TASK CACHE SCRIPT DATA PATH PS PROCESS
                                                                        if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                            $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                            $TaskScriptDataGciPSPSCO = @()
                                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                    Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                    Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                }
                                                                            }
                                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                        Dir   = $currentDirItem.Name
                                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
            
                                                                            }
                                                                            $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                                        }
                                                                        else{
                                                                            # $Cache:TaskScriptDataPathPS = $null
                                                                        }
                                                                        # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                        if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                            $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                            $TaskScriptDataGciPYPSCO = @()
                                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                    Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                    Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                }
                                                                            }
                                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                        Dir   = $currentDirItem.Name
                                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                            }
                                                                            $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                                        }
                                                                        else{
                                                                            # $Cache:TaskScriptDataPathPY = $null
                                                                        }                                                                        
                                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDHtml -Markup '&nbsp;'
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonGenerateFunctionsData' -Text 'Generate Functions' -OnClick {
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                            $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                            $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                            if(Test-Path $ConfigPath){
                                                                                $ConfigPathGc        = gc $ConfigPath
                                                                                $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                                $ConfigTableNameList = @()
                                                                                if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                                    foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                        $ConfigTableNameList += $Name
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                                    $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                                }
                                                                                
                                                                                $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                                $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
            
                                                                                # GET GENERATOR
                                                                                if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
            
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'All'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'Selected'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
            
                                                                                # SET GENERATOR
                                                                                if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                    $SetCacheMethod = 'local'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                    $SetCacheMethod = 'psu'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                                    $SetCacheMethod = 'sql'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                    $SetCacheMethod = 'terminal'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                    $SetCacheMethod = 'terminal-cachefile'
                                                                                }                                                                                
            
                                                                                if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $SetCacheReturnType = 'All'
                                                                                }
                                                                                elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $SetCacheReturnType = 'Selected'
                                                                                }
            
                                                                                if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                                    $SetCacheFunctionType = 'Add'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                                    $SetCacheFunctionType = 'Delete'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                                    $SetCacheFunctionType = 'Update'
                                                                                }
            
                                                                                
            
                                                                                if($GetFunctions -and $SetFunctions){
                                                                                    $CommandScriptBlock = (
@'
        
'@)
            
                                                                                    $CommandList = @()
                                                                                    $num         = 0
                                                                                    foreach ($Argument in $ArgumentParameterList) {
                                                                                        $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                        $ImportGetCacheFunctionType = 'Get'
                                                                                        $ImportGetCacheMethod       = $GetCacheMethod
                                                                                        $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                        $ImportGetCachePoint        = $StartPoint
                                                                                        $ImportGetMandatoryArgument = $Argument
            
                                                                                        $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                        $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                        $ImportSetCacheMethod       = $SetCacheMethod
                                                                                        $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                        $ImportSetCachePoint        = $EndPoint
            
                                                                                        $ImportFunctionTableName    = $ConfigTableNameList[$num]
            
                                                                                        $CommandList += (((((((((((($CommandScriptBlock
                                                                                        ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                        ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                        ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                        ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                        ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                        ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                        ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                        ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                        ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                        ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                        ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                        ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                        $num++
                                                                                    }
                                                                                }
                                                                                
                                                                                $EditorCodeArrayList  = @()
                                                                                $EditorCodeArrayList += $GetFunctions
                                                                                $EditorCodeArrayList += $SetFunctions
                                                                                $EditorCodeArrayList += $null
                                                                                $EditorCodeArrayList += ''
                                                                                $EditorCodeArrayList += '// COMMAND SCRIPTBLOCK'
                                                                                $EditorCodeArrayList += ''
                                                                                foreach ($Command in $CommandList) {
                                                                                    $EditorCodeArrayList += $Command
                                                                                }
                                                                                
                                                                                
                                                                                #[string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
                                                                                [string]$EditorCodeArrayListString = '// The development of the application is not complete for the javascript language'
                                                                                
                                                                            }
                                                                            $Session:GetValidateCodeItem = $EditorCodeArrayListString
                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                            Show-UDToast -Message 'Generate functions is successful' -Duration 5000
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                            $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                            $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                            if(Test-Path $ConfigPath){
                                                                                $ConfigPathGc        = gc $ConfigPath
                                                                                $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                                $ConfigTableNameList = @()
                                                                                if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                                    foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                        $ConfigTableNameList += $Name
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                                    $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                                }
                                                                                
                                                                                $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                                $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
            
                                                                                # GET GENERATOR
                                                                                if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
            
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'All'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'Selected'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
            
                                                                                # SET GENERATOR
                                                                                if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                    $SetCacheMethod = 'local'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                    $SetCacheMethod = 'psu'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                                    $SetCacheMethod = 'sql'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                    $SetCacheMethod = 'terminal'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                    $SetCacheMethod = 'terminal-cachefile'
                                                                                }                                                                                
            
                                                                                if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $SetCacheReturnType = 'All'
                                                                                }
                                                                                elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $SetCacheReturnType = 'Selected'
                                                                                }
            
                                                                                if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                                    $SetCacheFunctionType = 'Add'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                                    $SetCacheFunctionType = 'Delete'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                                    $SetCacheFunctionType = 'Update'
                                                                                }
            
                                                                                
            
                                                                                if($GetFunctions -and $SetFunctions){
                                                                                    $CommandScriptBlock = (
@'
$CacheData = importgetcachehashtabledatafromvariable
$Result    = importgetcachefunctiontypefromvariable-PSUCA-importtablenamefromlist -CacheMethod 'importgetcachemethodfromvariable' -CacheType 'importgetcachereturntypefromvariable' -CachePoint 'importgetcachepointfromvariable' -CacheData $CacheData -Argument_importgetmandatorytrueargumentnamefromvariable 0 
if($result -ne $false -and $result -ne 'null'){
    $Collection = $result|ConvertFrom-Json -Depth 100
    $ItemList   = @()
    $ArrayList  = @()
    $ArrayNum   = 0
    foreach ($Item in $Collection) {
        $ItemList  += $Item
        $ArrayList += $ArrayNum
        $ArrayNum++
    }
    if('' -ne $ItemList){
        $CacheData = importsetcachehashtabledatafromvariable
        $Result    = importsetcachefunctiontypefromvariable-PSUCA-importtablenamefromlist -CacheMethod 'importsetcachemethodfromvariable' -CacheType 'importsetcachereturntypefromvariable' -CachePoint 'importsetcachepointfromvariable' -CacheData $CacheData
    }
}
else{
    $Result = $false
}   
'@)
            
                                                                                    $CommandList = @()
                                                                                    $num         = 0
                                                                                    foreach ($Argument in $ArgumentParameterList) {
                                                                                        $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                        $ImportGetCacheFunctionType = 'Get'
                                                                                        $ImportGetCacheMethod       = $GetCacheMethod
                                                                                        $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                        $ImportGetCachePoint        = $StartPoint
                                                                                        $ImportGetMandatoryArgument = $Argument
            
                                                                                        $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                        $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                        $ImportSetCacheMethod       = $SetCacheMethod
                                                                                        $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                        $ImportSetCachePoint        = $EndPoint
            
                                                                                        $ImportFunctionTableName    = $ConfigTableNameList[$num]
            
                                                                                        $CommandList += (((((((((((($CommandScriptBlock
                                                                                        ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                        ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                        ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                        ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                        ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                        ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                        ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                        ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                        ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                        ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                        ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                        ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                        $num++
                                                                                    }
                                                                                }
                                                                                
                                                                                $EditorCodeArrayList  = @()
                                                                                $EditorCodeArrayList += $GetFunctions
                                                                                $EditorCodeArrayList += $SetFunctions
                                                                                $EditorCodeArrayList += $null
                                                                                $EditorCodeArrayList += ''
                                                                                $EditorCodeArrayList += '# COMMAND SCRIPTBLOCK'
                                                                                $EditorCodeArrayList += ''
                                                                                foreach ($Command in $CommandList) {
                                                                                    $EditorCodeArrayList += $Command
                                                                                }
                                                                                
                                                                                
                                                                                [string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
            
                                                                                
                                                                            }                                                                            
                                                                            $Session:GetValidateCodeItem = $EditorCodeArrayListString
                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                            Show-UDToast -Message 'Generate functions is successful' -Duration 5000
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                            $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                            $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                            if(Test-Path $ConfigPath){
                                                                                $ConfigPathGc        = gc $ConfigPath
                                                                                $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                                $ConfigTableNameList = @()
                                                                                if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                                    foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                        $ConfigTableNameList += $Name
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                                    $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                                }
                                                                                
                                                                                $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                                $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
            
                                                                                # GET GENERATOR
                                                                                if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
            
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'All'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'Selected'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
            
                                                                                # SET GENERATOR
                                                                                if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                    $SetCacheMethod = 'local'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                    $SetCacheMethod = 'psu'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                                    $SetCacheMethod = 'sql'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                    $SetCacheMethod = 'terminal'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                    $SetCacheMethod = 'terminal-cachefile'
                                                                                }                                                                                
            
                                                                                if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $SetCacheReturnType = 'All'
                                                                                }
                                                                                elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $SetCacheReturnType = 'Selected'
                                                                                }
            
                                                                                if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                                    $SetCacheFunctionType = 'Add'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                                    $SetCacheFunctionType = 'Delete'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                                    $SetCacheFunctionType = 'Update'
                                                                                }
            
                                                                                
            
                                                                                if($GetFunctions -and $SetFunctions){
                                                                                    $CommandScriptBlock = (
@'
        
'@)
            
                                                                                    $CommandList = @()
                                                                                    $num         = 0
                                                                                    foreach ($Argument in $ArgumentParameterList) {
                                                                                        $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                        $ImportGetCacheFunctionType = 'Get'
                                                                                        $ImportGetCacheMethod       = $GetCacheMethod
                                                                                        $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                        $ImportGetCachePoint        = $StartPoint
                                                                                        $ImportGetMandatoryArgument = $Argument
            
                                                                                        $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                        $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                        $ImportSetCacheMethod       = $SetCacheMethod
                                                                                        $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                        $ImportSetCachePoint        = $EndPoint
            
                                                                                        $ImportFunctionTableName    = $ConfigTableNameList[$num]
            
                                                                                        $CommandList += (((((((((((($CommandScriptBlock
                                                                                        ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                        ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                        ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                        ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                        ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                        ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                        ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                        ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                        ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                        ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                        ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                        ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                        $num++
                                                                                    }
                                                                                }
                                                                                
                                                                                $EditorCodeArrayList  = @()
                                                                                $EditorCodeArrayList += $GetFunctions
                                                                                $EditorCodeArrayList += $SetFunctions
                                                                                $EditorCodeArrayList += $null
                                                                                $EditorCodeArrayList += ''
                                                                                $EditorCodeArrayList += '# COMMAND SCRIPTBLOCK'
                                                                                $EditorCodeArrayList += ''
                                                                                foreach ($Command in $CommandList) {
                                                                                    $EditorCodeArrayList += $Command
                                                                                }
                                                                                
                                                                                
                                                                                #[string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
                                                                                [string]$EditorCodeArrayListString = '# The development of the application is not complete for the python language'
            
                                                                                
                                                                            }                                                                            
                                                                            $Session:GetValidateCodeItem = $EditorCodeArrayListString
                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                            Show-UDToast -Message 'Generate functions is successful' -Duration 5000
                                                                        }
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                            }
                                                        }
                                                    }
                                                } -Footer { 
                                                    New-UDButton -Text "Close" -OnClick {
                                                        $Session:SelectedTaskRow = $null
                                                        # TASK CACHE SCRIPT DATA PATH JS PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathJS){
                                                            $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                            $TaskScriptDataGciJSPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
            
                                                            }
                                                            $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathJS = $null
                                                        }
                                                        # TASK CACHE SCRIPT DATA PATH PS PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathPS){
                                                            $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                            $TaskScriptDataGciPSPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
            
                                                            }
                                                            $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathPS = $null
                                                        }
                                                        # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathPY){
                                                            $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                            $TaskScriptDataGciPYPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
            
                                                            }
                                                            $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathPY = $null
                                                        }                                                                        
                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'    
                                                        Hide-UDModal
                                                    } -ClassName "task-center-box-btn" 
                                                } -FullScreen
                                            }
                                            if($Session:SelectedTaskRow){
                                                $OpenCodeEditorSC|iex
                                            }
                                            else{
                                                Show-UDToast -Message 'Script is not selected!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Create New Directory Path' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath = $Cache:TaskScriptDataPathJS
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text 'Create new script path directory'
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Directory Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                        $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $New = New-Item -ItemType Directory $NewDirNamePath -Force
                                                            $Cache:TaskCacheScriptDataProcessJS|iex
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Create new directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath = $Cache:TaskScriptDataPathPS
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text 'Create new script path directory'
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Directory Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                        $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $New = New-Item -ItemType Directory $NewDirNamePath -Force
                                                            $Cache:TaskCacheScriptDataProcessPS|iex
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Create new directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath = $Cache:TaskScriptDataPathPY
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text 'Create new script path directory'
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Directory Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                        $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $New = New-Item -ItemType Directory $NewDirNamePath -Force
                                                            $Cache:TaskCacheScriptDataProcessPY|iex
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Create new directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Remove Directory Path' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($Session:TaskScriptPathSelectResult -eq 'js' -or $Session:TaskScriptPathSelectResult -eq 'ps' -or $Session:TaskScriptPathSelectResult -eq 'py' -or $Session:TaskScriptPathSelectResult -eq 'Default'){
                                                Show-UDToast -Message ('Directory named: '+"$Session:TaskScriptPathSelectResult"+' cannot be removed!') -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                            }
                                            else{
                                                if($GetEditorLanguage -eq 'Javascript'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathJS
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Remove directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDButton -Text "Remove" -OnClick {
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $OldDirNamePathGci = gci $OldDirNamePath
                                                            $OldDirNamePathValidation = $OldDirNamePathGci | ? {$_.Mode -match '-a---'}
                                                            if($null -ne $OldDirNamePathValidation){
                                                                Show-UDToast -Message 'Directory contains files!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $OldDirNamePath)){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Remove directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is not exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                                elseif($GetEditorLanguage -eq 'Powershell'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathPS
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Remove directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDButton -Text "Remove" -OnClick {
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $OldDirNamePathGci = gci $OldDirNamePath
                                                            $OldDirNamePathValidation = $OldDirNamePathGci | ? {$_.Mode -match '-a---'}
                                                            if($null -ne $OldDirNamePathValidation){
                                                                Show-UDToast -Message 'Directory contains files!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $OldDirNamePath)){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                                elseif($GetEditorLanguage -eq 'Python'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathPY
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Remove directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDButton -Text "Remove" -OnClick {
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $OldDirNamePathGci = gci $OldDirNamePath
                                                            $OldDirNamePathValidation = $OldDirNamePathGci | ? {$_.Mode -match '-a---'}
                                                            if($null -ne $OldDirNamePathValidation){
                                                                Show-UDToast -Message 'Directory contains files!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $OldDirNamePath)){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Rename Directory Path' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($Session:TaskScriptPathSelectResult -eq 'js' -or $Session:TaskScriptPathSelectResult -eq 'ps' -or $Session:TaskScriptPathSelectResult -eq 'py' -or $Session:TaskScriptPathSelectResult -eq 'Default'){
                                                Show-UDToast -Message ('Directory named: '+"$Session:TaskScriptPathSelectResult"+' cannot be renamed!') -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                            }
                                            else{
                                                if($GetEditorLanguage -eq 'Javascript'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathJS
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Rename directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDElement -Tag 'table' -Content {
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTypography -Text 'New Directory Name' -ClassName 'task-center-box-inner-title'
                                                                    }
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        New-UDButton -Text "Save" -OnClick {
                                                            $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                            $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                            $string = $GetNewName
                                                            $SpecialChars = $String -replace $pattern
                                                            if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                                Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                                $OldDirNamePathGci            = gci $OldDirNamePath
                                                                $ConfigurationListGci         = gci $Cache:TaskListConfigurationDatabasePath
                                                                if($ConfigurationListGci.Count -eq 0){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessJS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal    
                                                                }
                                                                else{
                                                                    $ConfigurationPathCondition   = $false
                                                                    $ConfigurationStatusCondition = $false
                                                                    $ConfigurationIndexArrayGood  = @()
                                                                    $ConfigurationIndexArrayBad   = @()
                                                                    $ConfigurationIndex           = 0
                                                                    foreach ($Configuration in $ConfigurationListGci) {
                                                                        $ConfigurationFullName   = $Configuration.FullName
                                                                        $ConfigurationGc         = gc $ConfigurationFullName
                                                                        $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                        $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                        $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                        if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                            $ConfigurationPathCondition   = $true
                                                                            $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                            if($ConfigurationTaskStatus -eq 'Active'){
                                                                                $ConfigurationStatusCondition = $true
                                                                                $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                            }
                                                                        }
                                                                        $ConfigurationIndex++
                                                                    }
                                                                    if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                        $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Error: Directory contains files with Active Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                        $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                        $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            New-UDButton -Text "Overwrite files" -OnClick {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                    $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                    $ConfigurationGc       = gc $ConfigurationFullName
                                                                                    $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                    $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                    $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                    $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                    $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                                }
                                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                                Hide-UDModal 
                                                                            } -ClassName "task-center-box-btn"
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:TaskScriptPathSelectResult = 'Default'
                                                                        $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                        $Cache:TaskCacheScriptDataProcessJS|iex
                                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                        Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                        Hide-UDModal                                                                    
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                                elseif($GetEditorLanguage -eq 'Powershell'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathPS
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Rename directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDElement -Tag 'table' -Content {
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTypography -Text 'New Directory Name' -ClassName 'task-center-box-inner-title'
                                                                    }
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        New-UDButton -Text "Save" -OnClick {
                                                            $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                            $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                            $string = $GetNewName
                                                            $SpecialChars = $String -replace $pattern
                                                            if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                                Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                                $OldDirNamePathGci            = gci $OldDirNamePath
                                                                $ConfigurationListGci         = gci $Cache:TaskListConfigurationDatabasePath
                                                                if($ConfigurationListGci.Count -eq 0){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal 
                                                                }
                                                                else{
                                                                    $ConfigurationPathCondition   = $false
                                                                    $ConfigurationStatusCondition = $false
                                                                    $ConfigurationIndexArrayGood  = @()
                                                                    $ConfigurationIndexArrayBad   = @()
                                                                    $ConfigurationIndex           = 0
                                                                    foreach ($Configuration in $ConfigurationListGci) {
                                                                        $ConfigurationFullName   = $Configuration.FullName
                                                                        $ConfigurationGc         = gc $ConfigurationFullName
                                                                        $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                        $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                        $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                        if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                            $ConfigurationPathCondition   = $true
                                                                            $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                            if($ConfigurationTaskStatus -eq 'Active'){
                                                                                $ConfigurationStatusCondition = $true
                                                                                $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                            }
                                                                        }
                                                                        $ConfigurationIndex++
                                                                    }
                                                                    if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                        $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Error: Directory contains files with Active Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                        $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                        $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            New-UDButton -Text "Overwrite files" -OnClick {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                    $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                    $ConfigurationGc       = gc $ConfigurationFullName
                                                                                    $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                    $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                    $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                    $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                    $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                                }
                                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                                Hide-UDModal
                                                                            } -ClassName "task-center-box-btn"
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:TaskScriptPathSelectResult = 'Default'
                                                                        $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                        $Cache:TaskCacheScriptDataProcessPS|iex
                                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                        Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                        Hide-UDModal
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                                elseif($GetEditorLanguage -eq 'Python'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathPY
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Rename directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDElement -Tag 'table' -Content {
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTypography -Text 'New Directory Name' -ClassName 'task-center-box-inner-title'
                                                                    }
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        New-UDButton -Text "Save" -OnClick {
                                                            $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                            $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                            $string = $GetNewName
                                                            $SpecialChars = $String -replace $pattern
                                                            if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                                Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                                $OldDirNamePathGci            = gci $OldDirNamePath
                                                                $ConfigurationListGci         = gci $Cache:TaskListConfigurationDatabasePath
                                                                if($ConfigurationListGci.Count -eq 0){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPY|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }
                                                                else{
                                                                    $ConfigurationPathCondition   = $false
                                                                    $ConfigurationStatusCondition = $false
                                                                    $ConfigurationIndexArrayGood  = @()
                                                                    $ConfigurationIndexArrayBad   = @()
                                                                    $ConfigurationIndex           = 0
                                                                    foreach ($Configuration in $ConfigurationListGci) {
                                                                        $ConfigurationFullName   = $Configuration.FullName
                                                                        $ConfigurationGc         = gc $ConfigurationFullName
                                                                        $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                        $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                        $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                        if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                            $ConfigurationPathCondition   = $true
                                                                            $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                            if($ConfigurationTaskStatus -eq 'Active'){
                                                                                $ConfigurationStatusCondition = $true
                                                                                $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                            }
                                                                        }
                                                                        $ConfigurationIndex++
                                                                    }
                                                                    if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                        $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Error: Directory contains files with Active Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                        $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                        $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            New-UDButton -Text "Overwrite files" -OnClick {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                    $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                    $ConfigurationGc       = gc $ConfigurationFullName
                                                                                    $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                    $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                    $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                    $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                    $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                                }
                                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                                Hide-UDModal
                                                                            } -ClassName "task-center-box-btn"
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:TaskScriptPathSelectResult = 'Default'
                                                                        $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                        $Cache:TaskCacheScriptDataProcessPY|iex
                                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                        Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                        Hide-UDModal
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Clone Script' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathJS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                $OldDirNameData = gc $OldDirNamePath
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Clone Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Clone" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                            $NewDirNamePath = "$DefaultDirPath"+'CLONE_'+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+'CLONE_'+"$GetValidateItem")
                                                        }
                                                        if($true -ne $(Test-Path $NewDirNamePath) -and $OldDirNameData){
                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                            $New = New-Item -ItemType File $NewDirNamePath -Force
                                                            if($true -eq $(Test-Path $NewDirNamePath)){
                                                                $Set = Set-Content $NewDirNamePath -Value $OldDirNameData -Force
                                                            }
                                                            $Cache:TaskCacheScriptDataProcessJS|iex
                                                            
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Clone Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Clone" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                            $NewDirNamePath = "$DefaultDirPath"+'CLONE_'+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+'CLONE_'+"$GetValidateItem")
                                                        }
                                                        if($true -ne $(Test-Path $NewDirNamePath) -and $OldDirNameData){
                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                            $New = New-Item -ItemType File $NewDirNamePath -Force
                                                            if($true -eq $(Test-Path $NewDirNamePath)){
                                                                $Set = Set-Content $NewDirNamePath -Value $OldDirNameData -Force
                                                            }
                                                            $Cache:TaskCacheScriptDataProcessPS|iex
                                                            
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPY
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Clone Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Clone" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                            $NewDirNamePath = "$DefaultDirPath"+'CLONE_'+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+'CLONE_'+"$GetValidateItem")
                                                        }
                                                        if($true -ne $(Test-Path $NewDirNamePath) -and $OldDirNameData){
                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                            $New = New-Item -ItemType File $NewDirNamePath -Force
                                                            if($true -eq $(Test-Path $NewDirNamePath)){
                                                                $Set = Set-Content $NewDirNamePath -Value $OldDirNameData -Force
                                                            }
                                                            $Cache:TaskCacheScriptDataProcessPY|iex
                                                            
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }                                
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Move Script To Another Directory' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathJS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Move Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Script Path' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    $Session:SelectScriptDirPathSC|iex
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Move" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                        }
                                                        if($true -eq $(Test-Path $OldDirNamePath) -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessJS|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessJS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Move Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Script Path' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    $Session:SelectScriptDirPathSC|iex
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Move" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                        }
                                                        if($true -eq $(Test-Path $OldDirNamePath) -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessPS|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPY
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Move Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Script Path' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    $Session:SelectScriptDirPathSC|iex
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Move" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                        }
                                                        if($true -eq $(Test-Path $OldDirNamePath) -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessPY|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPY|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Remove Script' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathJS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Remove Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Remove" -OnClick {
                                                        if($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Remove = Remove-Item $OldDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessJS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Remove Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Remove" -OnClick {
                                                        if($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Remove = Remove-Item $OldDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPY
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Remove Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Remove" -OnClick {
                                                        if($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Remove = Remove-Item $OldDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPY|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Rename Script' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathJS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Rename Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'New Script Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskRenameScriptNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskRenameScriptNameIdTextBox').Value
                                                        if($DefaultDir -eq $true){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetNewName"+'.js'
                                                        }
                                                        else{
                                                            $NewDirNamePath = "$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetNewName"+'.js'
                                                        }
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Script name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $false -eq $(Test-Path $NewDirNamePath) -and $GetNewName){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessJS|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessJS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Rename Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'New Script Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskRenameScriptNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskRenameScriptNameIdTextBox').Value
                                                        if($DefaultDir -eq $true){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetNewName"+'.ps'
                                                        }
                                                        else{
                                                            $NewDirNamePath = "$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetNewName"+'.ps'
                                                        }
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Script name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $false -eq $(Test-Path $NewDirNamePath) -and $GetNewName){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessPS|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPY
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Rename Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'New Script Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskRenameScriptNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskRenameScriptNameIdTextBox').Value
                                                        if($DefaultDir -eq $true){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetNewName"+'.py'
                                                        }
                                                        else{
                                                            $NewDirNamePath = "$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetNewName"+'.py'
                                                        }
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Script name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $false -eq $(Test-Path $NewDirNamePath) -and $GetNewName){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessPY|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPY|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }                                
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Create New Task' -OnClick {
                                            if($Session:SelectedTaskRow){
                                                $FormContent = $null
                                                $Session:GlobalFormContent = $null
                                                $FormContent = [PSCustomObject]@{
                                                    TaskUniqueId                         = ([guid]::NewGuid()).Guid
                                                    TaskNameIdTextBox                    = (Get-UDElement -Id 'TaskNameIdTextBox').Value
                                                    TaskGroupIdSelectBox                 = $Session:TaskGroupIdSelectBoxData
                                                    TaskTypeIdSelectBox                  = $Session:TaskTypeIdSelectBoxData
                                                    TaskMethodTypeIdSelectBox            = $Session:TaskMethodTypeIdSelectBoxData
                                                    TaskGetMethodIdSelectBox             = $Session:TaskGetMethodIdSelectBoxData
                                                    TaskGetReturnTypeIdSelectBox         = $Session:TaskGetReturnTypeIdSelectBoxData
                                                    TaskGetExpirationIdSelectBox         = $Session:TaskGetExpirationIdSelectBoxData
                                                    TaskSetMethodIdSelectBox             = $Session:TaskSetMethodIdSelectBoxData
                                                    TaskSetReturnTypeIdSelectBox         = $Session:TaskSetReturnTypeIdSelectBoxData
                                                    TaskSetTypeIdSelectBox               = $Session:TaskSetTypeIdSelectBoxData
                                                    InterfaceBlocksStartPointIdSelectBox = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                    InterfaceBlocksEndPointIdSelectBox   = $Session:InterfaceBlocksEndPointIdSelectBoxData
                                                    EntiyGroupIdSelectBox                = $Session:EntiyGroupIdSelectBoxData
                                                    EntiyModelIdSelectBox                = $Session:EntiyModelIdSelectBoxData
                                                    EntiyModelAttributeIdSelectBox       = $Session:EntiyModelAttributeIdSelectBoxData
                                                    TaskStartDateDayTextBox              = (Get-UDElement -Id 'TaskStartDateDayTextBox').Value
                                                    TaskStartDateMonthTextBox            = (Get-UDElement -Id 'TaskStartDateMonthTextBox').Value
                                                    TaskStartDateYearTextBox             = (Get-UDElement -Id 'TaskStartDateYearTextBox').Value
                                                    TaskEndDateDayTextBox                = (Get-UDElement -Id 'TaskEndDateDayTextBox').Value
                                                    TaskEndDateMonthTextBox              = (Get-UDElement -Id 'TaskEndDateMonthTextBox').Value
                                                    TaskEndDateYearTextBox               = (Get-UDElement -Id 'TaskEndDateYearTextBox').Value
                                                    TaskStartTimeHourTextBox             = (Get-UDElement -Id 'TaskStartTimeHourTextBox').Value
                                                    TaskStartTimeMinuteTextBox           = (Get-UDElement -Id 'TaskStartTimeMinuteTextBox').Value
                                                    TaskStartTimeSecondTextBox           = (Get-UDElement -Id 'TaskStartTimeSecondTextBox').Value
                                                    TaskEndTimeHourTextBox               = (Get-UDElement -Id 'TaskEndTimeHourTextBox').Value
                                                    TaskEndTimeMinuteTextBox             = (Get-UDElement -Id 'TaskEndTimeMinuteTextBox').Value
                                                    TaskEndTimeSecondTextBox             = (Get-UDElement -Id 'TaskEndTimeSecondTextBox').Value
                                                    TaskLimitTimeHourTextBox             = (Get-UDElement -Id 'TaskLimitTimeHourTextBox').Value
                                                    TaskLimitTimeMinuteTextBox           = (Get-UDElement -Id 'TaskLimitTimeMinuteTextBox').Value
                                                    TaskLimitTimeSecondTextBox           = (Get-UDElement -Id 'TaskLimitTimeSecondTextBox').Value
                                                    TaskRepetitionTimeHourTextBox        = (Get-UDElement -Id 'TaskRepetitionTimeHourTextBox').Value
                                                    TaskRepetitionTimeMinuteTextBox      = (Get-UDElement -Id 'TaskRepetitionTimeMinuteTextBox').Value
                                                    TaskRepetitionTimeSecondTextBox      = (Get-UDElement -Id 'TaskRepetitionTimeSecondTextBox').Value
                                                    TaskWindowStyleIdSelectBox           = $Session:TaskWindowStyleIdSelectBoxData
                                                    TaskSelectScriptTypeBox              = $Session:TaskSelectScriptTypeBoxData
                                                    TaskScriptblockLanguageSelectBox     = $Cache:GetScriptBlockLanguage
                                                    TaskScriptBlockFullName              = ($Session:SelectedTaskRow|ConvertFrom-Json).TaskFullName
                                                    TaskStatus                           = 'Inactive'
                                                }
                
                                                $Session:GlobalFormContent = $FormContent
                
                                                if ($FormContent.TaskNameIdTextBox -eq $null -or $FormContent.TaskNameIdTextBox -eq '') {
                                                    Show-UDToast -Message 'Task Name is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon1 = $true
                                                }
                                                if ($FormContent.TaskGroupIdSelectBox -eq $null -or $FormContent.TaskGroupIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Group is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon2 = $true
                                                }
                                                if ($FormContent.TaskTypeIdSelectBox -eq $null -or $FormContent.TaskTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon3 = $true
                                                }
                                                if ($FormContent.TaskMethodTypeIdSelectBox -eq $null -or $FormContent.TaskMethodTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon4 = $true
                                                }
                                                if ($FormContent.TaskGetMethodIdSelectBox -eq $null -or $FormContent.TaskGetMethodIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon5 = $true
                                                }
                                                if ($FormContent.TaskGetReturnTypeIdSelectBox -eq $null -or $FormContent.TaskGetReturnTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Return Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon6 = $true
                                                }
                                                if ($FormContent.TaskGetExpirationIdSelectBox -eq $null -or $FormContent.TaskGetExpirationIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Expiration is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon7 = $true
                                                }
                                                if ($FormContent.TaskSetMethodIdSelectBox -eq $null -or $FormContent.TaskSetMethodIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon8 = $true
                                                }
                                                if ($FormContent.TaskSetReturnTypeIdSelectBox -eq $null -or $FormContent.TaskSetReturnTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Return Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon9 = $true
                                                }
                                                if ($FormContent.TaskSetTypeIdSelectBox -eq $null -or $FormContent.TaskSetTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon10 = $true
                                                }
                                                if ($FormContent.InterfaceBlocksStartPointIdSelectBox -eq $null -or $FormContent.InterfaceBlocksStartPointIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Interface Start Point is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon11 = $true
                                                }
                                                if ($FormContent.InterfaceBlocksEndPointIdSelectBox -eq $null -or $FormContent.InterfaceBlocksEndPointIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Interface End Point is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon12 = $true
                                                }
                                                if ($FormContent.EntiyGroupIdSelectBox -eq $null -or $FormContent.EntiyGroupIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Group is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon13 = $true
                                                }
                                                if ($FormContent.EntiyModelIdSelectBox -eq $null -or $FormContent.EntiyModelIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Model is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon14 = $true
                                                }
                                                if ($FormContent.EntiyModelAttributeIdSelectBox -eq $null -or $FormContent.EntiyModelAttributeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Model Attribute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon15 = $true
                                                }
                                                if ($FormContent.TaskStartDateDayTextBox -eq $null -or $FormContent.TaskStartDateDayTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Day is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon16 = $true
                                                }
                                                if ($FormContent.TaskStartDateMonthTextBox -eq $null -or $FormContent.TaskStartDateMonthTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Month is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon17 = $true
                                                }
                                                if ($FormContent.TaskStartDateYearTextBox -eq $null -or $FormContent.TaskStartDateYearTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Year is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon18 = $true
                                                }
                                                if ($FormContent.TaskEndDateDayTextBox -eq $null -or $FormContent.TaskEndDateDayTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Day is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon19 = $true
                                                }
                                                if ($FormContent.TaskEndDateMonthTextBox -eq $null -or $FormContent.TaskEndDateMonthTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Month is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon20 = $true
                                                }
                                                if ($FormContent.TaskEndDateYearTextBox -eq $null -or $FormContent.TaskEndDateYearTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Year is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon21 = $true
                                                }
                                                if ($FormContent.TaskStartTimeHourTextBox -eq $null -or $FormContent.TaskStartTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon22 = $true
                                                }
                                                if ($FormContent.TaskStartTimeMinuteTextBox -eq $null -or $FormContent.TaskStartTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon23= $true
                                                }
                                                if ($FormContent.TaskStartTimeSecondTextBox -eq $null -or $FormContent.TaskStartTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon24 = $true
                                                }
                                                if ($FormContent.TaskEndTimeHourTextBox -eq $null -or $FormContent.TaskEndTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon25 = $true
                                                }
                                                if ($FormContent.TaskEndTimeMinuteTextBox -eq $null -or $FormContent.TaskEndTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon26 = $true
                                                }
                                                if ($FormContent.TaskEndTimeSecondTextBox -eq $null -or $FormContent.TaskEndTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon27 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeHourTextBox -eq $null -or $FormContent.TaskLimitTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon28 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeMinuteTextBox -eq $null -or $FormContent.TaskLimitTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon29 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeSecondTextBox -eq $null -or $FormContent.TaskLimitTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon30 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeHourTextBox -eq $null -or $FormContent.TaskRepetitionTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon31 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeMinuteTextBox -eq $null -or $FormContent.TaskRepetitionTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon32 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeSecondTextBox -eq $null -or $FormContent.TaskRepetitionTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon33 = $true
                                                }
                
                
                
                
                                                if ($FormContent.TaskWindowStyleIdSelectBox -eq $null -or $FormContent.TaskWindowStyleIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Window Style is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon34 = $true
                                                }
                                                if ($FormContent.TaskSelectScriptTypeBox -eq $null -or $FormContent.TaskSelectScriptTypeBox -eq '') {
                                                    Show-UDToast -Message 'Task Script Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon35 = $true
                                                }
                                                if ($FormContent.TaskScriptblockLanguageSelectBox -eq $null -or $FormContent.TaskScriptblockLanguageSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Script Language is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon36 = $true
                                                }
                
                
                
                                                if ($FormContent.TaskScriptBlockFullName -eq $null -or $FormContent.TaskScriptBlockFullName -eq '') {
                                                    Show-UDToast -Message 'Task Script File Full Name is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon37 = $true
                                                }
                
                
                                                if(
                                                    $ValidCon1 -eq $true -and
                                                    $ValidCon2 -eq $true -and
                                                    $ValidCon3 -eq $true -and
                                                    $ValidCon4 -eq $true -and
                                                    $ValidCon5 -eq $true -and
                                                    $ValidCon6 -eq $true -and
                                                    $ValidCon7 -eq $true -and
                                                    $ValidCon8 -eq $true -and
                                                    $ValidCon9 -eq $true -and
                                                    $ValidCon10 -eq $true -and
                                                    $ValidCon11 -eq $true -and
                                                    $ValidCon12 -eq $true -and
                                                    $ValidCon13 -eq $true -and
                                                    $ValidCon14 -eq $true -and
                                                    $ValidCon15 -eq $true -and
                                                    $ValidCon16 -eq $true -and
                                                    $ValidCon17 -eq $true -and
                                                    $ValidCon18 -eq $true -and
                                                    $ValidCon19 -eq $true -and
                                                    $ValidCon20 -eq $true -and
                                                    $ValidCon21 -eq $true -and
                                                    $ValidCon22 -eq $true -and
                                                    $ValidCon23 -eq $true -and
                                                    $ValidCon24 -eq $true -and
                                                    $ValidCon25 -eq $true -and
                                                    $ValidCon26 -eq $true -and
                                                    $ValidCon27 -eq $true -and
                                                    $ValidCon28 -eq $true -and
                                                    $ValidCon29 -eq $true -and
                                                    $ValidCon30 -eq $true -and
                                                    $ValidCon31 -eq $true -and
                                                    $ValidCon32 -eq $true -and
                                                    $ValidCon33 -eq $true -and
                                                    $ValidCon34 -eq $true -and
                                                    $ValidCon35 -eq $true -and
                                                    $ValidCon36 -eq $true -and
                                                    $ValidCon37 -eq $true
                                                ){
                                                    # TASK CONFIG SCRIPTBLOCK
                                                    $TaskConfigSC = {
                                                        $TaskName = $Session:GlobalFormContent.TaskNameIdTextBox
                                                        $TaskPath = "$Cache:TaskListConfigurationDatabasePath"+"$TaskName"+'.json'
                                                        $Session:ValidateItemFullName = $null
                                                        if(Test-Path $TaskPath){
                                                            Show-UDModal -Header {
                                                                New-UDTypography -Text 'Overwrite task ?'
                                                            } -Content {
                                                                New-UDButton -Text "Save" -OnClick {
                                                                    Set-Content $TaskPath -Value ($Session:GlobalFormContent|ConvertTo-Json -Depth 100)
                                                                    Show-UDToast -Message 'Overwrite task configuration file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Go back" -OnClick {
                                                                    Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn" 
                                                            }
                                                        }
                                                        else{
                                                            Show-UDModal -Header {
                                                                New-UDTypography -Text 'Save task ?'
                                                            } -Content {
                                                                New-UDButton -Text "Save" -OnClick {
                                                                    New-Item -ItemType File $TaskPath
                                                                    Set-Content $TaskPath -Value ($Session:GlobalFormContent|ConvertTo-Json -Depth 100)
                                                                    Show-UDToast -Message 'Create new task configuration file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Go back" -OnClick {
                                                                    Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn" 
                                                            }
                                                        }
                                                        
                                                    }
                
                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                        $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                                        $GetEditorCode = gc $FormContent.TaskScriptBlockFullName -Raw
                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                            Show-UDModal -Header {} -Content {
                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File name' -Value ($Session:GlobalFormContent.TaskScriptBlockFullName -replace '.*\\' -replace '.js') -Disabled
                                                                }
                                                            } -Footer { 
                                                                New-UDButton -Text "Save" -OnClick { 
                                                                    $TaskConfigSC|iex
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                    $Session:SelectedTaskRow = $null
                                                                    Hide-UDModal 
                                                                } -ClassName "task-center-box-btn"
                                                            }
                                                        }
                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                            Show-UDModal -Header {} -Content {
                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File name' -Value ($Session:GlobalFormContent.TaskScriptBlockFullName -replace '.*\\' -replace '.ps1') -Disabled
                                                                }
                                                            } -Footer { 
                                                                New-UDButton -Text "Save" -OnClick { 
                                                                    $TaskConfigSC|iex
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                    $Session:SelectedTaskRow = $null
                                                                    Hide-UDModal 
                                                                } -ClassName "task-center-box-btn"
                                                            }
                                                        }
                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                            Show-UDModal -Header {} -Content {
                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File name' -Value ($Session:GlobalFormContent.TaskScriptBlockFullName -replace '.*\\' -replace '.py') -Disabled
                                                                }
                                                            } -Footer { 
                                                                New-UDButton -Text "Save" -OnClick { 
                                                                    $TaskConfigSC|iex
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                    $Session:SelectedTaskRow = $null
                                                                    Hide-UDModal 
                                                                } -ClassName "task-center-box-btn"
                                                            }
                                                        }                                                                        
                                                        # TASK CACHE SCRIPT DATA PATH JS PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathJS){
                                                            $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                            $TaskScriptDataGciJSPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
                
                                                            }
                                                            $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathJS = $null
                                                        }
                                                        # TASK CACHE SCRIPT DATA PATH PS PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathPS){
                                                            $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                            $TaskScriptDataGciPSPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
                
                                                            }
                                                            $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathPS = $null
                                                        }
                                                        # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathPY){
                                                            $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                            $TaskScriptDataGciPYPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
                                                            }
                                                            $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathPY = $null
                                                        }                                                                        
                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                    }
                                                }
                                            }
                                            else{
                                                Show-UDToast -Message 'Script is not selected!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                            }
                        }
                    }
                }
            }                 
        } -Elevation 1
    }
}

$RecoveryMainSC = {
    New-UDGrid -Item -ExtraSmallSize 12 -SmallSize 12 -MediumSize 12 -LargeSize 12 -ExtraLargeSize 12 -Content {
        New-UDPaper -ClassName "task-center-box-layout" -Square -Content {
            New-UDRow -Columns {
                New-UDColumn -SmallSize 12 -MediumSize 12 -LargeSize 12 {
                    New-UDElement -Tag 'table' -Content {
                        New-UDElement -Tag 'tr' -Content {
                            New-UDElement -Tag 'td' -Content {
                                New-UDIcon -Icon 'Tasks' -Size '1x' -Border -ClassName 'task-center-box-logo'
                            }
                            New-UDElement -Tag 'td' -Content {
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDTypography -Text 'Create New Task Form' -ClassName 'task-center-box-title'
                                }
                            }
                        }
                    }
                    New-UDElement -Tag 'div' -Content {
                        New-UDElement -Tag 'table' -Content {
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Task Name' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTextbox -Id 'TaskNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text' -Value $RecoveryData.TaskNameIdTextBox
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Task Group' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskGroupIdSelectBoxData = $RecoveryData.TaskGroupIdSelectBox
                                            New-UDSelect -Id 'TaskGroupIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name ' ' -Value 0
                                                if(Test-Path $Cache:TaskGroupDatabasePath){
                                                    $Cache:TaskGroupSC|iex
                                                    $TaskGroupList = $Cache:TaskGroupList
                                                    if($TaskGroupList){
                                                        foreach ($Group in $TaskGroupList) {
                                                            New-UDSelectOption -Name $Group.Name -Value $Group.Name
                                                        }
                                                    }
                                                }
                                            } -OnChange {
                                                if($EventData -eq 0){
                                                    $Session:TaskGroupIdSelectBoxData = 'null'
                                                }
                                                else{
                                                    $Session:TaskGroupIdSelectBoxData = $EventData
                                                }
                                            } -DefaultValue $RecoveryData.TaskGroupIdSelectBox
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Task Type' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskTypeIdSelectBoxData = $RecoveryData.TaskTypeIdSelectBox
                                            New-UDSelect -Id 'TaskTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name ' ' -Value 0
                                                if(Test-Path $Cache:TaskTypeDatabasePath){
                                                    $Cache:TaskTypeSC|iex
                                                    $TaskTypeList = $Cache:TaskTypeList
                                                    if($TaskTypeList){
                                                        foreach ($Type in $TaskTypeList) {
                                                            New-UDSelectOption -Name $Type.Name -Value $Type.Name
                                                        }
                                                    }
                                                }
                                            } -OnChange {
                                                if($EventData -eq 0){
                                                    $Session:TaskTypeIdSelectBoxData = 'null'
                                                }
                                                else{
                                                    $Session:TaskTypeIdSelectBoxData = $EventData
                                                }
                                            } -DefaultValue $RecoveryData.TaskTypeIdSelectBox
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Task Method' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskMethodTypeIdSelectBoxData = $RecoveryData.TaskMethodTypeIdSelectBox
                                            if($Session:TaskMethodTypeIdSelectBoxData -eq 'Throw'){
                                                $RecoveryDataTaskMethodTypeIdSelectBoxDefaultValue = 1
                                            }
                                            elseif($Session:TaskMethodTypeIdSelectBoxData -eq 'Catch'){
                                                $RecoveryDataTaskMethodTypeIdSelectBoxDefaultValue = 2
                                            }
                                            New-UDSelect -Id 'TaskMethodTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Throw' -Value 1
                                                New-UDSelectOption -Name 'Catch' -Value 2
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskMethodTypeIdSelectBoxData = 'Throw'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskMethodTypeIdSelectBoxData = 'Catch'
                                                }
                                                Sync-UDElement -Id 'InterfaceBlockPointDynamicId'
                                            } -DefaultValue $RecoveryDataTaskMethodTypeIdSelectBoxDefaultValue
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'GET Method' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskGetMethodIdSelectBoxData = $RecoveryData.TaskGetMethodIdSelectBox
                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                $RecoveryDataTaskGetMethodIdSelectBoxDefaultValue = 1
                                            }
                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                $RecoveryDataTaskGetMethodIdSelectBoxDefaultValue = 2
                                            }
                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                $RecoveryDataTaskGetMethodIdSelectBoxDefaultValue = 3
                                            }
                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                $RecoveryDataTaskGetMethodIdSelectBoxDefaultValue = 4
                                            }
                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                $RecoveryDataTaskGetMethodIdSelectBoxDefaultValue = 5
                                            }
                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
                                                $RecoveryDataTaskGetMethodIdSelectBoxDefaultValue = 6
                                                $Session:TaskGetMethodSelectedItem = $RecoveryDataTaskGetMethodIdSelectBoxDefaultValue
                                            }                                            
                                            New-UDSelect -Id 'TaskGetMethodIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Local Storage' -Value 1
                                                New-UDSelectOption -Name 'PSU Server' -Value 2
                                                New-UDSelectOption -Name 'SQL' -Value 3
                                                New-UDSelectOption -Name 'Terminal' -Value 4
                                                New-UDSelectOption -Name 'Terminal Cache File' -Value 5
                                                New-UDSelectOption -Name 'No Action' -Value 6
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'Local Storage'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'PSU Server'
                                                }
                                                elseif($EventData -eq 3){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'SQL'
                                                }
                                                elseif($EventData -eq 4){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'Terminal'
                                                }
                                                elseif($EventData -eq 5){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'Terminal Cache File'
                                                }
                                                elseif($EventData -eq 6){
                                                    $Session:TaskGetMethodIdSelectBoxData = 'No Action'
                                                }                                                
                                                $Session:TaskGetMethodSelectedItem = $EventData
                                                Sync-UDElement -Id 'TaskGetExpirationDynamicId'
                                                Sync-UDElement -Id 'TaskGetReturnTypeDynamicId'
                                            } -DefaultValue $RecoveryDataTaskGetMethodIdSelectBoxDefaultValue
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'GET Return' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            New-UDDynamic -Id 'TaskGetReturnTypeDynamicId' -Content {
                                                if($Session:TaskGetMethodSelectedItem -eq 6){
                                                    $Session:TaskGetReturnTypeIdSelectBoxData = 'No Action'
                                                    New-UDSelect -Id 'TaskGetReturnTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name 'No Action' -Value 1
                                                    } -Disabled
                                                }
                                                else{
                                                    $Session:TaskGetReturnTypeIdSelectBoxData = $RecoveryData.TaskGetReturnTypeIdSelectBox
                                                    if($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                        $RecoveryDataTaskGetReturnTypeIdSelectBox = 1
                                                    }
                                                    elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                        $RecoveryDataTaskGetReturnTypeIdSelectBox = 2
                                                    }
                                                    New-UDSelect -Id 'TaskGetReturnTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name 'All' -Value 1
                                                        New-UDSelectOption -Name 'Selected' -Value 2
                                                    } -OnChange {
                                                        if($EventData -eq 1){
                                                            $Session:TaskGetReturnTypeIdSelectBoxData = 'All'
                                                        }
                                                        elseif($EventData -eq 2){
                                                            $Session:TaskGetReturnTypeIdSelectBoxData = 'Selected'
                                                        }
                                                    } -DefaultValue $RecoveryDataTaskGetReturnTypeIdSelectBox
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'GET Expiration' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            New-UDDynamic -Id 'TaskGetExpirationDynamicId' -Content {
                                                if($Session:TaskGetMethodSelectedItem -eq 6){
                                                    $Session:TaskGetExpirationIdSelectBoxData = 'No Action'
                                                    New-UDSelect -Id 'TaskGetExpirationIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name 'No Action' -Value 1
                                                    } -Disabled
                                                }
                                                else{
                                                    $Session:TaskGetExpirationIdSelectBoxData = $RecoveryData.TaskGetExpirationIdSelectBox
                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                        $RecoveryDataTaskGetExpirationIdSelectBox = 1
                                                    }
                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                        $RecoveryDataTaskGetExpirationIdSelectBox = 2
                                                    }
                                                    New-UDSelect -Id 'TaskGetExpirationIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name 'After Use' -Value 1
                                                        New-UDSelectOption -Name 'Never' -Value 2
                                                    } -OnChange {
                                                        if($EventData -eq 1){
                                                            $Session:TaskGetExpirationIdSelectBoxData = 'After Use'
                                                        }
                                                        elseif($EventData -eq 2){
                                                            $Session:TaskGetExpirationIdSelectBoxData = 'Never'
                                                        }
                                                    } -DefaultValue $RecoveryDataTaskGetExpirationIdSelectBox
                                                }
                                            }
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'SET Method' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskSetMethodIdSelectBoxData = $RecoveryData.TaskSetMethodIdSelectBox
                                            if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                $RecoveryDataTaskSetMethodIdSelectBox = 1
                                            }
                                            elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                $RecoveryDataTaskSetMethodIdSelectBox = 2
                                            }
                                            elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                $RecoveryDataTaskSetMethodIdSelectBox = 3
                                            }
                                            elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                $RecoveryDataTaskSetMethodIdSelectBox = 4
                                            }
                                            elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                $RecoveryDataTaskSetMethodIdSelectBox = 5
                                            }                                            
                                            New-UDSelect -Id 'TaskSetMethodIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Local Storage' -Value 1
                                                New-UDSelectOption -Name 'PSU Server' -Value 2
                                                New-UDSelectOption -Name 'SQL' -Value 3
                                                New-UDSelectOption -Name 'Terminal' -Value 4
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'Local Storage'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'PSU Server'
                                                }
                                                elseif($EventData -eq 3){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'SQL'
                                                }
                                                elseif($EventData -eq 4){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'Terminal'
                                                }
                                                elseif($EventData -eq 5){
                                                    $Session:TaskSetMethodIdSelectBoxData = 'Terminal Cache File'
                                                }                                                

                                            } -DefaultValue $RecoveryDataTaskSetMethodIdSelectBox
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'SET Return' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskSetReturnTypeIdSelectBoxData = $RecoveryData.TaskSetReturnTypeIdSelectBox
                                            if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                $RecoveryDataTaskSetReturnTypeIdSelectBox = 1
                                            }
                                            elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                $RecoveryDataTaskSetReturnTypeIdSelectBox = 2
                                            }
                                            New-UDSelect -Id 'TaskSetReturnTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'All' -Value 1
                                                New-UDSelectOption -Name 'Selected' -Value 2
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskSetReturnTypeIdSelectBoxData = 'All'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskSetReturnTypeIdSelectBoxData = 'Selected'
                                                }
                                            } -DefaultValue $RecoveryDataTaskSetReturnTypeIdSelectBox
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'SET Type' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskSetTypeIdSelectBoxData = $RecoveryData.TaskSetTypeIdSelectBox
                                            if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                $RecoveryDataTaskSetTypeIdSelectBox = 1
                                            }
                                            elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                $RecoveryDataTaskSetTypeIdSelectBox = 2
                                            }
                                            elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                $RecoveryDataTaskSetTypeIdSelectBox = 3
                                            }
                                            New-UDSelect -Id 'TaskSetTypeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Add' -Value 1
                                                New-UDSelectOption -Name 'Delete' -Value 2
                                                New-UDSelectOption -Name 'Update' -Value 3
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskSetTypeIdSelectBoxData = 'Add'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskSetTypeIdSelectBoxData = 'Delete'
                                                }
                                                elseif($EventData -eq 3){
                                                    $Session:TaskSetTypeIdSelectBoxData = 'Update'
                                                }
                                            } -DefaultValue $RecoveryDataTaskSetTypeIdSelectBox
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDDynamic -Id 'InterfaceBlockPointDynamicId' -Content {
                                $Cache:InterfaceBlockDatabaseSC|iex
                                if($Session:TaskMethodTypeIdSelectBoxData -eq 'Throw'){
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Startpoint' -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDStyle -Content {
                                                    $Session:InterfaceBlocksStartPointIdSelectBoxData = $RecoveryData.InterfaceBlocksStartPointIdSelectBox
                                                    New-UDSelect -Id 'InterfaceBlocksStartPointIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name ' ' -Value 0
                                                        foreach ($ServerBlock in $Cache:ServerBlockData) {
                                                            $ServerBlockTerminalId       = (($ServerBlock.Selections).TerminalProvider).Id
                                                            $ServerBlockTerminalProvider = (($ServerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ServerBlockTerminalProvider -and '' -ne $ServerBlockTerminalProvider -and 'null' -ne $ServerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ServerBlockTerminalProvider"+' | '+'Id: '+"$ServerBlockTerminalId") -Value $ServerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($ComponentBlock in $Cache:ComponentsBlockData) {
                                                            $ComponentBlockTerminalId       = (($ComponentBlock.Selections).TerminalProvider).Id
                                                            $ComponentBlockTerminalProvider = (($ComponentBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ComponentBlockTerminalProvider -and '' -ne $ComponentBlockTerminalProvider -and 'null' -ne $ComponentBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ComponentBlockTerminalProvider"+' | '+'Id: '+"$ComponentBlockTerminalId") -Value $ComponentBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaControllerBlock in $Cache:PsucaControllerBlockData) {
                                                            $PsucaControllerBlockTerminalId       = (($PsucaControllerBlock.Selections).TerminalProvider).Id
                                                            $PsucaControllerBlockTerminalProvider = (($PsucaControllerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaControllerBlockTerminalProvider -and '' -ne $PsucaControllerBlockTerminalProvider -and 'null' -ne $PsucaControllerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaControllerBlockTerminalProvider"+' | '+'Id: '+"$PsucaControllerBlockTerminalId") -Value $PsucaControllerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaDashboardBlock in $Cache:PsucaDashboardBlockData) {
                                                            $PsucaDashboardBlockTerminalId       = (($PsucaDashboardBlock.Selections).TerminalProvider).Id
                                                            $PsucaDashboardBlockTerminalProvider = (($PsucaDashboardBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaDashboardBlockTerminalProvider -and '' -ne $PsucaDashboardBlockTerminalProvider -and 'null' -ne $PsucaDashboardBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaDashboardBlockTerminalProvider"+' | '+'Id: '+"$PsucaDashboardBlockTerminalId") -Value $PsucaDashboardBlockTerminalId
                                                            }
                                                        }
                                                    } -OnChange {
                                                        if($EventData -eq 0){
                                                            $Session:InterfaceBlocksStartPointIdSelectBoxData = 'null'
                                                        }
                                                        else{
                                                            $Session:InterfaceBlocksStartPointIdSelectBoxData = $EventData
                                                        }
                                                    } -DefaultValue $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                } -Style '
                                                    label + .css-1ntzb12 {
                                                        margin-top: 0px;
                                                    }
                                                '
                                            }
                                        }
                                    }
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Endpoint' -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDStyle -Content {
                                                    $Session:InterfaceBlocksEndPointIdSelectBoxData = $RecoveryData.InterfaceBlocksEndPointIdSelectBox
                                                    New-UDSelect -Id 'InterfaceBlocksEndPointIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name ' ' -Value 0
                                                        foreach ($ServerBlock in $Cache:ServerBlockData) {
                                                            $ServerBlockServiceId       = (($ServerBlock.Selections).ServiceProvider).Id
                                                            $ServerBlockServiceProvider = (($ServerBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $ServerBlockServiceProvider -and '' -ne $ServerBlockServiceProvider -and 'null' -ne $ServerBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$ServerBlockServiceProvider"+' | '+'Id: '+"$ServerBlockServiceId") -Value $ServerBlockServiceId
                                                            }
                                                            $ServerBlockTerminalId       = (($ServerBlock.Selections).TerminalProvider).Id
                                                            $ServerBlockTerminalProvider = (($ServerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ServerBlockTerminalProvider -and '' -ne $ServerBlockTerminalProvider -and 'null' -ne $ServerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ServerBlockTerminalProvider"+' | '+'Id: '+"$ServerBlockTerminalId") -Value $ServerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($ComponentBlock in $Cache:ComponentsBlockData) {
                                                            $ComponentBlockServiceId       = (($ComponentBlock.Selections).ServiceProvider).Id
                                                            $ComponentBlockServiceProvider = (($ComponentBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $ComponentBlockServiceProvider -and '' -ne $ComponentBlockServiceProvider -and 'null' -ne $ComponentBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$ComponentBlockServiceProvider"+' | '+'Id: '+"$ComponentBlockServiceId") -Value $ComponentBlockServiceId
                                                            }
                                                            $ComponentBlockTerminalId       = (($ComponentBlock.Selections).TerminalProvider).Id
                                                            $ComponentBlockTerminalProvider = (($ComponentBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ComponentBlockTerminalProvider -and '' -ne $ComponentBlockTerminalProvider -and 'null' -ne $ComponentBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ComponentBlockTerminalProvider"+' | '+'Id: '+"$ComponentBlockTerminalId") -Value $ComponentBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaControllerBlock in $Cache:PsucaControllerBlockData) {
                                                            $PsucaControllerBlockServiceId       = (($PsucaControllerBlock.Selections).ServiceProvider).Id
                                                            $PsucaControllerBlockServiceProvider = (($PsucaControllerBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $PsucaControllerBlockServiceProvider -and '' -ne $PsucaControllerBlockServiceProvider -and 'null' -ne $PsucaControllerBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$PsucaControllerBlockServiceProvider"+' | '+'Id: '+"$PsucaControllerBlockServiceId") -Value $PsucaControllerBlockServiceId
                                                            }
                                                            $PsucaControllerBlockTerminalId       = (($PsucaControllerBlock.Selections).TerminalProvider).Id
                                                            $PsucaControllerBlockTerminalProvider = (($PsucaControllerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaControllerBlockTerminalProvider -and '' -ne $PsucaControllerBlockTerminalProvider -and 'null' -ne $PsucaControllerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaControllerBlockTerminalProvider"+' | '+'Id: '+"$PsucaControllerBlockTerminalId") -Value $PsucaControllerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaDashboardBlock in $Cache:PsucaDashboardBlockData) {
                                                            $PsucaDashboardBlockServiceId       = (($PsucaDashboardBlock.Selections).ServiceProvider).Id
                                                            $PsucaDashboardBlockServiceProvider = (($PsucaDashboardBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $PsucaDashboardBlockServiceProvider -and '' -ne $PsucaDashboardBlockServiceProvider -and 'null' -ne $PsucaDashboardBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$PsucaDashboardBlockServiceProvider"+' | '+'Id: '+"$PsucaDashboardBlockServiceId") -Value $PsucaDashboardBlockServiceId
                                                            }
                                                            $PsucaDashboardBlockTerminalId       = (($PsucaDashboardBlock.Selections).TerminalProvider).Id
                                                            $PsucaDashboardBlockTerminalProvider = (($PsucaDashboardBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaDashboardBlockTerminalProvider -and '' -ne $PsucaDashboardBlockTerminalProvider -and 'null' -ne $PsucaDashboardBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaDashboardBlockTerminalProvider"+' | '+'Id: '+"$PsucaDashboardBlockTerminalId") -Value $PsucaDashboardBlockTerminalId
                                                            }
                                                        }
                                                    } -OnChange {
                                                        if($EventData -eq 0){
                                                            $Session:InterfaceBlocksEndPointIdSelectBoxData = 'null'
                                                        }
                                                        else{
                                                            $Session:InterfaceBlocksEndPointIdSelectBoxData = $EventData
                                                        }
                                                    } -DefaultValue $Session:InterfaceBlocksEndPointIdSelectBoxData
                                                } -Style '
                                                    label + .css-1ntzb12 {
                                                        margin-top: 0px;
                                                    }
                                                '
                                            }
                                        }
                                    }
                                }
                                elseif($Session:TaskMethodTypeIdSelectBoxData -eq 'Catch'){
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Startpoint' -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDStyle -Content {
                                                    $Session:InterfaceBlocksStartPointIdSelectBoxData = $RecoveryData.InterfaceBlocksStartPointIdSelectBox
                                                    New-UDSelect -Id 'InterfaceBlocksStartPointIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name ' ' -Value 0
                                                        foreach ($ServerBlock in $Cache:ServerBlockData) {
                                                            $ServerBlockServiceId       = (($ServerBlock.Selections).ServiceProvider).Id
                                                            $ServerBlockServiceProvider = (($ServerBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $ServerBlockServiceProvider -and '' -ne $ServerBlockServiceProvider -and 'null' -ne $ServerBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$ServerBlockServiceProvider"+' | '+'Id: '+"$ServerBlockServiceId") -Value $ServerBlockServiceId
                                                            }
                                                            $ServerBlockTerminalId       = (($ServerBlock.Selections).TerminalProvider).Id
                                                            $ServerBlockTerminalProvider = (($ServerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ServerBlockTerminalProvider -and '' -ne $ServerBlockTerminalProvider -and 'null' -ne $ServerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ServerBlockTerminalProvider"+' | '+'Id: '+"$ServerBlockTerminalId") -Value $ServerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($ComponentBlock in $Cache:ComponentsBlockData) {
                                                            $ComponentBlockServiceId       = (($ComponentBlock.Selections).ServiceProvider).Id
                                                            $ComponentBlockServiceProvider = (($ComponentBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $ComponentBlockServiceProvider -and '' -ne $ComponentBlockServiceProvider -and 'null' -ne $ComponentBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$ComponentBlockServiceProvider"+' | '+'Id: '+"$ComponentBlockServiceId") -Value $ComponentBlockServiceId
                                                            }
                                                            $ComponentBlockTerminalId       = (($ComponentBlock.Selections).TerminalProvider).Id
                                                            $ComponentBlockTerminalProvider = (($ComponentBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ComponentBlockTerminalProvider -and '' -ne $ComponentBlockTerminalProvider -and 'null' -ne $ComponentBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ComponentBlockTerminalProvider"+' | '+'Id: '+"$ComponentBlockTerminalId") -Value $ComponentBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaControllerBlock in $Cache:PsucaControllerBlockData) {
                                                            $PsucaControllerBlockServiceId       = (($PsucaControllerBlock.Selections).ServiceProvider).Id
                                                            $PsucaControllerBlockServiceProvider = (($PsucaControllerBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $PsucaControllerBlockServiceProvider -and '' -ne $PsucaControllerBlockServiceProvider -and 'null' -ne $PsucaControllerBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$PsucaControllerBlockServiceProvider"+' | '+'Id: '+"$PsucaControllerBlockServiceId") -Value $PsucaControllerBlockServiceId
                                                            }
                                                            $PsucaControllerBlockTerminalId       = (($PsucaControllerBlock.Selections).TerminalProvider).Id
                                                            $PsucaControllerBlockTerminalProvider = (($PsucaControllerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaControllerBlockTerminalProvider -and '' -ne $PsucaControllerBlockTerminalProvider -and 'null' -ne $PsucaControllerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaControllerBlockTerminalProvider"+' | '+'Id: '+"$PsucaControllerBlockTerminalId") -Value $PsucaControllerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaDashboardBlock in $Cache:PsucaDashboardBlockData) {
                                                            $PsucaDashboardBlockServiceId       = (($PsucaDashboardBlock.Selections).ServiceProvider).Id
                                                            $PsucaDashboardBlockServiceProvider = (($PsucaDashboardBlock.Selections).ServiceProvider).Name
                                                            if($null -ne $PsucaDashboardBlockServiceProvider -and '' -ne $PsucaDashboardBlockServiceProvider -and 'null' -ne $PsucaDashboardBlockServiceProvider){
                                                                New-UDSelectOption -Name ('Service: '+"$PsucaDashboardBlockServiceProvider"+' | '+'Id: '+"$PsucaDashboardBlockServiceId") -Value $PsucaDashboardBlockServiceId
                                                            }
                                                            $PsucaDashboardBlockTerminalId       = (($PsucaDashboardBlock.Selections).TerminalProvider).Id
                                                            $PsucaDashboardBlockTerminalProvider = (($PsucaDashboardBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaDashboardBlockTerminalProvider -and '' -ne $PsucaDashboardBlockTerminalProvider -and 'null' -ne $PsucaDashboardBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaDashboardBlockTerminalProvider"+' | '+'Id: '+"$PsucaDashboardBlockTerminalId") -Value $PsucaDashboardBlockTerminalId
                                                            }
                                                        }
                                                    } -OnChange {
                                                        if($EventData -eq 0){
                                                            $Session:InterfaceBlocksStartPointIdSelectBoxData = 'null'
                                                        }
                                                        else{
                                                            $Session:InterfaceBlocksStartPointIdSelectBoxData = $EventData
                                                        }
                                                    } -DefaultValue $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                } -Style '
                                                    label + .css-1ntzb12 {
                                                        margin-top: 0px;
                                                    }
                                                '
                                            }
                                        }
                                    }
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Endpoint' -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDStyle -Content {
                                                    $Session:InterfaceBlocksEndPointIdSelectBoxData = $RecoveryData.InterfaceBlocksEndPointIdSelectBox
                                                    New-UDSelect -Id 'InterfaceBlocksEndPointIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                        New-UDSelectOption -Name ' ' -Value 0
                                                        foreach ($ServerBlock in $Cache:ServerBlockData) {
                                                            $ServerBlockTerminalId       = (($ServerBlock.Selections).TerminalProvider).Id
                                                            $ServerBlockTerminalProvider = (($ServerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ServerBlockTerminalProvider -and '' -ne $ServerBlockTerminalProvider -and 'null' -ne $ServerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ServerBlockTerminalProvider"+' | '+'Id: '+"$ServerBlockTerminalId") -Value $ServerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($ComponentBlock in $Cache:ComponentsBlockData) {
                                                            $ComponentBlockTerminalId       = (($ComponentBlock.Selections).TerminalProvider).Id
                                                            $ComponentBlockTerminalProvider = (($ComponentBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $ComponentBlockTerminalProvider -and '' -ne $ComponentBlockTerminalProvider -and 'null' -ne $ComponentBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$ComponentBlockTerminalProvider"+' | '+'Id: '+"$ComponentBlockTerminalId") -Value $ComponentBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaControllerBlock in $Cache:PsucaControllerBlockData) {
                                                            $PsucaControllerBlockTerminalId       = (($PsucaControllerBlock.Selections).TerminalProvider).Id
                                                            $PsucaControllerBlockTerminalProvider = (($PsucaControllerBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaControllerBlockTerminalProvider -and '' -ne $PsucaControllerBlockTerminalProvider -and 'null' -ne $PsucaControllerBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaControllerBlockTerminalProvider"+' | '+'Id: '+"$PsucaControllerBlockTerminalId") -Value $PsucaControllerBlockTerminalId
                                                            }
                                                        }
                                                        foreach ($PsucaDashboardBlock in $Cache:PsucaDashboardBlockData) {
                                                            $PsucaDashboardBlockTerminalId       = (($PsucaDashboardBlock.Selections).TerminalProvider).Id
                                                            $PsucaDashboardBlockTerminalProvider = (($PsucaDashboardBlock.Selections).TerminalProvider).Name
                                                            if($null -ne $PsucaDashboardBlockTerminalProvider -and '' -ne $PsucaDashboardBlockTerminalProvider -and 'null' -ne $PsucaDashboardBlockTerminalProvider){
                                                                New-UDSelectOption -Name ('Terminal: '+"$PsucaDashboardBlockTerminalProvider"+' | '+'Id: '+"$PsucaDashboardBlockTerminalId") -Value $PsucaDashboardBlockTerminalId
                                                            }
                                                        }
                                                    } -OnChange {
                                                        if($EventData -eq 0){
                                                            $Session:InterfaceBlocksEndPointIdSelectBoxData = 'null'
                                                        }
                                                        else{
                                                            $Session:InterfaceBlocksEndPointIdSelectBoxData = $EventData
                                                        }
                                                    } -DefaultValue $Session:InterfaceBlocksEndPointIdSelectBoxData
                                                } -Style '
                                                    label + .css-1ntzb12 {
                                                        margin-top: 0px;
                                                    }
                                                '
                                            }
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Entity Group' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:EntiyGroupIdSelectBoxData = $RecoveryData.EntiyGroupIdSelectBox
                                            New-UDSelect -Id 'EntiyGroupIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name ' ' -Value 0
                                                if(Test-Path $Cache:EntityCenterModelDatabaseListPath){
                                                    $Cache:EntityCenterModelDatabaseSC|iex
                                                    $EntityGroupList = $Cache:EntityCenterModelDatabaseGroupList
                                                    if($EntityGroupList){
                                                        foreach ($Group in $EntityGroupList) {
                                                            New-UDSelectOption -Name $Group.DirName -Value $Group.DirName
                                                        }
                                                    }
                                                }
                                            } -OnChange {
                                                if($EventData -eq 0){
                                                    $Session:EntiyGroupIdSelectBoxData = 'null'
                                                }
                                                else{
                                                    $Session:EntiyGroupIdSelectBoxData = $EventData
                                                }
                                                $Session:EntiyGroupSelectedItem = $EventData
                                                Sync-UDElement -Id 'EntiyModelDynamicId'
                                                Sync-UDElement -Id 'EntiyModelAttributeDynamicId'
                                            } -DefaultValue $Session:EntiyGroupIdSelectBoxData
                                            $Session:EntiyGroupSelectedItem = $Session:EntiyGroupIdSelectBoxData
                                            Sync-UDElement -Id 'EntiyModelDynamicId'
                                            Sync-UDElement -Id 'EntiyModelAttributeDynamicId'
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Entity Model' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDDynamic -Id 'EntiyModelDynamicId' -Content {
                                            New-UDStyle -Content {
                                                $Session:EntiyModelIdSelectBoxData = $RecoveryData.EntiyModelIdSelectBox
                                                New-UDSelect -Id 'EntiyModelIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                    New-UDSelectOption -Name ' ' -Value 0
                                                    if(Test-Path $Cache:EntityCenterModelDatabaseListPath){
                                                        if($Session:EntiyGroupSelectedItem -ne 0){
                                                            $EntityModelList = $Cache:EntityCenterModelDatabaseList
                                                            if($EntityModelList){
                                                                foreach ($Model in $EntityModelList) {
                                                                    if($Model.DirName -eq $Session:EntiyGroupSelectedItem){
                                                                        New-UDSelectOption -Name $Model.Dataset -Value $Model.Dataset
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } -OnChange {
                                                    if($EventData -eq 0){
                                                        $Session:EntiyModelIdSelectBoxData = 'null'
                                                    }
                                                    else{
                                                        $Session:EntiyModelIdSelectBoxData = $EventData
                                                    }
                                                    $Session:EntiyModelSelectedItem = $EventData
                                                    Sync-UDElement -Id 'EntiyModelAttributeDynamicId'
                                                } -DefaultValue $Session:EntiyModelIdSelectBoxData
                                                $Session:EntiyModelSelectedItem = $Session:EntiyModelIdSelectBoxData
                                                Sync-UDElement -Id 'EntiyModelAttributeDynamicId'
                                            } -Style '
                                                label + .css-1ntzb12 {
                                                    margin-top: 0px;
                                                }
                                            '
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Entity Attribute' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDDynamic -Id 'EntiyModelAttributeDynamicId' -Content {
                                            New-UDStyle -Content {
                                                $Session:EntiyModelAttributeIdSelectBoxData = $RecoveryData.EntiyModelAttributeIdSelectBox
                                                New-UDSelect -Id 'EntiyModelAttributeIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                    New-UDSelectOption -Name ' ' -Value 0
                                                    if(Test-Path $Cache:EntityCenterModelDatabaseListPath){
                                                        if($Session:EntiyGroupSelectedItem -ne 0 -and $Session:EntiyModelSelectedItem -ne 0){
                                                            $EntityModelAttributePath = "$Cache:EntityCenterModelDatabaseListPath"+"$Session:EntiyGroupSelectedItem"+'\'+"$Session:EntiyModelSelectedItem"+'\'+'GridItemListPSCO'+'.json'
                                                            $EntityModelAttributeGc   = gc $EntityModelAttributePath
                                                            if($null -ne $EntityModelAttributeGc -or 'null' -ne $EntityModelAttributeGc -or '' -ne $EntityModelAttributeGc){
                                                                $EntityModelAttributeJson = $EntityModelAttributeGc | ConvertFrom-Json -Depth 100
                                                                New-UDSelectOption -Name 'All Attributes' -Value 'All'
                                                                foreach ($Attribute in $EntityModelAttributeJson) {
                                                                    New-UDSelectOption -Name $Attribute.Name -Value $Attribute.Name
                                                                }
                                                            }
                                                        }
                                                    }
                                                } -OnChange {
                                                    if($EventData -eq 0){
                                                        $Session:EntiyModelAttributeIdSelectBoxData = 'null'
                                                    }
                                                    else{
                                                        $Session:EntiyModelAttributeIdSelectBoxData = $EventData
                                                    }
                                                } -DefaultValue $Session:EntiyModelAttributeIdSelectBoxData
                                            } -Style '
                                                label + .css-1ntzb12 {
                                                    margin-top: 0px;
                                                }
                                            '
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Start Date' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        
                                            New-UDElement -Tag 'td' -Content {
                                                New-UDTextbox  -Id 'TaskStartDateDayTextBox' -Type text -ClassName 'task-center-box-task-day-text' -Label 'Day' -Variant outlined -Value $RecoveryData.TaskStartDateDayTextBox
                                            }
                                            New-UDElement -Tag 'td' -Content {
                                                New-UDTextbox -Id 'TaskStartDateMonthTextBox' -Type text -ClassName 'task-center-box-task-month-text' -Label 'Month' -Variant outlined -Value $RecoveryData.TaskStartDateMonthTextBox
                                            }
                                            New-UDElement -Tag 'td' -Content {
                                                New-UDTextbox -Id 'TaskStartDateYearTextBox' -Type text -ClassName 'task-center-box-task-year-text' -Label 'Year' -Variant outlined -Value $RecoveryData.TaskStartDateYearTextBox
                                            }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'End Date' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndDateDayTextBox' -Type text -ClassName 'task-center-box-task-day-text' -Label 'Day' -Variant outlined -Value $RecoveryData.TaskEndDateDayTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndDateMonthTextBox' -Type text -ClassName 'task-center-box-task-month-text' -Label 'Month' -Variant outlined -Value $RecoveryData.TaskEndDateMonthTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndDateYearTextBox' -Type text -ClassName 'task-center-box-task-year-text' -Label 'Year' -Variant outlined -Value $RecoveryData.TaskEndDateYearTextBox
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Start Time' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskStartTimeHourTextBox' -Type text -ClassName 'task-center-box-task-time-hour-text' -Label 'Hour' -Variant outlined -Value $RecoveryData.TaskStartTimeHourTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskStartTimeMinuteTextBox' -Type text -ClassName 'task-center-box-task-time-minute-text' -Label 'Minute' -Variant outlined -Value $RecoveryData.TaskStartTimeMinuteTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskStartTimeSecondTextBox' -Type text -ClassName 'task-center-box-task-time-second-text' -Label 'Second' -Variant outlined -Value $RecoveryData.TaskStartTimeSecondTextBox
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'End Time' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndTimeHourTextBox' -Type text -ClassName 'task-center-box-task-time-hour-text' -Label 'Hour' -Variant outlined -Value $RecoveryData.TaskEndTimeHourTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndTimeMinuteTextBox' -Type text -ClassName 'task-center-box-task-time-minute-text' -Label 'Minute' -Variant outlined -Value $RecoveryData.TaskEndTimeMinuteTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskEndTimeSecondTextBox' -Type text -ClassName 'task-center-box-task-time-second-text' -Label 'Second' -Variant outlined -Value $RecoveryData.TaskEndTimeSecondTextBox
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Limit Time' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskLimitTimeHourTextBox' -Type text -ClassName 'task-center-box-task-time-hour-text' -Label 'Hour' -Variant outlined -Value $RecoveryData.TaskLimitTimeHourTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskLimitTimeMinuteTextBox' -Type text -ClassName 'task-center-box-task-time-minute-text' -Label 'Minute' -Variant outlined -Value $RecoveryData.TaskLimitTimeMinuteTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskLimitTimeSecondTextBox' -Type text -ClassName 'task-center-box-task-time-second-text' -Label 'Second' -Variant outlined -Value $RecoveryData.TaskLimitTimeSecondTextBox
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Repetition' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskRepetitionTimeHourTextBox' -Type text -ClassName 'task-center-box-task-time-hour-text' -Label 'Hour' -Variant outlined -Value $RecoveryData.TaskRepetitionTimeHourTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskRepetitionTimeMinuteTextBox' -Type text -ClassName 'task-center-box-task-time-minute-text' -Label 'Minute' -Variant outlined -Value $RecoveryData.TaskRepetitionTimeMinuteTextBox
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDTextbox -Id 'TaskRepetitionTimeSecondTextBox' -Type text -ClassName 'task-center-box-task-time-second-text' -Label 'Second' -Variant outlined -Value $RecoveryData.TaskRepetitionTimeSecondTextBox
                                        }
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Window Style' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskWindowStyleIdSelectBoxData = $RecoveryData.TaskWindowStyleIdSelectBox
                                            if($Session:TaskWindowStyleIdSelectBoxData -eq 'Hidden'){
                                                $RecoveryDataTaskWindowStyleIdSelectBox = 1
                                            }
                                            elseif($Session:TaskWindowStyleIdSelectBoxData -eq 'Normal'){
                                                $RecoveryDataTaskWindowStyleIdSelectBox = 2
                                            }
                                            New-UDSelect -Id 'TaskWindowStyleIdSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Hidden' -Value 1
                                                New-UDSelectOption -Name 'Normal' -Value 2
                                            } -OnChange {
                                                if($EventData -eq 1){
                                                    $Session:TaskWindowStyleIdSelectBoxData = 'Hidden'
                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskWindowStyleIdSelectBoxData = 'Normal'
                                                }
                                            } -DefaultValue $RecoveryDataTaskWindowStyleIdSelectBox
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Script type' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            $Session:TaskSelectScriptTypeBoxData = $RecoveryData.TaskSelectScriptTypeBox
                                            
                                            New-UDSelect -Id 'TaskSelectScriptTypeBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'New Script' -Value 1
                                                New-UDSelectOption -Name 'Exist Script' -Value 2
                                            } -OnChange {
                                                Show-UDToast -Message $Cache:GetScriptBlockLanguage
                                                if($EventData -eq 1){
                                                    $Session:TaskSelectScriptTypeBoxData = 'New Script'
                                                    Invoke-UDJavaScript -JavaScript '
                                                    function ScriptTypeBoxnDropdown() {
                                                        document.getElementById("SelectScriptTypeDropdown-WriteNew-recovery").style.display = "block";
                                                        document.getElementById("SelectScriptTypeDropdown-ScriptName-recovery").style.display = "block";
                                                        document.getElementById("SelectScriptTypeDropdown-SelectExist-1-recovery").style.display = "none";
                                                        document.getElementById("SelectScriptTypeDropdown-SelectExist-2-recovery").style.display = "none";
                                                    }
                                                    ScriptTypeBoxnDropdown();
                                                '
                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'

                                                }
                                                elseif($EventData -eq 2){
                                                    $Session:TaskSelectScriptTypeBoxData = 'Exist Script'
                                                    Invoke-UDJavaScript -JavaScript '
                                                    function ScriptTypeBoxnDropdown() {
                                                        document.getElementById("SelectScriptTypeDropdown-WriteNew-recovery").style.display = "none";
                                                        document.getElementById("SelectScriptTypeDropdown-ScriptName-recovery").style.display = "none";
                                                        document.getElementById("SelectScriptTypeDropdown-SelectExist-1-recovery").style.display = "block";
                                                        document.getElementById("SelectScriptTypeDropdown-SelectExist-2-recovery").style.display = "block";
                                                    }
                                                    ScriptTypeBoxnDropdown();
                                                '
                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'

                                                }
                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                $Session:ChangeScriptPathCondition = $true
                                                $Session:SelectedTaskScriptPath = 'null'
                                                                                                
                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'

                                                Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                
                                                Sync-UDElement -Id 'SelectScriptFilePathDynamic'                                                
                                            } -DefaultValue 2
                                            Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                            Sync-UDElement -Id 'SelectScriptFilePathDynamic'
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }        
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Language' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDStyle -Content {
                                            if($Session:RecoverySelectScriptLanguageFirstRun -eq 1){
                                                $Cache:GetScriptBlockLanguage = $RecoveryData.TaskScriptblockLanguageSelectBox     
                                                $Session:RecoverySelectScriptLanguageFirstRun++
                                            }
                                            else{
                                                $Cache:GetScriptBlockLanguage = 'Javascript'
                                            }
                                            New-UDSelect -Id 'TaskScriptblockLanguageSelectBox' -ClassName 'task-center-box-task-type-select' -Option {
                                                New-UDSelectOption -Name 'Javascript' -Value 'Javascript'
                                                New-UDSelectOption -Name 'Powershell' -Value 'Powershell'
                                                New-UDSelectOption -Name 'Python' -Value 'Python'
                                            } -OnChange {
                                                $Session:SelectedTaskRow = $null
                                                $Session:TaskScriptPathSelectResult = $null
                                                $Cache:GetScriptBlockLanguage = $EventData
                                                Show-UDToast -Message $Cache:GetScriptBlockLanguage
                                                Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                Sync-UDElement -Id 'SelectScriptFilePathDynamic'

                                                Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptNameDynamicId'
                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'

                                                $Session:SelectedTaskScriptPath = 'null'
                                                Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                

                                                $Session:SelectedTaskScriptFullName = 'null'
                                                if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                }
                                                elseif($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                }
                                            } -DefaultValue $Cache:GetScriptBlockLanguage
                                        } -Style '
                                            label + .css-1ntzb12 {
                                                margin-top: 0px;
                                            }
                                        '
                                    }
                                }
                            }
                        }
                        $Session:RecoveryDataTaskScriptBlockFullName = $RecoveryData.TaskScriptBlockFullName 
                        New-UDElement -id 'ScriptPathTableId' -Tag 'table' -Content {
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Script Path' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                    }
                                }
                                New-UDDynamic -Id 'SelectScriptDirPathDynamicRestart' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDElement -Tag 'tr' -Content {
                                            New-UDStyle -Content {
                                                if($Session:RecoverySelectScriptDirPathFirstRun -eq 1){
                                                    $ScriptRootScript   = ($Session:RecoveryDataTaskScriptBlockFullName -replace '.*\\')
                                                    if($Cache:GetScriptBlockLanguage -eq 'Javascript'){
                                                        $ScriptRootDir      = ($Session:RecoveryDataTaskScriptBlockFullName -replace '.*taskcenter\\scripts\\js\\' -replace $ScriptRootScript)
                                                        $ScriptRootDirClear = $ScriptRootDir -replace '\\'
                                                        if($ScriptRootDirClear -eq ''){
                                                            $Session:TaskScriptPathSelectResult = 'js'
                                                        }
                                                        else{
                                                            $Session:TaskScriptPathSelectResult = $ScriptRootDirClear
                                                        }
                                                    }
                                                    elseif($Cache:GetScriptBlockLanguage -eq 'Powershell'){
                                                        $ScriptRootDir      = ($Session:RecoveryDataTaskScriptBlockFullName -replace '.*taskcenter\\scripts\\ps\\' -replace $ScriptRootScript)
                                                        $ScriptRootDirClear = $ScriptRootDir -replace '\\'
                                                        if($ScriptRootDirClear -eq ''){
                                                            $Session:TaskScriptPathSelectResult = 'ps'
                                                        }
                                                        else{
                                                            $Session:TaskScriptPathSelectResult = $ScriptRootDirClear
                                                        }
                                                    }
                                                    elseif($Cache:GetScriptBlockLanguage -eq 'Python'){
                                                        $ScriptRootDir      = ($Session:RecoveryDataTaskScriptBlockFullName -replace '.*taskcenter\\scripts\\py\\' -replace $ScriptRootScript)
                                                        $ScriptRootDirClear = $ScriptRootDir -replace '\\'
                                                        if($ScriptRootDirClear -eq ''){
                                                            $Session:TaskScriptPathSelectResult = 'py'
                                                        }
                                                        else{
                                                            $Session:TaskScriptPathSelectResult = $ScriptRootDirClear
                                                        }
                                                    }
                                                    $Session:RecoverySelectScriptDirPathFirstRun++
                                                }
                                                else{
                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                }
                                                New-UDDynamic -Id 'SelectScriptDirPathDynamic' -Content {
                                                    $Session:SelectScriptDirPathSC = {
                                                        $GetLanguage = $Cache:GetScriptBlockLanguage
                                                        if($GetLanguage -eq 'Javascript'){
                                                            if($Cache:TaskScriptDataPathJS){
                                                                $Session:GetSelectScriptFilePathPS = $null
                                                                $Session:GetSelectScriptFilePathPY = $null
                                                                New-UDSelect -Id 'TaskScriptPathSelectBox-1-ExistScript' -ClassName 'task-center-box-task-type-select' -DefaultValue $Session:TaskScriptPathSelectResult -Option {
                                                                    New-UDSelectOption -Name 'Default' -Value 'Default'
                                                                    foreach ($JSItemDir in $Cache:TaskScriptDataSaveJS) {
                                                                        $JSItemDirName = $JSItemDir.Dir
                                                                        if($JSItemDirName -eq 'Default'){}
                                                                        else{
                                                                            New-UDSelectOption -Name $JSItemDirName -Value $JSItemDirName
                                                                        }
                                                                    }
                                                                } -OnChange {
                                                                    $Session:SelectedTaskRow = $null
                                                                    $Session:TaskScriptPathSelectResult = $EventData
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Start-Sleep -Milliseconds 500
                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                    
    
                                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                                    }
                                                                    elseif($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'ERROR DIR'
                                                            }
                                                        }
                                                        elseif($GetLanguage -eq 'Powershell'){
                                                            if($Cache:TaskScriptDataPathPS){
                                                                $Session:GetSelectScriptFilePathJS = $null
                                                                $Session:GetSelectScriptFilePathPY = $null
                                                                New-UDSelect -Id 'TaskScriptPathSelectBox-2-ExistScript' -ClassName 'task-center-box-task-type-select' -DefaultValue $Session:TaskScriptPathSelectResult -Option {
                                                                    New-UDSelectOption -Name 'Default' -Value 'Default'
                                                                    foreach ($PSItemDir in $Cache:TaskScriptDataSavePS) {
                                                                        $PSItemDirName = $PSItemDir.Dir
                                                                        if($PSItemDirName -eq 'Default'){}
                                                                        else{
                                                                            New-UDSelectOption -Name $PSItemDirName -Value $PSItemDirName
                                                                        }
                                                                    }
                                                                } -OnChange {
                                                                    $Session:SelectedTaskRow = $null
                                                                    $Session:TaskScriptPathSelectResult = $EventData
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Start-Sleep -Milliseconds 500
                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                    
    
                                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                                    }
                                                                    elseif($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'ERROR DIR'
                                                            }
                                                        }
                                                        elseif($GetLanguage -eq 'Python'){
                                                            if($Cache:TaskScriptDataPathPY){
                                                                $Session:GetSelectScriptFilePathJS = $null
                                                                $Session:GetSelectScriptFilePathPS = $null
                                                                New-UDSelect -Id 'TaskScriptPathSelectBox-3-ExistScript' -ClassName 'task-center-box-task-type-select' -DefaultValue $Session:TaskScriptPathSelectResult -Option {
                                                                    New-UDSelectOption -Name 'Default' -Value 'Default'
                                                                    foreach ($PYItemDir in $Cache:TaskScriptDataSavePY) {
                                                                        $PYItemDirName = $PYItemDir.Dir
                                                                        if($PYItemDirName -eq 'Default'){}
                                                                        else{
                                                                            New-UDSelectOption -Name $PYItemDirName -Value $PYItemDirName
                                                                        }
                                                                    }
                                                                } -OnChange {
                                                                    $Session:SelectedTaskRow = $null
                                                                    $Session:TaskScriptPathSelectResult = $EventData
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Start-Sleep -Milliseconds 500
                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                    
    
                                                                    $Session:SelectedTaskScriptFullName = 'null'
                                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                                                    }
                                                                    elseif($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                                        Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'ERROR DIR'
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'LANGUAGE ERROR'
                                                        }
                                                    
                                                    }
                                                    $Session:SelectScriptDirPathSC|iex
                                                }
                                            } -Style '
                                                label + .css-1ntzb12 {
                                                    margin-top: 0px;
                                                }
                                            '
                                        }
                                    }
                                }
                            }
                        }
                        New-UDDynamic -Id 'SelectScriptTypeDropdown-ScriptNameDynamicId' -Content {
                            New-UDElement -Id 'SelectScriptTypeDropdown-ScriptName-recovery' -Tag 'table' -Content {
                                New-UDDynamic -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Script Name' -ClassName 'task-center-box-inner-title-script-name' -Style @{width='100px'}
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTextbox -Id 'ScriptNameIdTextBox' -Type text -ClassName 'task-center-box-script-name-text'
                                            }
                                        }
                                    }
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text 'Script Local' -ClassName 'task-center-box-inner-title-script-name' -Style @{width='100px'}
                                            }
                                        }
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text $Session:SelectedTaskScriptPath -ClassName 'task-center-box-inner-title-script-name'
                                            }
                                        }
                                    }
                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript'
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDElement -Tag 'tr' -Content {
                                            New-UDTypography -Text 'Select script' -ClassName 'task-center-box-inner-title'
                                        }
                                    }
                                    New-UDDynamic -Id 'SelectedTaskScriptBlockFullNameDynamicIdNewScript' -Content {
                                        if($Session:RecoverySelectScriptFullNamePathFirstRunNewScript -eq 1){
                                            $Session:SelectedTaskScriptFullName = $Session:RecoveryDataTaskScriptBlockFullName
                                            $Session:RecoverySelectScriptFullNamePathFirstRunNewScript++
                                        }
                                        else{
                                            if('null' -eq $Session:SelectedTaskScriptPath){
                                                $Session:SelectedTaskScriptFullName = 'null'
                                            }
                                            else{
                                                $GetLanguage = $Cache:GetScriptBlockLanguage
                                                if($GetLanguage -eq 'Javascript'){
                                                    if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                        $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathJS"+($Session:SelectedTaskScriptPath -replace '.*js\\')
                                                    }
                                                    else{
                                                        $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathJS"+"$Session:SelectedTaskScriptPath"
                                                    }
                                                }
                                                elseif($GetLanguage -eq 'Powershell'){
                                                    if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                        $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathPS"+($Session:SelectedTaskScriptPath -replace '.*ps\\')
                                                    }
                                                    else{
                                                        $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathPS"+"$Session:SelectedTaskScriptPath"
                                                    }
                                                }
                                                elseif($GetLanguage -eq 'Python'){
                                                    if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                        $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathPY"+($Session:SelectedTaskScriptPath -replace '.*py\\')
                                                    }
                                                    else{
                                                        $Session:SelectedTaskScriptFullName = "$Cache:TaskScriptDataPathPY"+"$Session:SelectedTaskScriptPath"
                                                    }
                                                }
                                            }
                                        }                                        
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text $Session:SelectedTaskScriptFullName -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        New-UDElement -id 'SelectScriptTypeDropdown-WriteNew-recovery' -Tag 'table' -Content {
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDElement -Tag 'tr' -Content {
                                        New-UDTypography -Text 'Code Editor' -ClassName 'task-center-box-inner-title'
                                    }
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDButton -Text 'Open Code Editor' -OnClick {

                                        $Session:GetRecoveryEditorCodeCondition = $null
                                        $Session:RecoveryEditorLanguage         = $null
                                        $Session:RecoveryEditorCode             = $null
                                        $GetEditorLanguage = $Cache:GetScriptBlockLanguage

                                        $GetScriptName     = (Get-UDElement -Id 'ScriptNameIdTextBox').Value

                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                        $string = $GetScriptName
                                        $SpecialChars = $String -replace $pattern

                                        if($GetEditorLanguage -eq 'Javascript'){
                                            $RootScriptPath = $Cache:TaskScriptDataPathJS
                                            $FileExtension  = '.js'
                                        }
                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                            $RootScriptPath = $Cache:TaskScriptDataPathPS
                                            $FileExtension  = '.ps'
                                        }
                                        elseif($GetEditorLanguage -eq 'Python'){
                                            $RootScriptPath = $Cache:TaskScriptDataPathPY
                                            $FileExtension  = '.py'
                                        }

                                        if($Session:TaskScriptPathSelectResult -eq 'js' -or $Session:TaskScriptPathSelectResult -eq 'ps' -or $Session:TaskScriptPathSelectResult -eq 'py'){
                                            $CreateNewPath = "$RootScriptPath"+""+"$FileExtension"
                                        }
                                        else{
                                            $CreateNewPath = "$RootScriptPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetScriptName"+"$FileExtension"
                                        }

                                        $CodeEditorStandardSC = {
    
                                            if($Session:RecoveryEditorLanguage -and $Session:RecoveryEditorCode){
                                                $GetEditorLanguage                      = $Session:RecoveryEditorLanguage
                                                $Session:GetRecoveryEditorCodeCondition = $true
                                            }
    
                                            if($GetEditorLanguage -eq 'javascript'){
                                                $JavascriptEditorModalSC = {
                                                    Show-UDModal -Header {
                                                    
                                                        $GetScriptName = (Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                        if($null -eq $GetScriptName){
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = 'Example'+'.js'
                                                        }
                                                        else{
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = "$GetScriptName"+'.js'
                                                        }
                                                        New-UDDynamic -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title' -Content {
                                                            New-UDTypography -Text $Session:TaskScriptblockCodeEditorHeaderTitle -Variant subtitle1
                                                        }
                                                    } -Content {
                                                        New-UDElement -Tag 'div' -Content {
                                                            New-UDStyle -Content {
                                                                if($Session:GetRecoveryEditorCodeCondition -eq $true){
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'javascript' -Code $Session:RecoveryEditorCode
                                                                    $Session:RecoveryEditorCode             = $null
                                                                    $Session:RecoveryEditorLanguage         = $null
                                                                    $Session:GetRecoveryEditorCodeCondition = $null
                                                                }
                                                                elseif($Session:GenerateFunctionsDataCondition -eq $true){
                                                                    $Session:GenerateFunctionsDataCondition = $null
                                                                    $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                    $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                    $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                    if(Test-Path $ConfigPath){
                                                                        $ConfigPathGc        = gc $ConfigPath
                                                                        $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                        $ConfigTableNameList = @()
                                                                        if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                            foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                $ConfigTableNameList += $Name
                                                                            }
                                                                        }
                                                                        else{
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                            $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                        }
                                                                        
                                                                        $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                        $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
    
                                                                        # GET GENERATOR
                                                                        if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
    
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'All'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'Selected'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
    
                                                                        # SET GENERATOR
                                                                        if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                            $SetCacheMethod = 'local'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                            $SetCacheMethod = 'psu'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                            $SetCacheMethod = 'sql'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                            $SetCacheMethod = 'terminal'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                            $SetCacheMethod = 'terminal-cachefile'
                                                                        }                                                                        
    
                                                                        if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $SetCacheReturnType = 'All'
                                                                        }
                                                                        elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $SetCacheReturnType = 'Selected'
                                                                        }
    
                                                                        if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                            $SetCacheFunctionType = 'Add'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                            $SetCacheFunctionType = 'Delete'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                            $SetCacheFunctionType = 'Update'
                                                                        }
    
                                                                        
    
                                                                        if($GetFunctions -and $SetFunctions){
                                                                            $CommandScriptBlock = (
@'

'@)
    
                                                                            $CommandList = @()
                                                                            $num         = 0
                                                                            foreach ($Argument in $ArgumentParameterList) {
                                                                                $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                $ImportGetCacheFunctionType = 'Get'
                                                                                $ImportGetCacheMethod       = $GetCacheMethod
                                                                                $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                $ImportGetCachePoint        = $StartPoint
                                                                                $ImportGetMandatoryArgument = $Argument
    
                                                                                $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                $ImportSetCacheMethod       = $SetCacheMethod
                                                                                $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                $ImportSetCachePoint        = $EndPoint
    
                                                                                $ImportFunctionTableName    = $ConfigTableNameList[$num]
    
                                                                                $CommandList += (((((((((((($CommandScriptBlock
                                                                                ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                $num++
                                                                            }
                                                                        }
                                                                        
                                                                        $EditorCodeArrayList  = @()
                                                                        $EditorCodeArrayList += $GetFunctions
                                                                        $EditorCodeArrayList += $SetFunctions
                                                                        $EditorCodeArrayList += $null
                                                                        $EditorCodeArrayList += ''
                                                                        $EditorCodeArrayList += '// COMMAND SCRIPTBLOCK'
                                                                        $EditorCodeArrayList += ''
                                                                        foreach ($Command in $CommandList) {
                                                                            $EditorCodeArrayList += $Command
                                                                        }
                                                                        
                                                                        
                                                                        #[string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
                                                                        [string]$EditorCodeArrayListString = '// The development of the application is not complete for the javascript language'
                                                                        
                                                                    }
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'javascript' -Code $EditorCodeArrayListString
                                                                }
                                                                else{
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'javascript' -Code (
@'
// Javascript
var msg = 'Hello World';
console.log(msg);
'@)    
                                                                }
                                                            } -Style '
                                                            .monaco-editor .overflow-guard {
                                                                position: relative;
                                                                overflow: hidden;
                                                                border: 1px solid gray;
                                                            }
                                                            '
            
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Id 'TaskScriptblockCodeEditorBoxButtons' -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonTestCode' -Text 'Test code' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                $TestOutput = $null
                                                                                Set-Content $Cache:TaskEditorScriptDataPathJS -Value $GetEditorCode
                                                                                $TestOutput = .($Cache:TaskEditorDataExePathNodeJS) $Cache:TaskEditorScriptDataPathJS
                                                                                if($TestOutput){
                                                                                    Show-UDToast -Message $TestOutput -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'null error' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in javascript is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in javascript is not valid' -Duration 5000
                                                                            }                                                                        
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonSaveCode' -Text 'Save code to session' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Set-Content $Cache:TaskEditorScriptRetrieveDataPathJS -Value $GetEditorCode
                                                                                if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathJS ){
                                                                                    Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in javascript is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in javascript is not valid' -Duration 5000
                                                                            }                                                                        
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonRetriveData' -Text 'Retrieve code from session' -OnClick {
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                $GetValidateItemFullNameGci    = gci $Cache:TaskEditorScriptRetrieveDataPathJS
                                                                                $GetValidateItemName           = $GetValidateItemFullNameGci.Name
                                                                                $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                                $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                                $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                                $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                                $SetValidateItemHeadrString    = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title'
                                                                                $GetRetrieveData               = gc $Cache:TaskEditorScriptRetrieveDataPathJS -Raw
                                                                                $GetRetrieveDataToObject       = $GetRetrieveData
                                                                                if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathJS) -and $GetRetrieveData){
                                                                                    $SetRetrieveCode = (Set-UDElement -Id 'TaskScriptblockCodeEditorBox' -Properties @{code = "$GetRetrieveDataToObject"})
                                                                                    Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in javascript is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in javascript is not valid' -Duration 5000
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonCreateScriptFileData' -Text 'Create Script File' -OnClick {
                                                                            $Session:GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            $Session:GetEditorCode     = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            if($GetEditorLanguage -eq 'Javascript' -or $Session:GetEditorLanguage -eq 'Javascript'){
                                                                                $GetScriptPath      = $Session:TaskScriptPathSelectResult
                                                                                if($GetScriptPath -eq 'js'){
                                                                                    $GetScriptPath = $null
                                                                                }
                                                                                else{
                                                                                    $GetScriptPath = "$GetScriptPath"+'\'
                                                                                }
                                                                                $GetNewSaveFileName = "$GetScriptPath"+(Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                                                $GetEditorCode      = $Session:GetEditorCode
                                                                                $GetDirFilePath     = $Cache:TaskScriptDataPathJS
                                                                                $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName"+'.js')
                                                                                if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                    if(Test-Path $CreateFilePath){
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Overwrite script ?'
                                                                                        } -Content {
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                                                    $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                                                    $TaskScriptDataGciJSPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.js'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Save script ?'
                                                                                        } -Content {
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                New-Item -ItemType File $CreateFilePath
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                                                    $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                                                    $TaskScriptDataGciJSPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                                                                    
                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.js'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                }
                                                                            }                                                                            
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonGenerateFunctionsData' -Text 'Generate Functions' -OnClick {
                                                                            $Session:GenerateFunctionsDataCondition = $true
                                                                            $JavascriptEditorModalSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" } -FullScreen
                                                }
                                                $JavascriptEditorModalSC|iex
                                            }
                                            elseif($GetEditorLanguage -eq 'powershell'){
                                                $PowershellEditorModalSC = {
                                                    Show-UDModal -Header {
                                                    
                                                        $GetScriptName = (Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                        if($null -eq $GetScriptName){
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = 'Example'+'.ps1'
                                                        }
                                                        else{
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = "$GetScriptName"+'.ps1'
                                                        }
                                                        New-UDDynamic -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title' -Content {
                                                            New-UDTypography -Text $Session:TaskScriptblockCodeEditorHeaderTitle -Variant subtitle1
                                                        }
                                                    } -Content {
                                                        New-UDElement -Tag 'div' -Content {
                                                            New-UDStyle -Content {
                                                                if($Session:GetRecoveryEditorCodeCondition -eq $true){
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'powershell' -Code $Session:RecoveryEditorCode
                                                                    $Session:RecoveryEditorCode             = $null
                                                                    $Session:RecoveryEditorLanguage         = $null
                                                                    $Session:GetRecoveryEditorCodeCondition = $null
                                                                }
                                                                elseif($Session:GenerateFunctionsDataCondition -eq $true){
                                                                    $Session:GenerateFunctionsDataCondition = $null
                                                                    $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                    $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                    $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                    if(Test-Path $ConfigPath){
                                                                        $ConfigPathGc        = gc $ConfigPath
                                                                        $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                        $ConfigTableNameList = @()
                                                                        if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                            foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                $ConfigTableNameList += $Name
                                                                            }
                                                                        }
                                                                        else{
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                            $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                        }
                                                                        
                                                                        $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                        $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
    
                                                                        # GET GENERATOR
                                                                        if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
    
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'All'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'Selected'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
    
                                                                        # SET GENERATOR
                                                                        if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                            $SetCacheMethod = 'local'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                            $SetCacheMethod = 'psu'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                            $SetCacheMethod = 'sql'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                            $SetCacheMethod = 'terminal'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                            $SetCacheMethod = 'terminal-cachefile'
                                                                        }                                                                        
    
                                                                        if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $SetCacheReturnType = 'All'
                                                                        }
                                                                        elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $SetCacheReturnType = 'Selected'
                                                                        }
    
                                                                        if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                            $SetCacheFunctionType = 'Add'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                            $SetCacheFunctionType = 'Delete'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                            $SetCacheFunctionType = 'Update'
                                                                        }
    
                                                                        
    
                                                                        if($GetFunctions -and $SetFunctions){
                                                                            $CommandScriptBlock = (
@'
$CacheData = importgetcachehashtabledatafromvariable
$Result    = importgetcachefunctiontypefromvariable-PSUCA-importtablenamefromlist -CacheMethod 'importgetcachemethodfromvariable' -CacheType 'importgetcachereturntypefromvariable' -CachePoint 'importgetcachepointfromvariable' -CacheData $CacheData -Argument_importgetmandatorytrueargumentnamefromvariable 0 
if($result -ne $false -and $result -ne 'null'){
    $Collection = $result|ConvertFrom-Json -Depth 100
    $ItemList   = @()
    $ArrayList  = @()
    $ArrayNum   = 0
    foreach ($Item in $Collection) {
        $ItemList  += $Item
        $ArrayList += $ArrayNum
        $ArrayNum++
    }
    if('' -ne $ItemList){
        $CacheData = importsetcachehashtabledatafromvariable
        $Result    = importsetcachefunctiontypefromvariable-PSUCA-importtablenamefromlist -CacheMethod 'importsetcachemethodfromvariable' -CacheType 'importsetcachereturntypefromvariable' -CachePoint 'importsetcachepointfromvariable' -CacheData $CacheData
    }
}
else{
    $Result = $false
}   
'@)
    
                                                                            $CommandList = @()
                                                                            $num         = 0
                                                                            foreach ($Argument in $ArgumentParameterList) {
                                                                                $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                $ImportGetCacheFunctionType = 'Get'
                                                                                $ImportGetCacheMethod       = $GetCacheMethod
                                                                                $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                $ImportGetCachePoint        = $StartPoint
                                                                                $ImportGetMandatoryArgument = $Argument
    
                                                                                $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                $ImportSetCacheMethod       = $SetCacheMethod
                                                                                $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                $ImportSetCachePoint        = $EndPoint
    
                                                                                $ImportFunctionTableName    = $ConfigTableNameList[$num]
    
                                                                                $CommandList += (((((((((((($CommandScriptBlock
                                                                                ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                $num++
                                                                            }
                                                                        }
                                                                        
                                                                        $EditorCodeArrayList  = @()
                                                                        $EditorCodeArrayList += $GetFunctions
                                                                        $EditorCodeArrayList += $SetFunctions
                                                                        $EditorCodeArrayList += $null
                                                                        $EditorCodeArrayList += ''
                                                                        $EditorCodeArrayList += '# COMMAND SCRIPTBLOCK'
                                                                        $EditorCodeArrayList += ''
                                                                        foreach ($Command in $CommandList) {
                                                                            $EditorCodeArrayList += $Command
                                                                        }
                                                                        
                                                                        
                                                                        [string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
    
                                                                        
                                                                    }
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'powershell' -Code $EditorCodeArrayListString
                                                                }
                                                                else{
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'powershell' -Code (
@'
# Powershell
$msg = 'Hello World';
$msg;
'@)    
                                                                }
                                                            } -Style '
                                                            .monaco-editor .overflow-guard {
                                                                position: relative;
                                                                overflow: hidden;
                                                                border: 1px solid gray;
                                                            }
                                                            '
            
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Id 'TaskScriptblockCodeEditorBoxButtons' -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonTestCode' -Text 'Test code' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in powershell is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                $TestOutput = $null
                                                                                Set-Content $Cache:TaskEditorScriptDataPathPS -Value $GetEditorCode
                                                                                $TestOutput = gc $Cache:TaskEditorScriptDataPathPS | iex
                                                                                if($TestOutput){
                                                                                    Show-UDToast -Message $TestOutput -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'null error' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in powershell is not valid' -Duration 5000
                                                                            }                                                                        
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonSaveCode' -Text 'Save code to session' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in powershell is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Set-Content $Cache:TaskEditorScriptRetrieveDataPathPS -Value $GetEditorCode
                                                                                if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathPS ){
                                                                                    Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in powershell is not valid' -Duration 5000
                                                                            }                                                                          
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonRetriveData' -Text 'Retrieve code from session' -OnClick {
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in powershell is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                $GetValidateItemFullNameGci    = gci $Cache:TaskEditorScriptRetrieveDataPathPS
                                                                                $GetValidateItemName           = $GetValidateItemFullNameGci.Name
                                                                                $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                                $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                                $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                                $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                                $SetValidateItemHeadrString    = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title'
                                                                                $GetRetrieveData = gc $Cache:TaskEditorScriptRetrieveDataPathPS -Raw
                                                                                $GetRetrieveDataToObject = $GetRetrieveData
                                                                                if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathPS) -and $GetRetrieveData){
                                                                                    $SetRetrieveCode = (Set-UDElement -Id 'TaskScriptblockCodeEditorBox' -Properties @{code = "$GetRetrieveDataToObject"})
                                                                                    Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Show-UDToast -Message 'Language python in powershell is not valid' -Duration 5000
                                                                            }                                                                          
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonCreateScriptFileData' -Text 'Create Script File' -OnClick {
                                                                            $Session:GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            $Session:GetEditorCode     = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            if($GetEditorLanguage -eq 'Powershell' -or $Session:GetEditorLanguage -eq 'Powershell'){
                                                                                $GetScriptPath      = $Session:TaskScriptPathSelectResult
                                                                                if($GetScriptPath -eq 'ps'){
                                                                                    $GetScriptPath = $null
                                                                                }
                                                                                else{
                                                                                    $GetScriptPath = "$GetScriptPath"+'\'
                                                                                }
                                                                                $GetNewSaveFileName = "$GetScriptPath"+(Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                                                $GetEditorCode      = $Session:GetEditorCode
                                                                                $GetDirFilePath     = $Cache:TaskScriptDataPathPS
                                                                                $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName"+'.ps1')
                                                                                if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                    if(Test-Path $CreateFilePath){
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Overwrite script ?'
                                                                                        } -Content {
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PS1 PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                                                    $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                                                    $TaskScriptDataGciPSPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.ps1'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Save script ?'
                                                                                        } -Content {
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                New-Item -ItemType File $CreateFilePath
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PS1 PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                                                    $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                                                    $TaskScriptDataGciPSPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.ps1'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonGenerateFunctionsData' -Text 'Generate Functions' -OnClick {
                                                                            $Session:GenerateFunctionsDataCondition = $true
                                                                            $PowershellEditorModalSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" } -FullScreen
                                                }
                                                $PowershellEditorModalSC|iex
                                            }
                                            elseif($GetEditorLanguage -eq 'python'){
                                                $PythonEditorModalSC = {
                                                    Show-UDModal -Header {
    
                                                        $GetScriptName = (Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                        if($null -eq $GetScriptName){
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = 'Example'+'.py'
                                                        }
                                                        else{
                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = "$GetScriptName"+'.py'
                                                        }
                                                        New-UDDynamic -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title' -Content {
                                                            New-UDTypography -Text $Session:TaskScriptblockCodeEditorHeaderTitle -Variant subtitle1
                                                        }
                                                    } -Content {
                                                        New-UDElement -Tag 'div' -Content {
                                                            New-UDStyle -Content {
                                                                if($Session:GetRecoveryEditorCodeCondition -eq $true){
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'python' -Code $Session:RecoveryEditorCode
                                                                    $Session:RecoveryEditorCode             = $null
                                                                    $Session:RecoveryEditorLanguage         = $null
                                                                    $Session:GetRecoveryEditorCodeCondition = $null
                                                                }
                                                                elseif($Session:GenerateFunctionsDataCondition -eq $true){
                                                                    $Session:GenerateFunctionsDataCondition = $null
                                                                    $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                    $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                    $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                    if(Test-Path $ConfigPath){
                                                                        $ConfigPathGc        = gc $ConfigPath
                                                                        $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                        $ConfigTableNameList = @()
                                                                        if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                            foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                $ConfigTableNameList += $Name
                                                                            }
                                                                        }
                                                                        else{
                                                                            $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                            $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                        }
                                                                        
                                                                        $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                        $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
    
                                                                        # GET GENERATOR
                                                                        if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
    
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'All'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
                                                                        elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $ArgumentParameterList = @()
                                                                            foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                if($Dataset.ItemType -eq 1){
                                                                                    $ArgumentParameterList += $Dataset.ItemName
                                                                                }
                                                                            }
                                                                            $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                            $GetCacheReturnType   = 'Selected'
                                                                            if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                $GetCacheMethod = 'local'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                $GetCacheMethod = 'psu'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                $GetCacheMethod = 'sql'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                $GetCacheMethod = 'terminal'
                                                                            }
                                                                            elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                $GetCacheMethod = 'terminal-cachefile'
                                                                            }                                                                            
    
                                                                            if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                $GetCacheExpiration = 'use'
                                                                            }
                                                                            elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                $GetCacheExpiration = 'never'
                                                                            }
                                                                        }
    
                                                                        # SET GENERATOR
                                                                        if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                            $SetCacheMethod = 'local'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                            $SetCacheMethod = 'psu'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                            $SetCacheMethod = 'sql'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                            $SetCacheMethod = 'terminal'
                                                                        }
                                                                        elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                            $SetCacheMethod = 'terminal-cachefile'
                                                                        }                                                                        
    
                                                                        if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                            $SetCacheReturnType = 'All'
                                                                        }
                                                                        elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                            $SetCacheReturnType = 'Selected'
                                                                        }
    
                                                                        if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                            $SetCacheFunctionType = 'Add'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                            $SetCacheFunctionType = 'Delete'
                                                                        }
                                                                        elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                            $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                            $SetCacheFunctionType = 'Update'
                                                                        }
    
                                                                        
    
                                                                        if($GetFunctions -and $SetFunctions){
                                                                            $CommandScriptBlock = (
@'

'@)
    
                                                                            $CommandList = @()
                                                                            $num         = 0
                                                                            foreach ($Argument in $ArgumentParameterList) {
                                                                                $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                $ImportGetCacheFunctionType = 'Get'
                                                                                $ImportGetCacheMethod       = $GetCacheMethod
                                                                                $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                $ImportGetCachePoint        = $StartPoint
                                                                                $ImportGetMandatoryArgument = $Argument
    
                                                                                $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                $ImportSetCacheMethod       = $SetCacheMethod
                                                                                $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                $ImportSetCachePoint        = $EndPoint
    
                                                                                $ImportFunctionTableName    = $ConfigTableNameList[$num]
    
                                                                                $CommandList += (((((((((((($CommandScriptBlock
                                                                                ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                $num++
                                                                            }
                                                                        }
                                                                        
                                                                        $EditorCodeArrayList  = @()
                                                                        $EditorCodeArrayList += $GetFunctions
                                                                        $EditorCodeArrayList += $SetFunctions
                                                                        $EditorCodeArrayList += $null
                                                                        $EditorCodeArrayList += ''
                                                                        $EditorCodeArrayList += '# COMMAND SCRIPTBLOCK'
                                                                        $EditorCodeArrayList += ''
                                                                        foreach ($Command in $CommandList) {
                                                                            $EditorCodeArrayList += $Command
                                                                        }
                                                                        
                                                                        
                                                                        #[string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
                                                                        [string]$EditorCodeArrayListString = '# The development of the application is not complete for the python language'
    
                                                                        
                                                                    }
                                                                    New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'python' -Code $EditorCodeArrayListString
                                                                }                                                           
                                                                else{
                                                                New-UDCodeEditor -Id 'TaskScriptblockCodeEditorBox' -ShowFoldingControls always -FormatOnPaste -SmoothScrolling -MouseWheelZoom -Width '100cw' -Height '85ch' -Language 'python' -Code (
@'
# Python
msg = 'Hello World';
print (msg);
'@)    
                                                                }
                                                            } -Style '
                                                            .monaco-editor .overflow-guard {
                                                                position: relative;
                                                                overflow: hidden;
                                                                border: 1px solid gray;
                                                            }
                                                            '
            
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Id 'TaskScriptblockCodeEditorBoxButtons' -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonTestCode' -Text 'Test code' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in python is not valid' -Duration 5000
                                                                            }                                                                        
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                $TestOutput = $null
                                                                                Set-Content $Cache:TaskEditorScriptDataPathPY -Value $GetEditorCode
                                                                                $TestOutput = .($Cache:TaskEditorDataExePathPythonPY) $Cache:TaskEditorScriptDataPathPY
                                                                                if($TestOutput){
                                                                                    Show-UDToast -Message $TestOutput -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'null error' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonSaveCode' -Text 'Save code to session' -OnClick {
                                                                            $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                Set-Content $Cache:TaskEditorScriptRetrieveDataPathPY -Value $GetEditorCode
                                                                                if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathPY ){
                                                                                    Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonRetriveData' -Text 'Retrieve code from session' -OnClick {
                                                                            $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            if($GetEditorLanguage -eq 'Javascript'){
                                                                                Show-UDToast -Message 'Language javascript in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                                                Show-UDToast -Message 'Language powershell in python is not valid' -Duration 5000
                                                                            }
                                                                            elseif($GetEditorLanguage -eq 'Python'){
                                                                                $GetValidateItemFullNameGci    = gci $Cache:TaskEditorScriptRetrieveDataPathPY
                                                                                $GetValidateItemName           = $GetValidateItemFullNameGci.Name
                                                                                $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                                $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                                $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                                $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                                $SetValidateItemHeadrString    = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title'
                                                                                $GetRetrieveData = gc $Cache:TaskEditorScriptRetrieveDataPathPY -Raw
                                                                                $GetRetrieveDataToObject = $GetRetrieveData
                                                                                if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathPY) -and $GetRetrieveData){
                                                                                    $SetRetrieveCode = (Set-UDElement -Id 'TaskScriptblockCodeEditorBox' -Properties @{code = "$GetRetrieveDataToObject"})
                                                                                    Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonCreateScriptFileData' -Text 'Create Script File' -OnClick {
                                                                            $Session:GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Language
                                                                            $Session:GetEditorCode     = (Get-UDElement -Id 'TaskScriptblockCodeEditorBox').Code
                                                                            if($GetEditorLanguage -eq 'Python' -or $Session:GetEditorLanguage -eq 'Python'){
                                                                                $GetScriptPath      = $Session:TaskScriptPathSelectResult
                                                                                if($GetScriptPath -eq 'py'){
                                                                                    $GetScriptPath = $null
                                                                                }
                                                                                else{
                                                                                    $GetScriptPath = "$GetScriptPath"+'\'
                                                                                }
                                                                                $GetNewSaveFileName = "$GetScriptPath"+(Get-UDElement -Id 'ScriptNameIdTextBox').Value
                                                                                $GetEditorCode      = $Session:GetEditorCode
                                                                                $GetDirFilePath     = $Cache:TaskScriptDataPathPY
                                                                                $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName"+'.py')
                                                                                if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                    if(Test-Path $CreateFilePath){
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Overwrite script ?'
                                                                                        } -Content {
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                                                    $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                                                    $TaskScriptDataGciPYPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.py'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDModal -Header {
                                                                                            New-UDTypography -Text 'Save script ?'
                                                                                        } -Content {
                                                                                            New-UDButton -Text "Save" -OnClick {
                                                                                                New-Item -ItemType File $CreateFilePath
                                                                                                Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                                Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                                # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                                                if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                                                    $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                                                    $TaskScriptDataGciPYPSCO = @()
                                                                                                    if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                                        $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                                            Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                                            Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                        }
                                                                                                    }
                                                                                                    if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                                        foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                                            $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                                                Dir   = $currentDirItem.Name
                                                                                                                Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO

                                                                                                    $Session:SelectedTaskScriptPath = "$Session:TaskScriptPathSelectResult"+'\'+((Get-UDElement -Id 'ScriptNameIdTextBox').Value)+'.py'
                                                                                                    Sync-UDElement -Id 'SelectScriptTypeDropdown-ScriptPathDynamicId'
                                                                                                    
                                                                                                }
                                                                                                else{
                                                                                                    # $Cache:TaskScriptDataPathPY = $null
                                                                                                }
                                                                                                Hide-UDModal
                                                                                            } -ClassName "task-center-box-btn"
                                                                                            New-UDButton -Text "Go back" -OnClick {
                                                                                                $Session:RecoveryEditorLanguage = $Session:GetEditorLanguage
                                                                                                $Session:RecoveryEditorCode     = $Session:GetEditorCode
                                                                                                Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                                                Hide-UDModal
                                                                                                $CodeEditorStandardSC|iex
                                                                                            } -ClassName "task-center-box-btn" 
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                }
                                                                            }
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDHtml -Markup '&nbsp;'
                                                                    }
                                                                    New-UDElement -Tag 'td' -Content {
                                                                        New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonGenerateFunctionsData' -Text 'Generate Functions' -OnClick {
                                                                            $Session:GenerateFunctionsDataCondition = $true
                                                                            $PythonEditorModalSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" } -FullScreen
                                                }
                                                $PythonEditorModalSC|iex
                                            }                                                 
    
                                        }

                                        if($true -eq $(Test-Path $CreateNewPath)){
                                            Show-UDToast -Message 'Script file in directory path is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                        }
                                        elseif($GetScriptName -and $GetScriptName -notmatch ' ' -and $SpecialChars.Length -eq 0){
                                            $CodeEditorStandardSC|iex    
                                        }
                                        else{
                                            Show-UDToast -Message 'Script name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                        }
                                    } -ClassName "task-center-box-btn"
                                }
                            }
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'td' -Content {
                                    New-UDButton -Text 'Create New Task' -OnClick {
                                        if($Session:SelectedTaskScriptPath -and 'null' -ne $Session:SelectedTaskScriptPath){
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                if(($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'js'){
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathJS"+($Session:SelectedTaskScriptPath -replace '.*\\')
                                                }
                                                else{
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathJS"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                if(($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'ps'){
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathPS"+($Session:SelectedTaskScriptPath -replace '.*\\')
                                                }
                                                else{
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathPS"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                if(($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'py'){
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathPY"+($Session:SelectedTaskScriptPath -replace '.*\\')
                                                }
                                                else{
                                                    $ScriptFilePath = "$Cache:TaskScriptDataPathPY"+"$Session:SelectedTaskScriptPath"
                                                }
                                            }
                                            
                                            if(Test-Path $ScriptFilePath){
                                                $FormContent = $null
                                                $Session:GlobalFormContent = $null
                                                $FormContent = [PSCustomObject]@{
                                                    TaskUniqueId                         = ([guid]::NewGuid()).Guid
                                                    TaskNameIdTextBox                    = (Get-UDElement -Id 'TaskNameIdTextBox').Value
                                                    TaskGroupIdSelectBox                 = $Session:TaskGroupIdSelectBoxData
                                                    TaskTypeIdSelectBox                  = $Session:TaskTypeIdSelectBoxData
                                                    TaskMethodTypeIdSelectBox            = $Session:TaskMethodTypeIdSelectBoxData
                                                    TaskGetMethodIdSelectBox             = $Session:TaskGetMethodIdSelectBoxData
                                                    TaskGetReturnTypeIdSelectBox         = $Session:TaskGetReturnTypeIdSelectBoxData
                                                    TaskGetExpirationIdSelectBox         = $Session:TaskGetExpirationIdSelectBoxData
                                                    TaskSetMethodIdSelectBox             = $Session:TaskSetMethodIdSelectBoxData
                                                    TaskSetReturnTypeIdSelectBox         = $Session:TaskSetReturnTypeIdSelectBoxData
                                                    TaskSetTypeIdSelectBox               = $Session:TaskSetTypeIdSelectBoxData
                                                    InterfaceBlocksStartPointIdSelectBox = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                    InterfaceBlocksEndPointIdSelectBox   = $Session:InterfaceBlocksEndPointIdSelectBoxData
                                                    EntiyGroupIdSelectBox                = $Session:EntiyGroupIdSelectBoxData
                                                    EntiyModelIdSelectBox                = $Session:EntiyModelIdSelectBoxData
                                                    EntiyModelAttributeIdSelectBox       = $Session:EntiyModelAttributeIdSelectBoxData
                                                    TaskStartDateDayTextBox              = (Get-UDElement -Id 'TaskStartDateDayTextBox').Value
                                                    TaskStartDateMonthTextBox            = (Get-UDElement -Id 'TaskStartDateMonthTextBox').Value
                                                    TaskStartDateYearTextBox             = (Get-UDElement -Id 'TaskStartDateYearTextBox').Value
                                                    TaskEndDateDayTextBox                = (Get-UDElement -Id 'TaskEndDateDayTextBox').Value
                                                    TaskEndDateMonthTextBox              = (Get-UDElement -Id 'TaskEndDateMonthTextBox').Value
                                                    TaskEndDateYearTextBox               = (Get-UDElement -Id 'TaskEndDateYearTextBox').Value
                                                    TaskStartTimeHourTextBox             = (Get-UDElement -Id 'TaskStartTimeHourTextBox').Value
                                                    TaskStartTimeMinuteTextBox           = (Get-UDElement -Id 'TaskStartTimeMinuteTextBox').Value
                                                    TaskStartTimeSecondTextBox           = (Get-UDElement -Id 'TaskStartTimeSecondTextBox').Value
                                                    TaskEndTimeHourTextBox               = (Get-UDElement -Id 'TaskEndTimeHourTextBox').Value
                                                    TaskEndTimeMinuteTextBox             = (Get-UDElement -Id 'TaskEndTimeMinuteTextBox').Value
                                                    TaskEndTimeSecondTextBox             = (Get-UDElement -Id 'TaskEndTimeSecondTextBox').Value
                                                    TaskLimitTimeHourTextBox             = (Get-UDElement -Id 'TaskLimitTimeHourTextBox').Value
                                                    TaskLimitTimeMinuteTextBox           = (Get-UDElement -Id 'TaskLimitTimeMinuteTextBox').Value
                                                    TaskLimitTimeSecondTextBox           = (Get-UDElement -Id 'TaskLimitTimeSecondTextBox').Value
                                                    TaskRepetitionTimeHourTextBox        = (Get-UDElement -Id 'TaskRepetitionTimeHourTextBox').Value
                                                    TaskRepetitionTimeMinuteTextBox      = (Get-UDElement -Id 'TaskRepetitionTimeMinuteTextBox').Value
                                                    TaskRepetitionTimeSecondTextBox      = (Get-UDElement -Id 'TaskRepetitionTimeSecondTextBox').Value
                                                    TaskWindowStyleIdSelectBox           = $Session:TaskWindowStyleIdSelectBoxData
                                                    TaskSelectScriptTypeBox              = 'Exist Script'
                                                    TaskScriptblockLanguageSelectBox     = $Cache:GetScriptBlockLanguage
                                                    TaskScriptBlockFullName              = $ScriptFilePath
                                                    TaskStatus                           = 'Inactive'
                                                }
                
                                                $Session:GlobalFormContent = $FormContent
                
                                                if ($FormContent.TaskNameIdTextBox -eq $null -or $FormContent.TaskNameIdTextBox -eq '') {
                                                    Show-UDToast -Message 'Task Name is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon1 = $true
                                                }
                                                if ($FormContent.TaskGroupIdSelectBox -eq $null -or $FormContent.TaskGroupIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Group is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon2 = $true
                                                }
                                                if ($FormContent.TaskTypeIdSelectBox -eq $null -or $FormContent.TaskTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon3 = $true
                                                }
                                                if ($FormContent.TaskMethodTypeIdSelectBox -eq $null -or $FormContent.TaskMethodTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon4 = $true
                                                }
                                                if ($FormContent.TaskGetMethodIdSelectBox -eq $null -or $FormContent.TaskGetMethodIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon5 = $true
                                                }
                                                if ($FormContent.TaskGetReturnTypeIdSelectBox -eq $null -or $FormContent.TaskGetReturnTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Return Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon6 = $true
                                                }
                                                if ($FormContent.TaskGetExpirationIdSelectBox -eq $null -or $FormContent.TaskGetExpirationIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Expiration is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon7 = $true
                                                }
                                                if ($FormContent.TaskSetMethodIdSelectBox -eq $null -or $FormContent.TaskSetMethodIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon8 = $true
                                                }
                                                if ($FormContent.TaskSetReturnTypeIdSelectBox -eq $null -or $FormContent.TaskSetReturnTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Return Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon9 = $true
                                                }
                                                if ($FormContent.TaskSetTypeIdSelectBox -eq $null -or $FormContent.TaskSetTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon10 = $true
                                                }
                                                if ($FormContent.InterfaceBlocksStartPointIdSelectBox -eq $null -or $FormContent.InterfaceBlocksStartPointIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Interface Start Point is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon11 = $true
                                                }
                                                if ($FormContent.InterfaceBlocksEndPointIdSelectBox -eq $null -or $FormContent.InterfaceBlocksEndPointIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Interface End Point is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon12 = $true
                                                }
                                                if ($FormContent.EntiyGroupIdSelectBox -eq $null -or $FormContent.EntiyGroupIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Group is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon13 = $true
                                                }
                                                if ($FormContent.EntiyModelIdSelectBox -eq $null -or $FormContent.EntiyModelIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Model is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon14 = $true
                                                }
                                                if ($FormContent.EntiyModelAttributeIdSelectBox -eq $null -or $FormContent.EntiyModelAttributeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Model Attribute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon15 = $true
                                                }
                                                if ($FormContent.TaskStartDateDayTextBox -eq $null -or $FormContent.TaskStartDateDayTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Day is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon16 = $true
                                                }
                                                if ($FormContent.TaskStartDateMonthTextBox -eq $null -or $FormContent.TaskStartDateMonthTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Month is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon17 = $true
                                                }
                                                if ($FormContent.TaskStartDateYearTextBox -eq $null -or $FormContent.TaskStartDateYearTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Year is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon18 = $true
                                                }
                                                if ($FormContent.TaskEndDateDayTextBox -eq $null -or $FormContent.TaskEndDateDayTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Day is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon19 = $true
                                                }
                                                if ($FormContent.TaskEndDateMonthTextBox -eq $null -or $FormContent.TaskEndDateMonthTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Month is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon20 = $true
                                                }
                                                if ($FormContent.TaskEndDateYearTextBox -eq $null -or $FormContent.TaskEndDateYearTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Year is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon21 = $true
                                                }
                                                if ($FormContent.TaskStartTimeHourTextBox -eq $null -or $FormContent.TaskStartTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon22 = $true
                                                }
                                                if ($FormContent.TaskStartTimeMinuteTextBox -eq $null -or $FormContent.TaskStartTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon23= $true
                                                }
                                                if ($FormContent.TaskStartTimeSecondTextBox -eq $null -or $FormContent.TaskStartTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon24 = $true
                                                }
                                                if ($FormContent.TaskEndTimeHourTextBox -eq $null -or $FormContent.TaskEndTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon25 = $true
                                                }
                                                if ($FormContent.TaskEndTimeMinuteTextBox -eq $null -or $FormContent.TaskEndTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon26 = $true
                                                }
                                                if ($FormContent.TaskEndTimeSecondTextBox -eq $null -or $FormContent.TaskEndTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon27 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeHourTextBox -eq $null -or $FormContent.TaskLimitTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon28 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeMinuteTextBox -eq $null -or $FormContent.TaskLimitTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon29 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeSecondTextBox -eq $null -or $FormContent.TaskLimitTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon30 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeHourTextBox -eq $null -or $FormContent.TaskRepetitionTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon31 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeMinuteTextBox -eq $null -or $FormContent.TaskRepetitionTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon32 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeSecondTextBox -eq $null -or $FormContent.TaskRepetitionTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon33 = $true
                                                }
                
                
                
                
                                                if ($FormContent.TaskWindowStyleIdSelectBox -eq $null -or $FormContent.TaskWindowStyleIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Window Style is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon34 = $true
                                                }
                                                if ($FormContent.TaskSelectScriptTypeBox -eq $null -or $FormContent.TaskSelectScriptTypeBox -eq '') {
                                                    Show-UDToast -Message 'Task Script Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon35 = $true
                                                }
                                                if ($FormContent.TaskScriptblockLanguageSelectBox -eq $null -or $FormContent.TaskScriptblockLanguageSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Script Language is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon36 = $true
                                                }
                
                
                
                                                if ($FormContent.TaskScriptBlockFullName -eq $null -or $FormContent.TaskScriptBlockFullName -eq '') {
                                                    Show-UDToast -Message 'Task Script File Full Name is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon37 = $true
                                                }
                
                
                                                if(
                                                    $ValidCon1 -eq $true -and
                                                    $ValidCon2 -eq $true -and
                                                    $ValidCon3 -eq $true -and
                                                    $ValidCon4 -eq $true -and
                                                    $ValidCon5 -eq $true -and
                                                    $ValidCon6 -eq $true -and
                                                    $ValidCon7 -eq $true -and
                                                    $ValidCon8 -eq $true -and
                                                    $ValidCon9 -eq $true -and
                                                    $ValidCon10 -eq $true -and
                                                    $ValidCon11 -eq $true -and
                                                    $ValidCon12 -eq $true -and
                                                    $ValidCon13 -eq $true -and
                                                    $ValidCon14 -eq $true -and
                                                    $ValidCon15 -eq $true -and
                                                    $ValidCon16 -eq $true -and
                                                    $ValidCon17 -eq $true -and
                                                    $ValidCon18 -eq $true -and
                                                    $ValidCon19 -eq $true -and
                                                    $ValidCon20 -eq $true -and
                                                    $ValidCon21 -eq $true -and
                                                    $ValidCon22 -eq $true -and
                                                    $ValidCon23 -eq $true -and
                                                    $ValidCon24 -eq $true -and
                                                    $ValidCon25 -eq $true -and
                                                    $ValidCon26 -eq $true -and
                                                    $ValidCon27 -eq $true -and
                                                    $ValidCon28 -eq $true -and
                                                    $ValidCon29 -eq $true -and
                                                    $ValidCon30 -eq $true -and
                                                    $ValidCon31 -eq $true -and
                                                    $ValidCon32 -eq $true -and
                                                    $ValidCon33 -eq $true -and
                                                    $ValidCon34 -eq $true -and
                                                    $ValidCon35 -eq $true -and
                                                    $ValidCon36 -eq $true -and
                                                    $ValidCon37 -eq $true
                                                ){
                                                    # TASK CONFIG SCRIPTBLOCK
                                                    $TaskConfigSC = {
                                                        $TaskName = $Session:GlobalFormContent.TaskNameIdTextBox
                                                        $TaskPath = "$Cache:TaskListConfigurationDatabasePath"+"$TaskName"+'.json'
                                                        $Session:ValidateItemFullName = $null
                                                        if(Test-Path $TaskPath){
                                                            Show-UDModal -Header {
                                                                New-UDTypography -Text 'Overwrite task ?'
                                                            } -Content {
                                                                New-UDButton -Text "Save" -OnClick {
                                                                    Set-Content $TaskPath -Value ($Session:GlobalFormContent|ConvertTo-Json -Depth 100)
                                                                    Show-UDToast -Message 'Overwrite task configuration file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Go back" -OnClick {
                                                                    Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn" 
                                                            }
                                                        }
                                                        else{
                                                            Show-UDModal -Header {
                                                                New-UDTypography -Text 'Save task ?'
                                                            } -Content {
                                                                New-UDButton -Text "Save" -OnClick {
                                                                    New-Item -ItemType File $TaskPath
                                                                    Set-Content $TaskPath -Value ($Session:GlobalFormContent|ConvertTo-Json -Depth 100)
                                                                    Show-UDToast -Message 'Create new task configuration file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Go back" -OnClick {
                                                                    Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn" 
                                                            }
                                                        }
                                                        
                                                    }
                
                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'New Script'){
                                                        # TASK SCRIPT SCRIPTBLOCK
                                                        if(($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'js' -or ($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'ps' -or ($Session:SelectedTaskScriptPath -replace '\\.*') -eq 'py'){
                                                            $Session:SelectedTaskScriptPath = ($Session:SelectedTaskScriptPath -replace '.*\\')
                                                        }
                                                        if($FormContent.TaskScriptblockLanguageSelectBox -eq 'Powershell'){
                                                            $GetNewSaveFileName = $Session:SelectedTaskScriptPath
                                                            $GetDirFilePath     = $Cache:TaskScriptDataPathPS
                                                            $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName")
                                                            if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                if(Test-Path $CreateFilePath){
                                                                    $GetEditorCode = gc $CreateFilePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Overwrite script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PS1 PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                                $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                                $TaskScriptDataGciPSPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                else{
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Save script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            New-Item -ItemType File $CreateFilePath
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PS1 PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                                $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                                $TaskScriptDataGciPSPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                            }
                                                        }
                                                        elseif($FormContent.TaskScriptblockLanguageSelectBox -eq 'Javascript'){
                                                            $GetNewSaveFileName = $Session:SelectedTaskScriptPath
                                                            $GetDirFilePath     = $Cache:TaskScriptDataPathJS
                                                            $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName")
                                                            if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                if(Test-Path $CreateFilePath){
                                                                    $GetEditorCode = gc $CreateFilePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Overwrite script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                                $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                                $TaskScriptDataGciJSPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                else{
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Save script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            New-Item -ItemType File $CreateFilePath
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                                $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                                $TaskScriptDataGciJSPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                            }
                                                        }
                                                        elseif($FormContent.TaskScriptblockLanguageSelectBox -eq 'Python'){
                                                            $GetNewSaveFileName = $Session:SelectedTaskScriptPath
                                                            $GetDirFilePath     = $Cache:TaskScriptDataPathPY
                                                            $CreateFilePath     = ("$GetDirFilePath"+"$GetNewSaveFileName")
                                                            if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                if(Test-Path $CreateFilePath){
                                                                    $GetEditorCode = gc $CreateFilePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Overwrite script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                                $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                                $TaskScriptDataGciPYPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                else{
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Save script ?'
                                                                    } -Content {
                                                                        New-UDButton -Text "Save" -OnClick {
                                                                            New-Item -ItemType File $CreateFilePath
                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                            # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                            if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                                $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                                $TaskScriptDataGciPYPSCO = @()
                                                                                if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                        Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                        Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                                if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                    foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                        $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                            Dir   = $currentDirItem.Name
                                                                                            Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                        }
                                                                                    }
                                                                                }
                                                                                $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                                            }
                                                                            else{
                                                                                # $Cache:TaskScriptDataPathPY = $null
                                                                            }
                                                                            Hide-UDModal
                                                                            $TaskConfigSC|iex
                                                                        } -ClassName "task-center-box-btn"
                                                                        New-UDButton -Text "Go back" -OnClick {
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' -Duration 5000
                                                        }
                                                    }
                                                }
                                            }
                                            else{
                                                Show-UDToast -Message 'Script file path is not exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                            }
                                        }
                                        else{
                                            Show-UDToast -Message 'Script is not selected!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                        }
                                    } -ClassName "task-center-box-btn"
                                }
                            }
                        }
                        New-UDElement -id 'SelectScriptTypeDropdown-SelectExist-1-recovery' -Tag 'table' -Content {
                            New-UDElement -Tag 'tr' -Content {
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDElement -Tag 'tr' -Content {
                                            New-UDTypography -Text 'Select script' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                        }
                                    }
                                    if($Session:RecoverySelectScriptFullNamePathFirstRunExistScript -eq 1){
                                        $Session:SelectedTaskScriptFullName = $Session:RecoveryDataTaskScriptBlockFullName
                                        $Session:RecoverySelectScriptFullNamePathFirstRunExistScript++
                                    }
                                    else{
                                        if($null -eq $Session:SelectedTaskRow){
                                            $Session:SelectedTaskScriptFullName = 'NULL'
                                        }
                                    }
                                    New-UDDynamic -Id 'SelectedTaskScriptBlockFullNameDynamicId' -Content {
                                        New-UDElement -Tag 'td' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDTypography -Text $Session:SelectedTaskScriptFullName -ClassName 'task-center-box-inner-title'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        New-UDElement -id 'SelectScriptTypeDropdown-SelectExist-2-recovery' -Tag 'table' -Content {
                            New-UDDynamic -Id 'SelectScriptFilePathDynamic' -Content {
                                start-sleep -Milliseconds 1000
                                New-UDDynamic -Id 'SelectScriptFilePathDynamicFastSync' -Content {
                                    
                                    $GetEditorLanguage = $Cache:GetScriptBlockLanguage

                                    if($Session:RecoverySelectScriptRowFindIndexPathFirstRun -eq 1){
                                        if($GetEditorLanguage -eq 'Javascript'){
                                            $GetSelectScriptFilePathJS                = $Session:TaskScriptPathSelectResult
                                            $GetTaskScriptDataPathJS                  = $Cache:TaskScriptDataSaveJS
                                            $SelectDirTaskScriptDataPathJS            = $GetTaskScriptDataPathJS | ? {$_.Dir -eq $GetSelectScriptFilePathJS}
                                            $Cache:SelectDirTaskScriptDataPathJSFiles = $SelectDirTaskScriptDataPathJS.Files | ConvertFrom-Json
                                            $IndexNum                                 = 0
                                            foreach ($Files in $Cache:SelectDirTaskScriptDataPathJSFiles) {
                                                $File = $Files.FullName
                                                if($File -eq $Session:RecoveryDataTaskScriptBlockFullName){
                                                    $Session:SelectScriptPathRowIndex = $IndexNum
                                                }
                                                $IndexNum++
                                            }
                                        }
                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                            $GetSelectScriptFilePathPS                = $Session:TaskScriptPathSelectResult
                                            $GetTaskScriptDataPathPS                  = $Cache:TaskScriptDataSavePS
                                            $SelectDirTaskScriptDataPathPS            = $GetTaskScriptDataPathPS | ? {$_.Dir -eq $GetSelectScriptFilePathPS}
                                            $Cache:SelectDirTaskScriptDataPathPSFiles = $SelectDirTaskScriptDataPathPS.Files | ConvertFrom-Json
                                            $IndexNum                                 = 0
                                            foreach ($Files in $Cache:SelectDirTaskScriptDataPathPSFiles) {
                                                $File = $Files.FullName
                                                if($File -eq $Session:RecoveryDataTaskScriptBlockFullName){
                                                    $Session:SelectScriptPathRowIndex = $IndexNum
                                                }
                                                $IndexNum++
                                            }
                                        }
                                        elseif($GetEditorLanguage -eq 'Python'){
                                            $GetSelectScriptFilePathPY                = $Session:TaskScriptPathSelectResult
                                            $GetTaskScriptDataPathPY                  = $Cache:TaskScriptDataSavePY
                                            $SelectDirTaskScriptDataPathPY            = $GetTaskScriptDataPathPY | ? {$_.Dir -eq $GetSelectScriptFilePathPY}
                                            $Cache:SelectDirTaskScriptDataPathPYFiles = $SelectDirTaskScriptDataPathPY.Files | ConvertFrom-Json
                                            $IndexNum                                 = 0
                                            foreach ($Files in $Cache:SelectDirTaskScriptDataPathPYFiles) {
                                                $File = $Files.FullName
                                                if($File -eq $Session:RecoveryDataTaskScriptBlockFullName){
                                                    $Session:SelectScriptPathRowIndex = $IndexNum
                                                }
                                                $IndexNum++
                                            }
                                        }
                                        $Session:RecoverySelectScriptRowFindIndexPathFirstRun++
                                    }

                                    if($GetEditorLanguage -eq 'Javascript'){
                                        $GetSelectScriptFilePathJS                = $Session:TaskScriptPathSelectResult
                                        $GetTaskScriptDataPathJS                  = $Cache:TaskScriptDataSaveJS
                                        $SelectDirTaskScriptDataPathJS            = $GetTaskScriptDataPathJS | ? {$_.Dir -eq $GetSelectScriptFilePathJS}
                                        $Cache:SelectDirTaskScriptDataPathJSFiles = $SelectDirTaskScriptDataPathJS.Files | ConvertFrom-Json
                                        $Session:TaskGroupListData = @(
                                            foreach ($JSItemFiles in $Cache:SelectDirTaskScriptDataPathJSFiles) {
                                                $JSItemLanguage = $GetEditorLanguage
                                                $JSItemDirName  = $GetSelectScriptFilePathJS
                                                $JSItemFileName = $JSItemFiles.Name
                                                $JSItemFullName = $JSItemFiles.FullName
                                                $JSItemGci      = gci $JSItemFullName
                                                $JSAccessTime   = ($JSItemGci | select LastAccessTime).LastAccessTime
                                                $JSWriteTime    = ($JSItemGci | select LastWriteTime).LastWriteTime                                                
                                                $JSItemLength   = $JSItemGci.Length
                                                @{
                                                    TaskLanguage = $JSItemLanguage;
                                                    TaskGroup    = $JSItemDirName;
                                                    TaskName     = $JSItemFileName;
                                                    TaskFullName = $JSItemFullName;
                                                    TaskAccess   = $JSAccessTime;
                                                    TaskWrite    = $JSWriteTime;
                                                    TaskLength   = $JSItemLength;
                                                }
                                            }
                                        )
                                    }
                                    elseif($GetEditorLanguage -eq 'Powershell'){
                                        $GetSelectScriptFilePathPS                = $Session:TaskScriptPathSelectResult
                                        $GetTaskScriptDataPathPS                  = $Cache:TaskScriptDataSavePS
                                        $SelectDirTaskScriptDataPathPS            = $GetTaskScriptDataPathPS | ? {$_.Dir -eq $GetSelectScriptFilePathPS}
                                        $Cache:SelectDirTaskScriptDataPathPSFiles = $SelectDirTaskScriptDataPathPS.Files | ConvertFrom-Json
                                        $Session:TaskGroupListData = @(
                                            foreach ($PSItemFiles in $Cache:SelectDirTaskScriptDataPathPSFiles) {
                                                $PSItemLanguage = $GetEditorLanguage
                                                $PSItemDirName  = $GetSelectScriptFilePathPS
                                                $PSItemFileName = $PSItemFiles.Name
                                                $PSItemFullName = $PSItemFiles.FullName
                                                $PSItemGci      = gci $PSItemFullName
                                                $PSAccessTime   = ($PSItemGci | select LastAccessTime).LastAccessTime
                                                $PSWriteTime    = ($PSItemGci | select LastWriteTime).LastWriteTime                                                
                                                $PSItemLength   = $PSItemGci.Length
                                                @{
                                                    TaskLanguage = $PSItemLanguage;
                                                    TaskGroup    = $PSItemDirName;
                                                    TaskName     = $PSItemFileName;
                                                    TaskFullName = $PSItemFullName;
                                                    TaskAccess   = $PSAccessTime;
                                                    TaskWrite    = $PSWriteTime;
                                                    TaskLength   = $PSItemLength;
                                                }
                                            }
                                        )
                                    }
                                    elseif($GetEditorLanguage -eq 'Python'){
                                        $GetSelectScriptFilePathPY                = $Session:TaskScriptPathSelectResult
                                        $GetTaskScriptDataPathPY                  = $Cache:TaskScriptDataSavePY
                                        $SelectDirTaskScriptDataPathPY            = $GetTaskScriptDataPathPY | ? {$_.Dir -eq $GetSelectScriptFilePathPY}
                                        $Cache:SelectDirTaskScriptDataPathPYFiles = $SelectDirTaskScriptDataPathPY.Files | ConvertFrom-Json
                                        $Session:TaskGroupListData = @(
                                            foreach ($PYItemFiles in $Cache:SelectDirTaskScriptDataPathPYFiles) {
                                                $PYItemLanguage = $GetEditorLanguage
                                                $PYItemDirName  = $GetSelectScriptFilePathPY
                                                $PYItemFileName = $PYItemFiles.Name
                                                $PYItemFullName = $PYItemFiles.FullName
                                                $PYItemGci      = gci $PYItemFullName
                                                $PYAccessTime   = ($PYItemGci | select LastAccessTime).LastAccessTime
                                                $PYWriteTime    = ($PYItemGci | select LastWriteTime).LastWriteTime                                                
                                                $PYItemLength   = $PYItemGci.Length
                                                @{
                                                    TaskLanguage = $PYItemLanguage;
                                                    TaskGroup    = $PYItemDirName;
                                                    TaskName     = $PYItemFileName;
                                                    TaskFullName = $PYItemFullName;
                                                    TaskAccess   = $PYAccessTime;
                                                    TaskWrite    = $PYWriteTime;
                                                    TaskLength   = $PYItemLength;
                                                }
                                            }
                                        )
                                    }                                                    
                                    else{

                                    }
                                
            
                                    $Data += $Session:TaskGroupListData
            
                                    if($Data -eq $null){
                                        New-UDElement -Tag 'table' -Content {
                                            New-UDElement -Tag 'tr' -Content {
                                                New-UDElement -Tag 'td' -Content {
                                                    New-UDTypography -Text 'Data is not found!' -Style @{color='red'}
                                                }
                                            }   
                                        }
                                    }
                                    else{
                                        $Columns = @(
                                            New-UDTableColumn -Property TaskLanguage -Title 'Language' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskLanguage)"
                                            }
                                            New-UDTableColumn -Property TaskGroup -Title 'Group' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskGroup)"
                                            }
                                            New-UDTableColumn -Property TaskName -Title 'Name' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskName)"
                                            }
                                            New-UDTableColumn -Property TaskFullName -Title 'Path' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskFullName)"
                                            }
                                            New-UDTableColumn -Property TaskAccess -Title 'Last Access Time' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskAccess)"
                                            }
                                            New-UDTableColumn -Property TaskWrite -Title 'Last Write Time' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskWrite)"
                                            }
                                            New-UDTableColumn -Property TaskLength -Title 'Length' -IncludeInSearch -Render {
                                                New-UDTypography -Text "$($EventData.TaskLength)"
                                            }                                                                                        
                                        )
                                        New-UDElement -Tag 'div' -Content {
                                            New-UDStyle -Content {
                                                New-UDTable -Id 'TaskGroupList_table' -Data $Data -Columns $Columns -Title 'Script List' -DisableMultiSelect -ShowSelection -ShowSearch -ShowPagination -Dense -OnRowSelection {
                                                    $Session:SelectedTaskRow = $Body
                                                    $Session:SelectedTaskScriptFullName = ($Body|ConvertFrom-Json).TaskFullName
                                                    Sync-UDElement -Id 'SelectedTaskScriptBlockFullNameDynamicId'
                                                } -PageSize 20 -ShowRefresh
                                            } -Style '
                                            font-size: 7px;
                                            width: 99%;
                                            .MuiTableBody-root .MuiTableRow-root:hover {
                                                background-color: #f8f8f8;
                                            }
                                            .MuiTableCell-root {
                                                padding 2px 5px 0px;
                                                line-heigh: 1;
                                            }
                                            .MuiSelect-select {
                                                padding-top: 0px;
                                                padding-bottom: 0px;
                                                padding-left: 5px;
                                                padding-right: 5px;
                                            }
                                            .MuiTableRow-head {
                                                padding-top: 0px;
                                                padding-bottom: 0px;
                                                padding-left: 5px;
                                                padding-right: 5px;   
                                            }
                                            .MuiToolbar-root {
                                                padding-top: 0px;
                                                padding-bottom: 0px;
                                                padding-left: 5px;
                                                padding-right: 5px;           
                                            }
                                            .css-6tsndk {
                                                position: relative;
                                                display: flex;
                                                -webkit-box-align: center;
                                                align-items: center;
                                                padding-left: 16px;
                                                padding-right: 16px;
                                                min-height: 8px;
                                            }
                                            .css-1ep437t {
                                                width: 5px;
                                                border: 0px solid currentColor;
                                                height: 16px;
                                                margin-top: 0px;
                                                margin-left: 0px;
                                                background-color: #3b3b3b;
                                                border-radius: 0px;
                                            }
                                            .css-mnn31 {
                                                padding: 0px -5px 0px 5px;
                                                position: relative;
                                                font-size: 10px;
                                                transition: border-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                                                border-radius: 0px;
            
                                            }
                                            .css-jswlw {
                                                border-radius: 12px;
                                                box-sizing: content-box;
                                                display: inline-block;
                                                position: relative;
                                                cursor: pointer;
                                                touch-action: none;
                                                color: rgb(59, 59, 59);
                                                -webkit-tap-highlight-color: transparent;
                                                height: 0px;
                                                width: 100%;
                                                padding: 4px 0px;
                                            }
                                            .MuiSelect-select {
                                                height: auto;
                                                min-height: 1.4375em;
                                                text-overflow: ellipsis;
                                                white-space: nowrap;
                                                overflow: hidden;
                                                border-radius: 0px;
                                            }
                                            .MuiSlider-valueLabel {
                                                min-width: 20px;
                                                font-size: 8px;
                                                right: 12px;
                                                top: calc(-50% - 3px);
                                            }
                                            .css-vubbuv {
                                                user-select: none;
                                                width: 1em;
                                                height: 1em;
                                                display: inline-block;
                                                fill: currentcolor;
                                                flex-shrink: 0;
                                                transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                                                font-size: 0.9rem;
                                            }
                                            .MuiTypography-root {
                                                font-size: 14px;
                                                font-weight: 400;
                                            }
                                            .MuiTypography-noWrap {
                                                font-size: 16px;
                                                font-weight: 600;
                                            }
                                            '
                                        }
                                        if($Session:RecoverySelectScriptRowProcessIndexPathFirstRun -eq 1){
                                            $ChangeColorByRowIndexSC = {
                                                Invoke-UDJavaScript -JavaScript '
                                                    const myTimeout = setTimeout(startscript, 3000);
                                                    function startscript() {
                                                        var i = 3;
                                                        var tempKey = "MuiTableRow-root";
                                                        var el = document.getElementsByClassName(tempKey)[2+importrowindex];
                                                        el.style.backgroundColor = "#FFCC00";
                                                    }
                                                '
                                            } -replace 'importrowindex',"$Session:SelectScriptPathRowIndex"
                                            $ChangeColorByRowIndexSC|iex
                                            $Session:RecoverySelectScriptRowProcessIndexPathFirstRun++
                                        }
                                    }
                                }
                            }
                            $Session:FirstRunNum++
                            New-UDElement -Tag 'table' -Content {
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Open Code Editor' -Variant contained -OnClick {
                                            # OPEN CODE EDITOR SCRIPTBLOCK
                                            $OpenCodeEditorSC = {
                                                $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                                $Session:GetSelectScriptLanguageItem = $GetEditorLanguage
                                                if($Session:CodeEditorSaveCondition -eq $true){
                                                    if($GetEditorLanguage -eq 'Javascript'){
                                                        $Cache:SelectDirTaskScriptDataPathJSFiles     = gci $Session:CreateNewFilePathEditorBox
                                                        $GetTextBoxUniqueIdNumber                     = 1
                                                        $ValidateNumber                               = 1
                                                        $GetValidateItemFullNameGci                   = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                        $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                        $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                        $Session:NewHeaderTittleCondition             = $true
                                                        $GetValidateItemGc                            = gc $Session:CreateNewFilePathEditorBox -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                        $Session:CodeEditorSaveCondition              = $false
                                                    }
                                                    elseif($GetEditorLanguage -eq 'Powershell'){
                                                        $Cache:SelectDirTaskScriptDataPathPSFiles     = gci $Session:CreateNewFilePathEditorBox
                                                        $GetTextBoxUniqueIdNumber                     = 1
                                                        $ValidateNumber                               = 1
                                                        $GetValidateItemFullNameGci                   = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                        $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                        $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                        $Session:NewHeaderTittleCondition             = $true
                                                        $GetValidateItemGc                            = gc $Session:CreateNewFilePathEditorBox -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                        $Session:CodeEditorSaveCondition              = $false
                                                    }
                                                    elseif($GetEditorLanguage -eq 'Python'){
                                                        $Cache:SelectDirTaskScriptDataPathPYFiles     = gci $Session:CreateNewFilePathEditorBox
                                                        $GetTextBoxUniqueIdNumber                     = 1
                                                        $ValidateNumber                               = 1
                                                        $GetValidateItemFullNameGci                   = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                        $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                        $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                        $Session:NewHeaderTittleCondition             = $true
                                                        $GetValidateItemGc                            = gc $Session:CreateNewFilePathEditorBox -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                        $Session:CodeEditorSaveCondition              = $false
                                                    }
                                                    else{
                                                        $ErrorCondition = $true
                                                    }
                                                }
                                                else{
                                                    if($GetEditorLanguage -eq 'Javascript'){
                                                        $GetValidatePath               = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                        $GetValidateItem               = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id])
                                                        $GetValidateItemName           = $GetValidateItem.Name
                                                        $GetValidateItemFullName       = $GetValidateItem.FullName
                                                        $Session:ValidateItemName      = $GetValidateItemName
                                                        $Session:ValidateItemFullName  = $GetValidateItemFullName
                                                        $GetValidateItemFullNameGci    = gci $GetValidateItemFullName
                                                        $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $GetValidateItemGc             = gc $GetValidateItemFullName -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                    }
                                                    elseif($GetEditorLanguage -eq 'Powershell'){
                                                        $GetValidatePath               = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                        $GetValidateItem               = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id])
                                                        $GetValidateItemName           = $GetValidateItem.Name
                                                        $GetValidateItemFullName       = $GetValidateItem.FullName
                                                        $Session:ValidateItemName      = $GetValidateItemName
                                                        $Session:ValidateItemFullName  = $GetValidateItemFullName
                                                        $GetValidateItemFullNameGci    = gci $GetValidateItemFullName
                                                        $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $GetValidateItemGc             = gc $GetValidateItemFullName -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                    }
                                                    elseif($GetEditorLanguage -eq 'Python'){
                                                        $GetValidatePath               = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                        $GetValidateItem               = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id])
                                                        $GetValidateItemName           = $GetValidateItem.Name
                                                        $GetValidateItemFullName       = $GetValidateItem.FullName
                                                        $Session:ValidateItemName      = $GetValidateItemName
                                                        $Session:ValidateItemFullName  = $GetValidateItemFullName
                                                        $GetValidateItemFullNameGci    = gci $GetValidateItemFullName
                                                        $GetValidateItemLastAccessTime = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                        $GetValidateItemLastWriteTime  = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                        $GetValidateItemHeaderString   = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                        $GetValidateItemGc             = gc $GetValidateItemFullName -Raw
                                                        Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                    }     
                                                }
            
                                                Show-UDToast -Message $GetEditorLanguage
            
                                                Show-UDModal -Header {
                                                    New-UDDynamic -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2' -Content {
                                                        if($Session:NewHeaderTittleCondition -eq $true){
                                                            New-UDTypography -Text $Session:TaskScriptblockCodeEditorHeaderTitle -Variant subtitle1 -Paragraph
                                                        }
                                                        else{
                                                            New-UDTypography -Text $GetValidateItemHeaderString -Variant subtitle1 -Paragraph
                                                        }
                                                        $Session:NewHeaderTittleCondition = $false
                                                    }
                                                } -Content {
                                                    New-UDDynamic -Id 'TaskScriptblockValidateDynamicCodeEditorBoxProcess' -Content {
                                                        if($Session:GetSelectScriptLanguageItem -eq 'Javascript'){
                                                            $Session:GetValidateCodeItem = $GetValidateItemGc
                                                            New-UDDynamic -Id 'TaskScriptblockValidateDynamicCodeEditorBox' -Content {
                                                                New-UDStyle -Content {
                                                                    New-UDCodeEditor -Id 'TaskScriptblockValidateCodeEditorBox' -Original $Session:GetValidateCodeItem -ShowFoldingControls always -FormatOnPaste -Width '100cw' -Height '85ch' -Language 'javascript'-Code $Session:GetValidateCodeItem
                                                                } -Style '
                                                                .monaco-editor .overflow-guard {
                                                                    position: relative;
                                                                    overflow: hidden;
                                                                    border: 1px solid gray;
                                                                }
                                                                '                                                          
                                                            }
                                                        }
                                                        elseif($Session:GetSelectScriptLanguageItem -eq 'Powershell'){
                                                            $Session:GetValidateCodeItem = $GetValidateItemGc
                                                            New-UDDynamic -Id 'TaskScriptblockValidateDynamicCodeEditorBox' -Content {
                                                                New-UDStyle -Content {
                                                                    New-UDCodeEditor -Id 'TaskScriptblockValidateCodeEditorBox' -Original $Session:GetValidateCodeItem -ShowFoldingControls always -FormatOnPaste -Width '100cw' -Height '85ch' -Language 'powershell'-Code $Session:GetValidateCodeItem
                                                                } -Style '
                                                                .monaco-editor .overflow-guard {
                                                                    position: relative;
                                                                    overflow: hidden;
                                                                    border: 1px solid gray;
                                                                }
                                                                '
                                                            }
                                                        }
                                                        elseif($Session:GetSelectScriptLanguageItem -eq 'Python'){
                                                            $Session:GetValidateCodeItem = $GetValidateItemGc
                                                            New-UDDynamic -Id 'TaskScriptblockValidateDynamicCodeEditorBox' -Content {
                                                                New-UDStyle -Content {
                                                                    New-UDCodeEditor -Id 'TaskScriptblockValidateCodeEditorBox' -Original $Session:GetValidateCodeItem -ShowFoldingControls always -FormatOnPaste -Width '100cw' -Height '85ch' -Language 'python'-Code $Session:GetValidateCodeItem
                                                                } -Style '
                                                                .monaco-editor .overflow-guard {
                                                                    position: relative;
                                                                    overflow: hidden;
                                                                    border: 1px solid gray;
                                                                }
                                                                '
                                                            }
                                                        }
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Id 'TaskScriptblockCodeEditorBoxButtons' -Tag 'td' -Content {
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonTestCode' -Text 'Test code' -OnClick {
                                                                        $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Code
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            $TestOutput = $null
                                                                            Set-Content $Cache:TaskEditorScriptDataPathJS -Value $GetEditorCode
                                                                            $TestOutput = .($Cache:TaskEditorDataExePathNodeJS) $Cache:TaskEditorScriptDataPathJS
                                                                            if($TestOutput){
                                                                                Show-UDToast -Message $TestOutput -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'null error' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            $TestOutput = $null
                                                                            Set-Content $Cache:TaskEditorScriptDataPathPS -Value $GetEditorCode
                                                                            $TestOutput = gc $Cache:TaskEditorScriptDataPathPS | iex
                                                                            if($TestOutput){
                                                                                Show-UDToast -Message $TestOutput -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'null error' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            $TestOutput = $null
                                                                            Set-Content $Cache:TaskEditorScriptDataPathPY -Value $GetEditorCode
                                                                            $TestOutput = .($Cache:TaskEditorDataExePathPythonPY) $Cache:TaskEditorScriptDataPathPY
                                                                            if($TestOutput){
                                                                                Show-UDToast -Message $TestOutput -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'null error' -Duration 5000
                                                                            }
                                                                        }
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDHtml -Markup '&nbsp;'
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonSaveCode' -Text 'Save code to session' -OnClick {
                                                                        $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Code
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            Set-Content $Cache:TaskEditorScriptRetrieveDataPathJS -Value $GetEditorCode
                                                                            if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathJS ){
                                                                                Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            Set-Content $Cache:TaskEditorScriptRetrieveDataPathPS -Value $GetEditorCode
                                                                            if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathPS ){
                                                                                Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            Set-Content $Cache:TaskEditorScriptRetrieveDataPathPY -Value $GetEditorCode
                                                                            if(Test-Path $Cache:TaskEditorScriptRetrieveDataPathPY ){
                                                                                Show-UDToast -Message 'Save is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'save is not valid' -Duration 5000
                                                                            }
                                                                        }                                                                        
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDHtml -Markup '&nbsp;'
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonRetriveData' -Text 'Retrieve code from session' -OnClick {
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            $GetValidateItemFullNameGci                   = gci $Cache:TaskEditorScriptRetrieveDataPathJS
                                                                            $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                                            $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                            $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                            $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                            $Session:NewHeaderTittleCondition             = $true
                                                                            $SetValidateItemHeadrString                   = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                                            $GetRetrieveData                              = gc $Cache:TaskEditorScriptRetrieveDataPathJS -Raw
                                                                            $GetRetrieveDataToObject                      = $GetRetrieveData
                                                                            if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathJS) -and $GetRetrieveData){
                                                                                $Session:GetValidateCodeItem = $GetRetrieveDataToObject
                                                                                Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            $GetValidateItemFullNameGci                   = gci $Cache:TaskEditorScriptRetrieveDataPathPS
                                                                            $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                                            $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                            $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                            $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                            $Session:NewHeaderTittleCondition             = $true
                                                                            $SetValidateItemHeadrString                   = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                                            $GetRetrieveData                              = gc $Cache:TaskEditorScriptRetrieveDataPathPS -Raw
                                                                            $GetRetrieveDataToObject                      = $GetRetrieveData
                                                                            if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathPS) -and $GetRetrieveData){
                                                                                $Session:GetValidateCodeItem = $GetRetrieveDataToObject
                                                                                Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            $GetValidateItemFullNameGci                   = gci $Cache:TaskEditorScriptRetrieveDataPathPY
                                                                            $GetValidateItemName                          = $GetValidateItemFullNameGci.Name
                                                                            $GetValidateItemLastAccessTime                = ($GetValidateItemFullNameGci | select LastAccessTime).LastAccessTime
                                                                            $GetValidateItemLastWriteTime                 = ($GetValidateItemFullNameGci | select LastWriteTime).LastWriteTime
                                                                            $GetValidateItemHeaderString                  = 'File name: '+"$GetValidateItemName"+' | Last access time: '+"$GetValidateItemLastAccessTime"+' | Last write time: '+"$GetValidateItemLastWriteTime"
                                                                            $Session:TaskScriptblockCodeEditorHeaderTitle = $GetValidateItemHeaderString
                                                                            $Session:NewHeaderTittleCondition             = $true
                                                                            $SetValidateItemHeadrString                   = Sync-UDElement -Id 'TaskScriptblockCodeEditorBoxDynamicHeader-title2'
                                                                            $GetRetrieveData                              = gc $Cache:TaskEditorScriptRetrieveDataPathPY -Raw
                                                                            $GetRetrieveDataToObject                      = $GetRetrieveData
                                                                            if((Test-Path $Cache:TaskEditorScriptRetrieveDataPathPY) -and $GetRetrieveData){
                                                                                $Session:GetValidateCodeItem = $GetRetrieveDataToObject
                                                                                Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                Show-UDToast -Message 'Retrieve is successful' -Duration 5000
                                                                            }
                                                                            else{
                                                                                Show-UDToast -Message 'Retrieve data is not valid' -Duration 5000
                                                                            }
                                                                        }
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDHtml -Markup '&nbsp;'
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonCreateScriptFileData' -Text 'Save Script File' -OnClick {
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        $GetEditorCode = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Code
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                                            Show-UDModal -Header {} -Content {
                                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File Full Name' -ClassName 'task-center-box-task-file-full-name-text' -Disabled -Value ($Session:SelectedTaskRow|ConvertFrom-Json).TaskFullName
                                                                                }
                                                                            } -Footer {
                                                                                New-UDButton -Text "Save" -OnClick { 
                                                                                    $GetNewSaveFileName = (Get-UDElement -Id 'NewFileNameFromCodeEditorTextBox').Value
                                                                                    $GetEditorCode      = $Session:SaveCopyEditorCode
                                                                                    $GetDirFilePath     = $Session:ValidateItemFullName -replace '\\(?=[^\\]+$).*','\'
                                                                                    $CreateFilePath     = $GetNewSaveFileName
                                                                                    if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                        }else{
                                                                                            New-Item -ItemType File $CreateFilePath
                                                                                        }
                                                                                        
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                            $Session:CreateNewFilePathEditorBox = $CreateFilePath
                                                                                            $Session:GetValidateCodeItem = $GetEditorCode
                                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                            Show-UDToast -Message $CreateFilePath -Duration 5000
                                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                        }
                                                                                        else{
                                                                                            Show-UDToast -Message 'Create script file is failed' -Duration 5000
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                    }
                                                                                    $Session:CodeEditorSaveCondition = $true
                                                                                    $OpenCodeEditorSC|iex
                                                                                } -ClassName "task-center-box-btn"
                                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                                    
                                                                                    Hide-UDModal 
                                                                                } -ClassName "task-center-box-btn"
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                                            Show-UDModal -Header {} -Content {
                                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File Full Name' -ClassName 'task-center-box-task-file-full-name-text' -Disabled -Value ($Session:SelectedTaskRow|ConvertFrom-Json).TaskFullName
                                                                                }
                                                                            } -Footer { 
                                                                                New-UDButton -Text "Save" -OnClick { 
                                                                                    $GetNewSaveFileName = (Get-UDElement -Id 'NewFileNameFromCodeEditorTextBox').Value
                                                                                    $GetEditorCode      = $Session:SaveCopyEditorCode
                                                                                    $GetDirFilePath     = $Session:ValidateItemFullName -replace '\\(?=[^\\]+$).*','\'
                                                                                    $CreateFilePath     = $GetNewSaveFileName
                                                                                    if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                        }else{
                                                                                            New-Item -ItemType File $CreateFilePath
                                                                                        }
                                                                                        
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                            $Session:CreateNewFilePathEditorBox = $CreateFilePath
                                                                                            $Session:GetValidateCodeItem = $GetEditorCode
                                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                            Show-UDToast -Message $CreateFilePath -Duration 5000
                                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                        }
                                                                                        else{
                                                                                            Show-UDToast -Message 'Create script file is failed' -Duration 5000
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                    }
                                                                                    $Session:CodeEditorSaveCondition = $true
                                                                                    $OpenCodeEditorSC|iex
                                                                                } -ClassName "task-center-box-btn"
                                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                                    
                                                                                    Hide-UDModal 
                                                                                } -ClassName "task-center-box-btn"
                                                                            }
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                                            Show-UDModal -Header {} -Content {
                                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File Full Name' -ClassName 'task-center-box-task-file-full-name-text' -Disabled -Value ($Session:SelectedTaskRow|ConvertFrom-Json).TaskFullName
                                                                                }
                                                                            } -Footer { 
                                                                                New-UDButton -Text "Save" -OnClick { 
                                                                                    $GetNewSaveFileName = (Get-UDElement -Id 'NewFileNameFromCodeEditorTextBox').Value
                                                                                    $GetEditorCode      = $Session:SaveCopyEditorCode
                                                                                    $GetDirFilePath     = $Session:ValidateItemFullName -replace '\\(?=[^\\]+$).*','\'
                                                                                    $CreateFilePath     = $GetNewSaveFileName
                                                                                    if((Test-Path $GetDirFilePath) -and $GetDirFilePath -and $GetNewSaveFileName){
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Show-UDToast -Message 'Overwrite exist script file' -Duration 5000
                                                                                        }else{
                                                                                            New-Item -ItemType File $CreateFilePath
                                                                                        }
                                                                                        
                                                                                        if(Test-Path $CreateFilePath){
                                                                                            Set-Content $CreateFilePath -Value $GetEditorCode
                                                                                            $Session:CreateNewFilePathEditorBox = $CreateFilePath
                                                                                            $Session:GetValidateCodeItem = $GetEditorCode
                                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                                            Show-UDToast -Message $CreateFilePath -Duration 5000
                                                                                            Show-UDToast -Message 'Create script file is successful' -Duration 5000
                                                                                        }
                                                                                        else{
                                                                                            Show-UDToast -Message 'Create script file is failed' -Duration 5000
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        Show-UDToast -Message 'Create script data is not valid' -Duration 5000
                                                                                    }
                                                                                    $Session:CodeEditorSaveCondition = $true
                                                                                    $OpenCodeEditorSC|iex
                                                                                } -ClassName "task-center-box-btn"
                                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                                    
                                                                                    Hide-UDModal 
                                                                                } -ClassName "task-center-box-btn"
                                                                            }
                                                                        }                                                                        
                                                                        # TASK CACHE SCRIPT DATA PATH JS PROCESS
                                                                        if(Test-Path $Cache:TaskScriptDataPathJS){
                                                                            $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                                            $TaskScriptDataGciJSPSCO = @()
                                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                                $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                    Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                                    Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                }
                                                                            }
                                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                                foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                                        Dir   = $currentDirItem.Name
                                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
            
                                                                            }
                                                                            $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                                        }
                                                                        else{
                                                                            # $Cache:TaskScriptDataPathJS = $null
                                                                        }
                                                                        # TASK CACHE SCRIPT DATA PATH PS PROCESS
                                                                        if(Test-Path $Cache:TaskScriptDataPathPS){
                                                                            $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                                            $TaskScriptDataGciPSPSCO = @()
                                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                                $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                    Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                                    Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                }
                                                                            }
                                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                                foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                                        Dir   = $currentDirItem.Name
                                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
            
                                                                            }
                                                                            $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                                        }
                                                                        else{
                                                                            # $Cache:TaskScriptDataPathPS = $null
                                                                        }
                                                                        # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                                        if(Test-Path $Cache:TaskScriptDataPathPY){
                                                                            $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                                            $TaskScriptDataGciPYPSCO = @()
                                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                                $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                    Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                                    Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                }
                                                                            }
                                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                                foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                                        Dir   = $currentDirItem.Name
                                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                                    }
                                                                                }
                                                                            }
                                                                            $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                                        }
                                                                        else{
                                                                            # $Cache:TaskScriptDataPathPY = $null
                                                                        }                                                                        
                                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDHtml -Markup '&nbsp;'
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDButton -Id 'TaskScriptblockCodeEditorBoxButtonGenerateFunctionsData' -Text 'Generate Functions' -OnClick {
                                                                        $GetEditorLanguage = (Get-UDElement -Id 'TaskScriptblockValidateCodeEditorBox').Language
                                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                                            $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                            $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                            $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                            if(Test-Path $ConfigPath){
                                                                                $ConfigPathGc        = gc $ConfigPath
                                                                                $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                                $ConfigTableNameList = @()
                                                                                if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                                    foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                        $ConfigTableNameList += $Name
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                                    $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                                }
                                                                                
                                                                                $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                                $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
            
                                                                                # GET GENERATOR
                                                                                if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
            
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'All'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'Selected'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
            
                                                                                # SET GENERATOR
                                                                                if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                    $SetCacheMethod = 'local'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                    $SetCacheMethod = 'psu'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                                    $SetCacheMethod = 'sql'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                    $SetCacheMethod = 'terminal'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                    $SetCacheMethod = 'terminal-cachefile'
                                                                                }                                                                                
            
                                                                                if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $SetCacheReturnType = 'All'
                                                                                }
                                                                                elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $SetCacheReturnType = 'Selected'
                                                                                }
            
                                                                                if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                                    $SetCacheFunctionType = 'Add'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                                    $SetCacheFunctionType = 'Delete'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                                    $SetCacheFunctionType = 'Update'
                                                                                }
            
                                                                                
            
                                                                                if($GetFunctions -and $SetFunctions){
                                                                                    $CommandScriptBlock = (
@'
        
'@)
            
                                                                                    $CommandList = @()
                                                                                    $num         = 0
                                                                                    foreach ($Argument in $ArgumentParameterList) {
                                                                                        $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                        $ImportGetCacheFunctionType = 'Get'
                                                                                        $ImportGetCacheMethod       = $GetCacheMethod
                                                                                        $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                        $ImportGetCachePoint        = $StartPoint
                                                                                        $ImportGetMandatoryArgument = $Argument
            
                                                                                        $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                        $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                        $ImportSetCacheMethod       = $SetCacheMethod
                                                                                        $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                        $ImportSetCachePoint        = $EndPoint
            
                                                                                        $ImportFunctionTableName    = $ConfigTableNameList[$num]
            
                                                                                        $CommandList += (((((((((((($CommandScriptBlock
                                                                                        ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                        ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                        ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                        ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                        ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                        ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                        ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                        ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                        ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                        ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                        ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                        ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                        $num++
                                                                                    }
                                                                                }
                                                                                
                                                                                $EditorCodeArrayList  = @()
                                                                                $EditorCodeArrayList += $GetFunctions
                                                                                $EditorCodeArrayList += $SetFunctions
                                                                                $EditorCodeArrayList += $null
                                                                                $EditorCodeArrayList += ''
                                                                                $EditorCodeArrayList += '// COMMAND SCRIPTBLOCK'
                                                                                $EditorCodeArrayList += ''
                                                                                foreach ($Command in $CommandList) {
                                                                                    $EditorCodeArrayList += $Command
                                                                                }
                                                                                
                                                                                
                                                                                #[string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
                                                                                [string]$EditorCodeArrayListString = '// The development of the application is not complete for the javascript language'
                                                                                
                                                                            }
                                                                            $Session:GetValidateCodeItem = $EditorCodeArrayListString
                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                            Show-UDToast -Message 'Generate functions is successful' -Duration 5000
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                                            $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                            $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                            $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                            if(Test-Path $ConfigPath){
                                                                                $ConfigPathGc        = gc $ConfigPath
                                                                                $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                                $ConfigTableNameList = @()
                                                                                if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                                    foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                        $ConfigTableNameList += $Name
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                                    $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                                }
                                                                                
                                                                                $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                                $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
            
                                                                                # GET GENERATOR
                                                                                if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
            
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'All'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'Selected'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
            
                                                                                # SET GENERATOR
                                                                                if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                    $SetCacheMethod = 'local'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                    $SetCacheMethod = 'psu'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                                    $SetCacheMethod = 'sql'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                    $SetCacheMethod = 'terminal'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                    $SetCacheMethod = 'terminal-cachefile'
                                                                                }                                                                                
            
                                                                                if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $SetCacheReturnType = 'All'
                                                                                }
                                                                                elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $SetCacheReturnType = 'Selected'
                                                                                }
            
                                                                                if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                                    $SetCacheFunctionType = 'Add'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                                    $SetCacheFunctionType = 'Delete'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                                    $SetCacheFunctionType = 'Update'
                                                                                }
            
                                                                                
            
                                                                                if($GetFunctions -and $SetFunctions){
                                                                                    $CommandScriptBlock = (
@'
$CacheData = importgetcachehashtabledatafromvariable
$Result    = importgetcachefunctiontypefromvariable-PSUCA-importtablenamefromlist -CacheMethod 'importgetcachemethodfromvariable' -CacheType 'importgetcachereturntypefromvariable' -CachePoint 'importgetcachepointfromvariable' -CacheData $CacheData -Argument_importgetmandatorytrueargumentnamefromvariable 0 
if($result -ne $false -and $result -ne 'null'){
    $Collection = $result|ConvertFrom-Json -Depth 100
    $ItemList   = @()
    $ArrayList  = @()
    $ArrayNum   = 0
    foreach ($Item in $Collection) {
        $ItemList  += $Item
        $ArrayList += $ArrayNum
        $ArrayNum++
    }
    if('' -ne $ItemList){
        $CacheData = importsetcachehashtabledatafromvariable
        $Result    = importsetcachefunctiontypefromvariable-PSUCA-importtablenamefromlist -CacheMethod 'importsetcachemethodfromvariable' -CacheType 'importsetcachereturntypefromvariable' -CachePoint 'importsetcachepointfromvariable' -CacheData $CacheData
    }
}
else{
    $Result = $false
}   
'@)
            
                                                                                    $CommandList = @()
                                                                                    $num         = 0
                                                                                    foreach ($Argument in $ArgumentParameterList) {
                                                                                        $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                        $ImportGetCacheFunctionType = 'Get'
                                                                                        $ImportGetCacheMethod       = $GetCacheMethod
                                                                                        $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                        $ImportGetCachePoint        = $StartPoint
                                                                                        $ImportGetMandatoryArgument = $Argument
            
                                                                                        $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                        $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                        $ImportSetCacheMethod       = $SetCacheMethod
                                                                                        $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                        $ImportSetCachePoint        = $EndPoint
            
                                                                                        $ImportFunctionTableName    = $ConfigTableNameList[$num]
            
                                                                                        $CommandList += (((((((((((($CommandScriptBlock
                                                                                        ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                        ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                        ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                        ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                        ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                        ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                        ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                        ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                        ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                        ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                        ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                        ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                        $num++
                                                                                    }
                                                                                }
                                                                                
                                                                                $EditorCodeArrayList  = @()
                                                                                $EditorCodeArrayList += $GetFunctions
                                                                                $EditorCodeArrayList += $SetFunctions
                                                                                $EditorCodeArrayList += $null
                                                                                $EditorCodeArrayList += ''
                                                                                $EditorCodeArrayList += '# COMMAND SCRIPTBLOCK'
                                                                                $EditorCodeArrayList += ''
                                                                                foreach ($Command in $CommandList) {
                                                                                    $EditorCodeArrayList += $Command
                                                                                }
                                                                                
                                                                                
                                                                                [string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
            
                                                                                
                                                                            }                                                                            
                                                                            $Session:GetValidateCodeItem = $EditorCodeArrayListString
                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                            Show-UDToast -Message 'Generate functions is successful' -Duration 5000
                                                                        }
                                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                                            $InfoGroupName = $Session:EntiyGroupIdSelectBoxData
                                                                            $InfoModelName = $Session:EntiyModelIdSelectBoxData
                                                                            $ConfigPath    = "$Cache:EntityCenterModelDatabaseListPath"+"$InfoGroupName"+'\'+"$InfoModelName"+'\'+'Config'+'.json'
                                                                            if(Test-Path $ConfigPath){
                                                                                $ConfigPathGc        = gc $ConfigPath
                                                                                $ConfigPathJson      = $ConfigPathGc|ConvertFrom-Json -Depth 100
                                                                                $ConfigTableNameList = @()
                                                                                if($Session:EntiyModelAttributeIdSelectBoxData -eq 'All'){
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data
                                                                                    foreach ($Name in $ConfigPathJsonSelect.Name) {
                                                                                        $ConfigTableNameList += $Name
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    $ConfigPathJsonSelect = $ConfigPathJson.Data | ? {$_.Name -eq $Session:EntiyModelAttributeIdSelectBoxData}
                                                                                    $ConfigTableNameList  = ($ConfigPathJson.Data).Name
                                                                                }
                                                                                
                                                                                $StartPoint = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                                                $EndPoint   = $Session:InterfaceBlocksEndPointIdSelectBoxData
            
                                                                                # GET GENERATOR
                                                                                if($Session:TaskGetMethodIdSelectBoxData -eq 'No Action'){
            
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'All'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
                                                                                elseif($Session:TaskGetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $ArgumentParameterList = @()
                                                                                    foreach ($Dataset in ($ConfigPathJson.Data).Datasets) {
                                                                                        if($Dataset.ItemType -eq 1){
                                                                                            $ArgumentParameterList += $Dataset.ItemName
                                                                                        }
                                                                                    }
                                                                                    $GetFunctions         = $ConfigPathJsonSelect.FunctionsGet
                                                                                    $GetCacheReturnType   = 'Selected'
                                                                                    if($Session:TaskGetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                        $GetCacheMethod = 'local'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                        $GetCacheMethod = 'psu'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'SQL'){
                                                                                        $GetCacheMethod = 'sql'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                        $GetCacheMethod = 'terminal'
                                                                                    }
                                                                                    elseif($Session:TaskGetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                        $GetCacheMethod = 'terminal-cachefile'
                                                                                    }                                                                                    
            
                                                                                    if($Session:TaskGetExpirationIdSelectBoxData -eq 'After Use'){
                                                                                        $GetCacheExpiration = 'use'
                                                                                    }
                                                                                    elseif($Session:TaskGetExpirationIdSelectBoxData -eq 'Never'){
                                                                                        $GetCacheExpiration = 'never'
                                                                                    }
                                                                                }
            
                                                                                # SET GENERATOR
                                                                                if($Session:TaskSetMethodIdSelectBoxData -eq 'Local Storage'){
                                                                                    $SetCacheMethod = 'local'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'PSU Server'){
                                                                                    $SetCacheMethod = 'psu'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'SQL'){
                                                                                    $SetCacheMethod = 'sql'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal'){
                                                                                    $SetCacheMethod = 'terminal'
                                                                                }
                                                                                elseif($Session:TaskSetMethodIdSelectBoxData -eq 'Terminal Cache File'){
                                                                                    $SetCacheMethod = 'terminal-cachefile'
                                                                                }                                                                                
            
                                                                                if($Session:TaskSetReturnTypeIdSelectBoxData -eq 'All'){
                                                                                    $SetCacheReturnType = 'All'
                                                                                }
                                                                                elseif($Session:TaskSetReturnTypeIdSelectBoxData -eq 'Selected'){
                                                                                    $SetCacheReturnType = 'Selected'
                                                                                }
            
                                                                                if($Session:TaskSetTypeIdSelectBoxData -eq 'Add'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsAdd
                                                                                    $SetCacheFunctionType = 'Add'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Delete'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsDelete
                                                                                    $SetCacheFunctionType = 'Delete'
                                                                                }
                                                                                elseif($Session:TaskSetTypeIdSelectBoxData -eq 'Update'){
                                                                                    $SetFunctions          = $ConfigPathJsonSelect.FunctionsUpdate
                                                                                    $SetCacheFunctionType = 'Update'
                                                                                }
            
                                                                                
            
                                                                                if($GetFunctions -and $SetFunctions){
                                                                                    $CommandScriptBlock = (
@'
        
'@)
            
                                                                                    $CommandList = @()
                                                                                    $num         = 0
                                                                                    foreach ($Argument in $ArgumentParameterList) {
                                                                                        $ImportGetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$null'+';'+'Content=$null'+'}'
                                                                                        $ImportGetCacheFunctionType = 'Get'
                                                                                        $ImportGetCacheMethod       = $GetCacheMethod
                                                                                        $ImportGetCacheReturnType   = $GetCacheReturnType
                                                                                        $ImportGetCachePoint        = $StartPoint
                                                                                        $ImportGetMandatoryArgument = $Argument
            
                                                                                        $ImportSetCacheHashtable    = '@'+'{'+'Path='+"'"+'d:\PSUCA\database\modules\entitycenter\'+"'"+';'+'ArrayList=$ArrayList;Content=$ItemList'+'}'
                                                                                        $ImportSetCacheFunctionType = $SetCacheFunctionType
                                                                                        $ImportSetCacheMethod       = $SetCacheMethod
                                                                                        $ImportSetCacheReturnType   = $SetCacheReturnType
                                                                                        $ImportSetCachePoint        = $EndPoint
            
                                                                                        $ImportFunctionTableName    = $ConfigTableNameList[$num]
            
                                                                                        $CommandList += (((((((((((($CommandScriptBlock
                                                                                        ) -replace 'importgetcachehashtabledatafromvariable',"$ImportGetCacheHashtable"
                                                                                        ) -replace 'importgetcachefunctiontypefromvariable',"$ImportGetCacheFunctionType"
                                                                                        ) -replace 'importgetcachemethodfromvariable',"$ImportGetCacheMethod"
                                                                                        ) -replace 'importgetcachereturntypefromvariable',"$ImportGetCacheReturnType"
                                                                                        ) -replace 'importgetcachepointfromvariable',"$ImportGetCachePoint"
                                                                                        ) -replace 'importgetmandatorytrueargumentnamefromvariable',"$ImportGetMandatoryArgument"
                                                                                        ) -replace 'importsetcachehashtabledatafromvariable',"$ImportSetCacheHashtable"
                                                                                        ) -replace 'importsetcachefunctiontypefromvariable',"$ImportSetCacheFunctionType"
                                                                                        ) -replace 'importsetcachemethodfromvariable',"$ImportSetCacheMethod"
                                                                                        ) -replace 'importsetcachereturntypefromvariable',"$ImportSetCacheReturnType"
                                                                                        ) -replace 'importsetcachepointfromvariable',"$ImportSetCachePoint"
                                                                                        ) -replace 'importtablenamefromlist',"$ImportFunctionTableName"
                                                                                        $num++
                                                                                    }
                                                                                }
                                                                                
                                                                                $EditorCodeArrayList  = @()
                                                                                $EditorCodeArrayList += $GetFunctions
                                                                                $EditorCodeArrayList += $SetFunctions
                                                                                $EditorCodeArrayList += $null
                                                                                $EditorCodeArrayList += ''
                                                                                $EditorCodeArrayList += '# COMMAND SCRIPTBLOCK'
                                                                                $EditorCodeArrayList += ''
                                                                                foreach ($Command in $CommandList) {
                                                                                    $EditorCodeArrayList += $Command
                                                                                }
                                                                                
                                                                                
                                                                                #[string]$EditorCodeArrayListString = $EditorCodeArrayList | Out-String
                                                                                [string]$EditorCodeArrayListString = '# The development of the application is not complete for the python language'
            
                                                                                
                                                                            }                                                                            
                                                                            $Session:GetValidateCodeItem = $EditorCodeArrayListString
                                                                            Sync-UDElement -Id 'TaskScriptblockValidateDynamicCodeEditorBox'
                                                                            Show-UDToast -Message 'Generate functions is successful' -Duration 5000
                                                                        }
                                                                    } -ClassName "task-center-box-btn"
                                                                }
                                                            }
                                                        }
                                                    }
                                                } -Footer { 
                                                    New-UDButton -Text "Close" -OnClick {
                                                        $Session:SelectedTaskRow = $null
                                                        # TASK CACHE SCRIPT DATA PATH JS PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathJS){
                                                            $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                            $TaskScriptDataGciJSPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
            
                                                            }
                                                            $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathJS = $null
                                                        }
                                                        # TASK CACHE SCRIPT DATA PATH PS PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathPS){
                                                            $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                            $TaskScriptDataGciPSPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
            
                                                            }
                                                            $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathPS = $null
                                                        }
                                                        # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathPY){
                                                            $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                            $TaskScriptDataGciPYPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
            
                                                            }
                                                            $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathPY = $null
                                                        }                                                                        
                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'    
                                                        Hide-UDModal
                                                    } -ClassName "task-center-box-btn" 
                                                } -FullScreen
                                            }
                                            if($Session:SelectedTaskRow){
                                                $OpenCodeEditorSC|iex
                                            }
                                            else{
                                                Show-UDToast -Message 'Script is not selected!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Create New Directory Path' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath = $Cache:TaskScriptDataPathJS
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text 'Create new script path directory'
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Directory Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                        $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $New = New-Item -ItemType Directory $NewDirNamePath -Force
                                                            $Cache:TaskCacheScriptDataProcessJS|iex
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Create new directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath = $Cache:TaskScriptDataPathPS
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text 'Create new script path directory'
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Directory Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                        $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $New = New-Item -ItemType Directory $NewDirNamePath -Force
                                                            $Cache:TaskCacheScriptDataProcessPS|iex
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Create new directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath = $Cache:TaskScriptDataPathPY
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text 'Create new script path directory'
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Directory Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                        $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $New = New-Item -ItemType Directory $NewDirNamePath -Force
                                                            $Cache:TaskCacheScriptDataProcessPY|iex
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Create new directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Remove Directory Path' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($Session:TaskScriptPathSelectResult -eq 'js' -or $Session:TaskScriptPathSelectResult -eq 'ps' -or $Session:TaskScriptPathSelectResult -eq 'py' -or $Session:TaskScriptPathSelectResult -eq 'Default'){
                                                Show-UDToast -Message ('Directory named: '+"$Session:TaskScriptPathSelectResult"+' cannot be removed!') -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                            }
                                            else{
                                                if($GetEditorLanguage -eq 'Javascript'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathJS
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Remove directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDButton -Text "Remove" -OnClick {
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $OldDirNamePathGci = gci $OldDirNamePath
                                                            $OldDirNamePathValidation = $OldDirNamePathGci | ? {$_.Mode -match '-a---'}
                                                            if($null -ne $OldDirNamePathValidation){
                                                                Show-UDToast -Message 'Directory contains files!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $OldDirNamePath)){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Remove directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is not exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                                elseif($GetEditorLanguage -eq 'Powershell'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathPS
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Remove directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDButton -Text "Remove" -OnClick {
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $OldDirNamePathGci = gci $OldDirNamePath
                                                            $OldDirNamePathValidation = $OldDirNamePathGci | ? {$_.Mode -match '-a---'}
                                                            if($null -ne $OldDirNamePathValidation){
                                                                Show-UDToast -Message 'Directory contains files!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $OldDirNamePath)){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                                elseif($GetEditorLanguage -eq 'Python'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathPY
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Remove directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDButton -Text "Remove" -OnClick {
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $OldDirNamePathGci = gci $OldDirNamePath
                                                            $OldDirNamePathValidation = $OldDirNamePathGci | ? {$_.Mode -match '-a---'}
                                                            if($null -ne $OldDirNamePathValidation){
                                                                Show-UDToast -Message 'Directory contains files!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $OldDirNamePath)){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Rename Directory Path' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($Session:TaskScriptPathSelectResult -eq 'js' -or $Session:TaskScriptPathSelectResult -eq 'ps' -or $Session:TaskScriptPathSelectResult -eq 'py' -or $Session:TaskScriptPathSelectResult -eq 'Default'){
                                                Show-UDToast -Message ('Directory named: '+"$Session:TaskScriptPathSelectResult"+' cannot be renamed!') -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                            }
                                            else{
                                                if($GetEditorLanguage -eq 'Javascript'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathJS
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Rename directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDElement -Tag 'table' -Content {
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTypography -Text 'New Directory Name' -ClassName 'task-center-box-inner-title'
                                                                    }
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        New-UDButton -Text "Save" -OnClick {
                                                            $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                            $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                            $string = $GetNewName
                                                            $SpecialChars = $String -replace $pattern
                                                            if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                                Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                                $OldDirNamePathGci            = gci $OldDirNamePath
                                                                $ConfigurationListGci         = gci $Cache:TaskListConfigurationDatabasePath
                                                                if($ConfigurationListGci.Count -eq 0){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessJS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal    
                                                                }
                                                                else{
                                                                    $ConfigurationPathCondition   = $false
                                                                    $ConfigurationStatusCondition = $false
                                                                    $ConfigurationIndexArrayGood  = @()
                                                                    $ConfigurationIndexArrayBad   = @()
                                                                    $ConfigurationIndex           = 0
                                                                    foreach ($Configuration in $ConfigurationListGci) {
                                                                        $ConfigurationFullName   = $Configuration.FullName
                                                                        $ConfigurationGc         = gc $ConfigurationFullName
                                                                        $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                        $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                        $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                        if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                            $ConfigurationPathCondition   = $true
                                                                            $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                            if($ConfigurationTaskStatus -eq 'Active'){
                                                                                $ConfigurationStatusCondition = $true
                                                                                $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                            }
                                                                        }
                                                                        $ConfigurationIndex++
                                                                    }
                                                                    if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                        $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Error: Directory contains files with Active Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                        $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                        $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            New-UDButton -Text "Overwrite files" -OnClick {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                    $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                    $ConfigurationGc       = gc $ConfigurationFullName
                                                                                    $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                    $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                    $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                    $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                    $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                                }
                                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                                Hide-UDModal 
                                                                            } -ClassName "task-center-box-btn"
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:TaskScriptPathSelectResult = 'Default'
                                                                        $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                        $Cache:TaskCacheScriptDataProcessJS|iex
                                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                        Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                        Hide-UDModal                                                                    
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                                elseif($GetEditorLanguage -eq 'Powershell'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathPS
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Rename directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDElement -Tag 'table' -Content {
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTypography -Text 'New Directory Name' -ClassName 'task-center-box-inner-title'
                                                                    }
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        New-UDButton -Text "Save" -OnClick {
                                                            $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                            $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                            $string = $GetNewName
                                                            $SpecialChars = $String -replace $pattern
                                                            if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                                Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                                $OldDirNamePathGci            = gci $OldDirNamePath
                                                                $ConfigurationListGci         = gci $Cache:TaskListConfigurationDatabasePath
                                                                if($ConfigurationListGci.Count -eq 0){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal 
                                                                }
                                                                else{
                                                                    $ConfigurationPathCondition   = $false
                                                                    $ConfigurationStatusCondition = $false
                                                                    $ConfigurationIndexArrayGood  = @()
                                                                    $ConfigurationIndexArrayBad   = @()
                                                                    $ConfigurationIndex           = 0
                                                                    foreach ($Configuration in $ConfigurationListGci) {
                                                                        $ConfigurationFullName   = $Configuration.FullName
                                                                        $ConfigurationGc         = gc $ConfigurationFullName
                                                                        $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                        $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                        $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                        if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                            $ConfigurationPathCondition   = $true
                                                                            $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                            if($ConfigurationTaskStatus -eq 'Active'){
                                                                                $ConfigurationStatusCondition = $true
                                                                                $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                            }
                                                                        }
                                                                        $ConfigurationIndex++
                                                                    }
                                                                    if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                        $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Error: Directory contains files with Active Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                        $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                        $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            New-UDButton -Text "Overwrite files" -OnClick {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                    $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                    $ConfigurationGc       = gc $ConfigurationFullName
                                                                                    $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                    $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                    $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                    $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                    $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                                }
                                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                                Hide-UDModal
                                                                            } -ClassName "task-center-box-btn"
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:TaskScriptPathSelectResult = 'Default'
                                                                        $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                        $Cache:TaskCacheScriptDataProcessPS|iex
                                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                        Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                        Hide-UDModal
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                                elseif($GetEditorLanguage -eq 'Python'){
                                                    $DefaultDirPath = $Cache:TaskScriptDataPathPY
                                                    Show-UDModal -Header {
                                                        New-UDTypography -Text ('Rename directory path: '+"$Session:TaskScriptPathSelectResult")
                                                    } -Content {
                                                        New-UDElement -Tag 'table' -Content {
                                                            New-UDElement -Tag 'tr' -Content {
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTypography -Text 'New Directory Name' -ClassName 'task-center-box-inner-title'
                                                                    }
                                                                }
                                                                New-UDElement -Tag 'td' -Content {
                                                                    New-UDElement -Tag 'tr' -Content {
                                                                        New-UDTextbox -Id 'TaskScriptPathDirNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        New-UDButton -Text "Save" -OnClick {
                                                            $GetNewName = (Get-UDElement -Id 'TaskScriptPathDirNameIdTextBox').Value
                                                            $NewDirNamePath = "$DefaultDirPath"+$GetNewName
                                                            $OldDirNamePath = "$DefaultDirPath"+$Session:TaskScriptPathSelectResult
                                                            $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                            $string = $GetNewName
                                                            $SpecialChars = $String -replace $pattern
                                                            if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                                Show-UDToast -Message 'Directory name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                            elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $GetNewName -and $true -ne $(Test-Path $NewDirNamePath)){
                                                                $OldDirNamePathGci            = gci $OldDirNamePath
                                                                $ConfigurationListGci         = gci $Cache:TaskListConfigurationDatabasePath
                                                                if($ConfigurationListGci.Count -eq 0){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPY|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }
                                                                else{
                                                                    $ConfigurationPathCondition   = $false
                                                                    $ConfigurationStatusCondition = $false
                                                                    $ConfigurationIndexArrayGood  = @()
                                                                    $ConfigurationIndexArrayBad   = @()
                                                                    $ConfigurationIndex           = 0
                                                                    foreach ($Configuration in $ConfigurationListGci) {
                                                                        $ConfigurationFullName   = $Configuration.FullName
                                                                        $ConfigurationGc         = gc $ConfigurationFullName
                                                                        $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                        $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                        $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                        if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                            $ConfigurationPathCondition   = $true
                                                                            $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                            if($ConfigurationTaskStatus -eq 'Active'){
                                                                                $ConfigurationStatusCondition = $true
                                                                                $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                            }
                                                                        }
                                                                        $ConfigurationIndex++
                                                                    }
                                                                    if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                        $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Error: Directory contains files with Active Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                        $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                        $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                        $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                        Show-UDModal -Header {
                                                                            New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                        } -Content {
                                                                            New-UDElement -Tag 'table' -Content {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    New-UDElement -Tag 'tr' -Content {
                                                                                        New-UDElement -Tag 'td' -Content {
                                                                                            New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            New-UDButton -Text "Overwrite files" -OnClick {
                                                                                foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                    $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                    $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                    $ConfigurationGc       = gc $ConfigurationFullName
                                                                                    $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                    $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                    $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                    $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                    $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                                }
                                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                                Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                                Hide-UDModal
                                                                            } -ClassName "task-center-box-btn"
                                                                        } -Footer {
                                                                            New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                        }
                                                                    }
                                                                    elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                        $Session:TaskScriptPathSelectResult = 'Default'
                                                                        $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                        $Cache:TaskCacheScriptDataProcessPY|iex
                                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                        Show-UDToast -Message 'Rename directory is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                        Hide-UDModal
                                                                    }
                                                                }
                                                            }
                                                            else{
                                                                Show-UDToast -Message 'Directory is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                            }
                                                        } -ClassName "task-center-box-btn"
                                                    } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                                }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Clone Script' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathJS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                $OldDirNameData = gc $OldDirNamePath
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Clone Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Clone" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                            $NewDirNamePath = "$DefaultDirPath"+'CLONE_'+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+'CLONE_'+"$GetValidateItem")
                                                        }
                                                        if($true -ne $(Test-Path $NewDirNamePath) -and $OldDirNameData){
                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                            $New = New-Item -ItemType File $NewDirNamePath -Force
                                                            if($true -eq $(Test-Path $NewDirNamePath)){
                                                                $Set = Set-Content $NewDirNamePath -Value $OldDirNameData -Force
                                                            }
                                                            $Cache:TaskCacheScriptDataProcessJS|iex
                                                            
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Clone Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Clone" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                            $NewDirNamePath = "$DefaultDirPath"+'CLONE_'+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+'CLONE_'+"$GetValidateItem")
                                                        }
                                                        if($true -ne $(Test-Path $NewDirNamePath) -and $OldDirNameData){
                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                            $New = New-Item -ItemType File $NewDirNamePath -Force
                                                            if($true -eq $(Test-Path $NewDirNamePath)){
                                                                $Set = Set-Content $NewDirNamePath -Value $OldDirNameData -Force
                                                            }
                                                            $Cache:TaskCacheScriptDataProcessPS|iex
                                                            
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPY
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Clone Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Clone" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                            $NewDirNamePath = "$DefaultDirPath"+'CLONE_'+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+'CLONE_'+"$GetValidateItem")
                                                        }
                                                        if($true -ne $(Test-Path $NewDirNamePath) -and $OldDirNameData){
                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                            $New = New-Item -ItemType File $NewDirNamePath -Force
                                                            if($true -eq $(Test-Path $NewDirNamePath)){
                                                                $Set = Set-Content $NewDirNamePath -Value $OldDirNameData -Force
                                                            }
                                                            $Cache:TaskCacheScriptDataProcessPY|iex
                                                            
                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                            Hide-UDModal
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }                                
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Move Script To Another Directory' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathJS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Move Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Script Path' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    $Session:SelectScriptDirPathSC|iex
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Move" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                        }
                                                        if($true -eq $(Test-Path $OldDirNamePath) -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessJS|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessJS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Move Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Script Path' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    $Session:SelectScriptDirPathSC|iex
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Move" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                        }
                                                        if($true -eq $(Test-Path $OldDirNamePath) -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessPS|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPY
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Move Script: '+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'Script Path' -ClassName 'task-center-box-inner-title' -Style @{width='100px'}
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    $Session:SelectScriptDirPathSC|iex
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Move" -OnClick {
                                                        if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetValidateItem"
                                                        }
                                                        else{
                                                            $NewDirNamePath = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                        }
                                                        if($true -eq $(Test-Path $OldDirNamePath) -and $true -ne $(Test-Path $NewDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessPY|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Move = Move-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPY|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Move file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'File is exist in new path!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Remove Script' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathJS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Remove Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Remove" -OnClick {
                                                        if($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Remove = Remove-Item $OldDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessJS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Remove Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Remove" -OnClick {
                                                        if($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Remove = Remove-Item $OldDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPY
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Remove Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDButton -Text "Remove" -OnClick {
                                                        if($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath)){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Remove = Remove-Item $OldDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Remove = Remove-Item $OldDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPY|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Remove script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Rename Script' -OnClick {
                                            $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                            if($GetEditorLanguage -eq 'Javascript'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathJS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathJSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'js'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Rename Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'New Script Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskRenameScriptNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskRenameScriptNameIdTextBox').Value
                                                        if($DefaultDir -eq $true){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetNewName"+'.js'
                                                        }
                                                        else{
                                                            $NewDirNamePath = "$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetNewName"+'.js'
                                                        }
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Script name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $false -eq $(Test-Path $NewDirNamePath) -and $GetNewName){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessJS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessJS|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessJS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Powershell'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPS
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPSFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'ps'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Rename Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'New Script Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskRenameScriptNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskRenameScriptNameIdTextBox').Value
                                                        if($DefaultDir -eq $true){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetNewName"+'.ps'
                                                        }
                                                        else{
                                                            $NewDirNamePath = "$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetNewName"+'.ps'
                                                        }
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Script name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $false -eq $(Test-Path $NewDirNamePath) -and $GetNewName){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPS|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessPS|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPS|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                            elseif($GetEditorLanguage -eq 'Python'){
                                                $DefaultDirPath  = $Cache:TaskScriptDataPathPY
                                                $GetValidatePath = $Cache:SelectDirTaskScriptDataPathPYFiles
                                                $GetValidateItem = (($GetValidatePath)[($Session:SelectedTaskRow|ConvertFrom-Json).Id]).Name
                                                if($Session:TaskScriptPathSelectResult -eq 'py'){
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$GetValidateItem")
                                                    $DefaultDir      = $true
                                                }
                                                else{
                                                    $OldDirNamePath  = ("$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetValidateItem")
                                                    $DefaultDir      = $false
                                                }
                                                Show-UDModal -Header {
                                                    New-UDTypography -Text ('Rename Script: '+"$GetValidateItem")
                                                } -Content {
                                                    New-UDElement -Tag 'table' -Content {
                                                        New-UDElement -Tag 'tr' -Content {
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTypography -Text 'New Script Name' -ClassName 'task-center-box-inner-title'
                                                                }
                                                            }
                                                            New-UDElement -Tag 'td' -Content {
                                                                New-UDElement -Tag 'tr' -Content {
                                                                    New-UDTextbox -Id 'TaskRenameScriptNameIdTextBox' -Type text -ClassName 'task-center-box-task-name-text'
                                                                }
                                                            }
                                                        }
                                                    }
                                                    New-UDButton -Text "Save" -OnClick {
                                                        $GetNewName = (Get-UDElement -Id 'TaskRenameScriptNameIdTextBox').Value
                                                        if($DefaultDir -eq $true){
                                                            $NewDirNamePath = "$DefaultDirPath"+"$GetNewName"+'.py'
                                                        }
                                                        else{
                                                            $NewDirNamePath = "$DefaultDirPath"+"$Session:TaskScriptPathSelectResult"+'\'+"$GetNewName"+'.py'
                                                        }
                                                        $pattern = "[^" + [regex]::Escape("~!@#$%^&()-.+=}{\/|;:<>?'*") + "]"
                                                        $string = $GetNewName
                                                        $SpecialChars = $String -replace $pattern
                                                        if($SpecialChars.Length -gt 0 -or $GetNewName -match ' '){
                                                            Show-UDToast -Message 'Script name is not valid!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                        elseif($true -eq $(Test-Path $DefaultDirPath) -and $true -eq $(Test-Path $OldDirNamePath) -and $false -eq $(Test-Path $NewDirNamePath) -and $GetNewName){
                                                            $OldDirNamePathGci    = gci $OldDirNamePath
                                                            $ConfigurationListGci = gci $Cache:TaskListConfigurationDatabasePath
                                                            if($ConfigurationListGci.Count -eq 0){
                                                                $Session:TaskScriptPathSelectResult = 'Default'
                                                                $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                $Cache:TaskCacheScriptDataProcessPY|iex
                                                                Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                Hide-UDModal
                                                            }
                                                            else{
                                                                $ConfigurationPathCondition   = $false
                                                                $ConfigurationStatusCondition = $false
                                                                $ConfigurationIndexArrayGood  = @()
                                                                $ConfigurationIndexArrayBad   = @()
                                                                $ConfigurationIndex           = 0
                                                                foreach ($Configuration in $ConfigurationListGci) {
                                                                    $ConfigurationFullName   = $Configuration.FullName
                                                                    $ConfigurationGc         = gc $ConfigurationFullName
                                                                    $ConfigurationJson       = $ConfigurationGc|ConvertFrom-Json
                                                                    $ConfigurationScriptPath = $ConfigurationJson.TaskScriptBlockFullName
                                                                    $ConfigurationTaskStatus = $ConfigurationJson.TaskStatus
                                                                    if(($ConfigurationScriptPath -replace '\\') -match ($OldDirNamePath -replace '\\')){
                                                                        $ConfigurationPathCondition   = $true
                                                                        $ConfigurationIndexArrayGood += $ConfigurationIndex
                                                                        if($ConfigurationTaskStatus -eq 'Active'){
                                                                            $ConfigurationStatusCondition = $true
                                                                            $ConfigurationIndexArrayBad  += $ConfigurationIndex
                                                                        }
                                                                    }
                                                                    $ConfigurationIndex++
                                                                }
                                                                if($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $true){
                                                                    $Session:SaveConfigurationListGci       = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayBad = $ConfigurationIndexArrayBad
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Error: Task list contains same script path with Active Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayBad) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" 
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $true -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:SaveConfigurationListGci        = $ConfigurationListGci
                                                                    $Session:SaveConfigurationIndexArrayGood = $ConfigurationIndexArrayGood
                                                                    $Session:SaveNewDirNamePath              = $NewDirNamePath
                                                                    $Session:SaveOldDirNamePath              = $OldDirNamePath
                                                                    Show-UDModal -Header {
                                                                        New-UDTypography -Text 'Warning: Directory contains files with Inactive Status!'
                                                                    } -Content {
                                                                        New-UDElement -Tag 'table' -Content {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                New-UDElement -Tag 'tr' -Content {
                                                                                    New-UDElement -Tag 'td' -Content {
                                                                                        New-UDTypography -Text (($Session:SaveConfigurationListGci[$Index]).Name) -ClassName 'task-center-box-inner-title'
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        New-UDButton -Text "Overwrite files" -OnClick {
                                                                            foreach ($Index in $Session:SaveConfigurationIndexArrayGood) {
                                                                                $ConfigurationFullName = (($Session:SaveConfigurationListGci[$Index]).FullName)
                                                                                $ConfigurationName = (($Session:SaveConfigurationListGci[$Index]).Name)
                                                                                $ConfigurationGc       = gc $ConfigurationFullName
                                                                                $ConfigurationJson     = $ConfigurationGc|ConvertFrom-Json
                                                                                $NewRootScriptPath     = (($ConfigurationJson.TaskScriptBlockFullName -replace '\\','----SPECIALCHAR----') -replace ($Session:SaveOldDirNamePath -replace '\\','----SPECIALCHAR----'),($Session:SaveNewDirNamePath -replace '\\','----SPECIALCHAR----')) -replace '----SPECIALCHAR----','\'
                                                                                $ConfigurationJson.TaskScriptBlockFullName = $NewRootScriptPath
                                                                                $ConfigurationConvert = $ConfigurationJson|ConvertTo-Json
                                                                                $Save = Set-Content $ConfigurationFullName -Value $ConfigurationConvert -Force
                                                                            }
                                                                            $Session:TaskScriptPathSelectResult = 'Default'
                                                                            $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                            $Cache:TaskCacheScriptDataProcessPY|iex
                                                                            Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                            Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                            Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                            Hide-UDModal
                                                                        } -ClassName "task-center-box-btn"
                                                                    } -Footer {
                                                                        New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn"
                                                                    }
                                                                }
                                                                elseif($ConfigurationPathCondition -eq $false -and $ConfigurationStatusCondition -eq $false){
                                                                    $Session:TaskScriptPathSelectResult = 'Default'
                                                                    $Rename = Rename-Item $OldDirNamePath $NewDirNamePath -Force
                                                                    $Cache:TaskCacheScriptDataProcessPY|iex
                                                                    Sync-UDElement -Id 'SelectScriptDirPathDynamicRestart'
                                                                    Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                                    Show-UDToast -Message 'Rename script is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Hide-UDModal
                                                                }                                                                
                                                            }
                                                        }
                                                        else{
                                                            Show-UDToast -Message 'Script is exist!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon 'Ban' -Title 'Error:' -Duration 5000
                                                        }
                                                    } -ClassName "task-center-box-btn"
                                                } -Footer { New-UDButton -Text "Close" -OnClick { Hide-UDModal } -ClassName "task-center-box-btn" }
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }                                
                                New-UDElement -Tag 'tr' -Content {
                                    New-UDElement -Tag 'td' -Content {
                                        New-UDButton -Text 'Create New Task' -OnClick {
                                            if($Session:SelectedTaskRow){
                                                $FormContent = $null
                                                $Session:GlobalFormContent = $null
                                                $FormContent = [PSCustomObject]@{
                                                    TaskUniqueId                         = ([guid]::NewGuid()).Guid
                                                    TaskNameIdTextBox                    = (Get-UDElement -Id 'TaskNameIdTextBox').Value
                                                    TaskGroupIdSelectBox                 = $Session:TaskGroupIdSelectBoxData
                                                    TaskTypeIdSelectBox                  = $Session:TaskTypeIdSelectBoxData
                                                    TaskMethodTypeIdSelectBox            = $Session:TaskMethodTypeIdSelectBoxData
                                                    TaskGetMethodIdSelectBox             = $Session:TaskGetMethodIdSelectBoxData
                                                    TaskGetReturnTypeIdSelectBox         = $Session:TaskGetReturnTypeIdSelectBoxData
                                                    TaskGetExpirationIdSelectBox         = $Session:TaskGetExpirationIdSelectBoxData
                                                    TaskSetMethodIdSelectBox             = $Session:TaskSetMethodIdSelectBoxData
                                                    TaskSetReturnTypeIdSelectBox         = $Session:TaskSetReturnTypeIdSelectBoxData
                                                    TaskSetTypeIdSelectBox               = $Session:TaskSetTypeIdSelectBoxData
                                                    InterfaceBlocksStartPointIdSelectBox = $Session:InterfaceBlocksStartPointIdSelectBoxData
                                                    InterfaceBlocksEndPointIdSelectBox   = $Session:InterfaceBlocksEndPointIdSelectBoxData
                                                    EntiyGroupIdSelectBox                = $Session:EntiyGroupIdSelectBoxData
                                                    EntiyModelIdSelectBox                = $Session:EntiyModelIdSelectBoxData
                                                    EntiyModelAttributeIdSelectBox       = $Session:EntiyModelAttributeIdSelectBoxData
                                                    TaskStartDateDayTextBox              = (Get-UDElement -Id 'TaskStartDateDayTextBox').Value
                                                    TaskStartDateMonthTextBox            = (Get-UDElement -Id 'TaskStartDateMonthTextBox').Value
                                                    TaskStartDateYearTextBox             = (Get-UDElement -Id 'TaskStartDateYearTextBox').Value
                                                    TaskEndDateDayTextBox                = (Get-UDElement -Id 'TaskEndDateDayTextBox').Value
                                                    TaskEndDateMonthTextBox              = (Get-UDElement -Id 'TaskEndDateMonthTextBox').Value
                                                    TaskEndDateYearTextBox               = (Get-UDElement -Id 'TaskEndDateYearTextBox').Value
                                                    TaskStartTimeHourTextBox             = (Get-UDElement -Id 'TaskStartTimeHourTextBox').Value
                                                    TaskStartTimeMinuteTextBox           = (Get-UDElement -Id 'TaskStartTimeMinuteTextBox').Value
                                                    TaskStartTimeSecondTextBox           = (Get-UDElement -Id 'TaskStartTimeSecondTextBox').Value
                                                    TaskEndTimeHourTextBox               = (Get-UDElement -Id 'TaskEndTimeHourTextBox').Value
                                                    TaskEndTimeMinuteTextBox             = (Get-UDElement -Id 'TaskEndTimeMinuteTextBox').Value
                                                    TaskEndTimeSecondTextBox             = (Get-UDElement -Id 'TaskEndTimeSecondTextBox').Value
                                                    TaskLimitTimeHourTextBox             = (Get-UDElement -Id 'TaskLimitTimeHourTextBox').Value
                                                    TaskLimitTimeMinuteTextBox           = (Get-UDElement -Id 'TaskLimitTimeMinuteTextBox').Value
                                                    TaskLimitTimeSecondTextBox           = (Get-UDElement -Id 'TaskLimitTimeSecondTextBox').Value
                                                    TaskRepetitionTimeHourTextBox        = (Get-UDElement -Id 'TaskRepetitionTimeHourTextBox').Value
                                                    TaskRepetitionTimeMinuteTextBox      = (Get-UDElement -Id 'TaskRepetitionTimeMinuteTextBox').Value
                                                    TaskRepetitionTimeSecondTextBox      = (Get-UDElement -Id 'TaskRepetitionTimeSecondTextBox').Value
                                                    TaskWindowStyleIdSelectBox           = $Session:TaskWindowStyleIdSelectBoxData
                                                    TaskSelectScriptTypeBox              = $Session:TaskSelectScriptTypeBoxData
                                                    TaskScriptblockLanguageSelectBox     = $Cache:GetScriptBlockLanguage
                                                    TaskScriptBlockFullName              = ($Session:SelectedTaskRow|ConvertFrom-Json).TaskFullName
                                                    TaskStatus                           = 'Inactive'
                                                }
                
                                                $Session:GlobalFormContent = $FormContent
                
                                                if ($FormContent.TaskNameIdTextBox -eq $null -or $FormContent.TaskNameIdTextBox -eq '') {
                                                    Show-UDToast -Message 'Task Name is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon1 = $true
                                                }
                                                if ($FormContent.TaskGroupIdSelectBox -eq $null -or $FormContent.TaskGroupIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Group is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon2 = $true
                                                }
                                                if ($FormContent.TaskTypeIdSelectBox -eq $null -or $FormContent.TaskTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon3 = $true
                                                }
                                                if ($FormContent.TaskMethodTypeIdSelectBox -eq $null -or $FormContent.TaskMethodTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon4 = $true
                                                }
                                                if ($FormContent.TaskGetMethodIdSelectBox -eq $null -or $FormContent.TaskGetMethodIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon5 = $true
                                                }
                                                if ($FormContent.TaskGetReturnTypeIdSelectBox -eq $null -or $FormContent.TaskGetReturnTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Return Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon6 = $true
                                                }
                                                if ($FormContent.TaskGetExpirationIdSelectBox -eq $null -or $FormContent.TaskGetExpirationIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Get Expiration is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon7 = $true
                                                }
                                                if ($FormContent.TaskSetMethodIdSelectBox -eq $null -or $FormContent.TaskSetMethodIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Method is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon8 = $true
                                                }
                                                if ($FormContent.TaskSetReturnTypeIdSelectBox -eq $null -or $FormContent.TaskSetReturnTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Return Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon9 = $true
                                                }
                                                if ($FormContent.TaskSetTypeIdSelectBox -eq $null -or $FormContent.TaskSetTypeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Set Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon10 = $true
                                                }
                                                if ($FormContent.InterfaceBlocksStartPointIdSelectBox -eq $null -or $FormContent.InterfaceBlocksStartPointIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Interface Start Point is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon11 = $true
                                                }
                                                if ($FormContent.InterfaceBlocksEndPointIdSelectBox -eq $null -or $FormContent.InterfaceBlocksEndPointIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Interface End Point is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon12 = $true
                                                }
                                                if ($FormContent.EntiyGroupIdSelectBox -eq $null -or $FormContent.EntiyGroupIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Group is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon13 = $true
                                                }
                                                if ($FormContent.EntiyModelIdSelectBox -eq $null -or $FormContent.EntiyModelIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Model is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon14 = $true
                                                }
                                                if ($FormContent.EntiyModelAttributeIdSelectBox -eq $null -or $FormContent.EntiyModelAttributeIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Entity Model Attribute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon15 = $true
                                                }
                                                if ($FormContent.TaskStartDateDayTextBox -eq $null -or $FormContent.TaskStartDateDayTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Day is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon16 = $true
                                                }
                                                if ($FormContent.TaskStartDateMonthTextBox -eq $null -or $FormContent.TaskStartDateMonthTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Month is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon17 = $true
                                                }
                                                if ($FormContent.TaskStartDateYearTextBox -eq $null -or $FormContent.TaskStartDateYearTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Date Year is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon18 = $true
                                                }
                                                if ($FormContent.TaskEndDateDayTextBox -eq $null -or $FormContent.TaskEndDateDayTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Day is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon19 = $true
                                                }
                                                if ($FormContent.TaskEndDateMonthTextBox -eq $null -or $FormContent.TaskEndDateMonthTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Month is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon20 = $true
                                                }
                                                if ($FormContent.TaskEndDateYearTextBox -eq $null -or $FormContent.TaskEndDateYearTextBox -eq '') {
                                                    Show-UDToast -Message 'End Date Year is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon21 = $true
                                                }
                                                if ($FormContent.TaskStartTimeHourTextBox -eq $null -or $FormContent.TaskStartTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon22 = $true
                                                }
                                                if ($FormContent.TaskStartTimeMinuteTextBox -eq $null -or $FormContent.TaskStartTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon23= $true
                                                }
                                                if ($FormContent.TaskStartTimeSecondTextBox -eq $null -or $FormContent.TaskStartTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Start Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon24 = $true
                                                }
                                                if ($FormContent.TaskEndTimeHourTextBox -eq $null -or $FormContent.TaskEndTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon25 = $true
                                                }
                                                if ($FormContent.TaskEndTimeMinuteTextBox -eq $null -or $FormContent.TaskEndTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon26 = $true
                                                }
                                                if ($FormContent.TaskEndTimeSecondTextBox -eq $null -or $FormContent.TaskEndTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'End Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon27 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeHourTextBox -eq $null -or $FormContent.TaskLimitTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon28 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeMinuteTextBox -eq $null -or $FormContent.TaskLimitTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon29 = $true
                                                }
                                                if ($FormContent.TaskLimitTimeSecondTextBox -eq $null -or $FormContent.TaskLimitTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Limit Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon30 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeHourTextBox -eq $null -or $FormContent.TaskRepetitionTimeHourTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Hour is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon31 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeMinuteTextBox -eq $null -or $FormContent.TaskRepetitionTimeMinuteTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Minute is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon32 = $true
                                                }
                                                if ($FormContent.TaskRepetitionTimeSecondTextBox -eq $null -or $FormContent.TaskRepetitionTimeSecondTextBox -eq '') {
                                                    Show-UDToast -Message 'Repetition Time Second is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon33 = $true
                                                }
                
                
                
                
                                                if ($FormContent.TaskWindowStyleIdSelectBox -eq $null -or $FormContent.TaskWindowStyleIdSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Window Style is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon34 = $true
                                                }
                                                if ($FormContent.TaskSelectScriptTypeBox -eq $null -or $FormContent.TaskSelectScriptTypeBox -eq '') {
                                                    Show-UDToast -Message 'Task Script Type is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon35 = $true
                                                }
                                                if ($FormContent.TaskScriptblockLanguageSelectBox -eq $null -or $FormContent.TaskScriptblockLanguageSelectBox -eq '') {
                                                    Show-UDToast -Message 'Task Script Language is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon36 = $true
                                                }
                
                
                
                                                if ($FormContent.TaskScriptBlockFullName -eq $null -or $FormContent.TaskScriptBlockFullName -eq '') {
                                                    Show-UDToast -Message 'Task Script File Full Name is required!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                                } else {
                                                    $ValidCon37 = $true
                                                }
                
                
                                                if(
                                                    $ValidCon1 -eq $true -and
                                                    $ValidCon2 -eq $true -and
                                                    $ValidCon3 -eq $true -and
                                                    $ValidCon4 -eq $true -and
                                                    $ValidCon5 -eq $true -and
                                                    $ValidCon6 -eq $true -and
                                                    $ValidCon7 -eq $true -and
                                                    $ValidCon8 -eq $true -and
                                                    $ValidCon9 -eq $true -and
                                                    $ValidCon10 -eq $true -and
                                                    $ValidCon11 -eq $true -and
                                                    $ValidCon12 -eq $true -and
                                                    $ValidCon13 -eq $true -and
                                                    $ValidCon14 -eq $true -and
                                                    $ValidCon15 -eq $true -and
                                                    $ValidCon16 -eq $true -and
                                                    $ValidCon17 -eq $true -and
                                                    $ValidCon18 -eq $true -and
                                                    $ValidCon19 -eq $true -and
                                                    $ValidCon20 -eq $true -and
                                                    $ValidCon21 -eq $true -and
                                                    $ValidCon22 -eq $true -and
                                                    $ValidCon23 -eq $true -and
                                                    $ValidCon24 -eq $true -and
                                                    $ValidCon25 -eq $true -and
                                                    $ValidCon26 -eq $true -and
                                                    $ValidCon27 -eq $true -and
                                                    $ValidCon28 -eq $true -and
                                                    $ValidCon29 -eq $true -and
                                                    $ValidCon30 -eq $true -and
                                                    $ValidCon31 -eq $true -and
                                                    $ValidCon32 -eq $true -and
                                                    $ValidCon33 -eq $true -and
                                                    $ValidCon34 -eq $true -and
                                                    $ValidCon35 -eq $true -and
                                                    $ValidCon36 -eq $true -and
                                                    $ValidCon37 -eq $true
                                                ){
                                                    # TASK CONFIG SCRIPTBLOCK
                                                    $TaskConfigSC = {
                                                        $TaskName = $Session:GlobalFormContent.TaskNameIdTextBox
                                                        $TaskPath = "$Cache:TaskListConfigurationDatabasePath"+"$TaskName"+'.json'
                                                        $Session:ValidateItemFullName = $null
                                                        if(Test-Path $TaskPath){
                                                            Show-UDModal -Header {
                                                                New-UDTypography -Text 'Overwrite task ?'
                                                            } -Content {
                                                                New-UDButton -Text "Save" -OnClick {
                                                                    Set-Content $TaskPath -Value ($Session:GlobalFormContent|ConvertTo-Json -Depth 100)
                                                                    Show-UDToast -Message 'Overwrite task configuration file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Invoke-UDRedirect -Url '/tasklist'
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Go back" -OnClick {
                                                                    Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn" 
                                                            }
                                                        }
                                                        else{
                                                            Show-UDModal -Header {
                                                                New-UDTypography -Text 'Save task ?'
                                                            } -Content {
                                                                New-UDButton -Text "Save" -OnClick {
                                                                    New-Item -ItemType File $TaskPath
                                                                    Set-Content $TaskPath -Value ($Session:GlobalFormContent|ConvertTo-Json -Depth 100)
                                                                    Show-UDToast -Message 'Create new task configuration file is successful!' -MessageColor 'Black' -BackgroundColor 'green' -Icon 'Check' -Title 'Success:' -Duration 5000
                                                                    Invoke-UDRedirect -Url '/tasklist'
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Go back" -OnClick {
                                                                    Show-UDToast -Message 'Go back to editor' -Duration 5000
                                                                    Hide-UDModal
                                                                } -ClassName "task-center-box-btn" 
                                                            }
                                                        }
                                                        
                                                    }
                
                                                    if($Session:TaskSelectScriptTypeBoxData -eq 'Exist Script'){
                                                        $GetEditorLanguage = $Cache:GetScriptBlockLanguage
                                                        $GetEditorCode = gc $FormContent.TaskScriptBlockFullName -Raw
                                                        if($GetEditorLanguage -eq 'Javascript'){
                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                            Show-UDModal -Header {} -Content {
                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File name' -Value ($Session:GlobalFormContent.TaskScriptBlockFullName -replace '.*\\' -replace '.js') -Disabled
                                                                }
                                                            } -Footer { 
                                                                New-UDButton -Text "Save" -OnClick { 
                                                                    $TaskConfigSC|iex
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                    $Session:SelectedTaskRow = $null
                                                                    Hide-UDModal 
                                                                } -ClassName "task-center-box-btn"
                                                            }
                                                        }
                                                        elseif($GetEditorLanguage -eq 'Powershell'){
                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                            Show-UDModal -Header {} -Content {
                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File name' -Value ($Session:GlobalFormContent.TaskScriptBlockFullName -replace '.*\\' -replace '.ps1') -Disabled
                                                                }
                                                            } -Footer { 
                                                                New-UDButton -Text "Save" -OnClick { 
                                                                    $TaskConfigSC|iex
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                    $Session:SelectedTaskRow = $null
                                                                    Hide-UDModal 
                                                                } -ClassName "task-center-box-btn"
                                                            }
                                                        }
                                                        elseif($GetEditorLanguage -eq 'Python'){
                                                            $Session:SaveCopyEditorCode = $GetEditorCode
                                                            Show-UDModal -Header {} -Content {
                                                                New-UDDynamic -Id 'NewFileNameFromCodeEditorTextBoxDynamic' -Content {
                                                                    New-UDTextbox -Id 'NewFileNameFromCodeEditorTextBox' -Type text -Placeholder 'File name' -Value ($Session:GlobalFormContent.TaskScriptBlockFullName -replace '.*\\' -replace '.py') -Disabled
                                                                }
                                                            } -Footer { 
                                                                New-UDButton -Text "Save" -OnClick { 
                                                                    $TaskConfigSC|iex
                                                                } -ClassName "task-center-box-btn"
                                                                New-UDButton -Text "Cancel" -OnClick { 
                                                                    $Session:SelectedTaskRow = $null
                                                                    Hide-UDModal 
                                                                } -ClassName "task-center-box-btn"
                                                            }
                                                        }                                                                        
                                                        # TASK CACHE SCRIPT DATA PATH JS PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathJS){
                                                            $TaskScriptDataGciJS = gci $Cache:TaskScriptDataPathJS
                                                            $TaskScriptDataGciJSPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match '-a---')){
                                                                $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciJS.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciJS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciJS.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciJS | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciJSPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
                
                                                            }
                                                            $Cache:TaskScriptDataSaveJS = $TaskScriptDataGciJSPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathJS = $null
                                                        }
                                                        # TASK CACHE SCRIPT DATA PATH PS PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathPS){
                                                            $TaskScriptDataGciPS = gci $Cache:TaskScriptDataPathPS
                                                            $TaskScriptDataGciPSPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match '-a---')){
                                                                $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciPS.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciPS | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciPS.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciPS | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciPSPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
                
                                                            }
                                                            $Cache:TaskScriptDataSavePS = $TaskScriptDataGciPSPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathPS = $null
                                                        }
                                                        # TASK CACHE SCRIPT DATA PATH PY PROCESS
                                                        if(Test-Path $Cache:TaskScriptDataPathPY){
                                                            $TaskScriptDataGciPY = gci $Cache:TaskScriptDataPathPY
                                                            $TaskScriptDataGciPYPSCO = @()
                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match '-a---')){
                                                                $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                    Dir   = ($TaskScriptDataGciPY.Directory[0]).Name
                                                                    Files = $TaskScriptDataGciPY | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                }
                                                            }
                                                            if($null -ne $($TaskScriptDataGciPY.Mode -match 'd----')){
                                                                foreach ($currentDirItem in ($TaskScriptDataGciPY | ? {$_.Mode -eq 'd----'})) {
                                                                    $TaskScriptDataGciPYPSCO += [PSCustomObject]@{
                                                                        Dir   = $currentDirItem.Name
                                                                        Files = gci $currentDirItem.FullName | ? {$_.Mode -eq '-a---'} | select Name,FullName | ConvertTo-Json -Depth 5
                                                                    }
                                                                }
                                                            }
                                                            $Cache:TaskScriptDataSavePY = $TaskScriptDataGciPYPSCO
                                                        }
                                                        else{
                                                            # $Cache:TaskScriptDataPathPY = $null
                                                        }                                                                        
                                                        Sync-UDElement -Id 'SelectScriptDirPathDynamic'
                                                        Sync-UDElement -Id 'SelectScriptFilePathDynamicFastSync'
                                                    }
                                                }
                                            }
                                            else{
                                                Show-UDToast -Message 'Script is not selected!' -MessageColor 'Black' -BackgroundColor 'darkred' -Icon Ban -Title 'Error:' -Duration 5000
                                            }
                                        } -ClassName "task-center-box-btn"
                                    }
                                }
                            }
                        }
                    }
                }
            }                 
        } -Elevation 1
    }
}

New-UDGrid -Spacing 1 -Container -Content {
    $Session:FirstRunNum=1
    if($Session:RecoveryTaskContentCondition -eq $true){
        $RecoveryData = $Session:RecoveryTaskContentPSCO
        $Session:RecoverySelectScriptLanguageFirstRun = 1
        $Session:RecoverySelectScriptDirPathFirstRun = 1
        if($RecoveryData.TaskSelectScriptTypeBox -eq 'Exist Script'){
            $Session:RecoverySelectScriptFullNamePathFirstRunExistScript = 1
        }
        elseif($RecoveryData.TaskSelectScriptTypeBox -eq 'New Script'){
            $Session:RecoverySelectScriptFullNamePathFirstRunNewScript = 1    
        }
        $Session:RecoverySelectScriptRowFindIndexPathFirstRun = 1 
        $Session:RecoverySelectScriptRowProcessIndexPathFirstRun = 1 
        
        $RecoveryMainSC|iex

        $Session:RecoveryTaskContentCondition = $null
        $Session:RecoveryTaskContentPSCO = $null
    }
    else{
        $Session:SelectedTaskRow = $null
        $Session:SelectedTaskScriptPath = 'null'
        $Session:SelectedTaskScriptFullName = 'null'
        $MainSC|iex
    }
}

